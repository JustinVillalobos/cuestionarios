%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: Adobe Illustrator Artwork
%%Creator: Adobe Illustrator(R) 24.2
%%For:  
%%CreationDate: 4/15/2022
%%BoundingBox: 0 0 634 400
%%HiResBoundingBox: 0 0 633.0491 400
%%CropBox: 0 0 633.0491 400
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 24.2.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 24.2.0 x490 R agm 4.7767 ct 5.4352%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 84 8%%BeginData: 12505 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FDFCFFFDFCFFFDFCFFFD96FFA8CBA8FFA8FFA8FD13FFA8FFA8CBA8
%FFA8FD11FFA8FFA8CBA8FFA8FFA8FD0FFFA8FFA8CBA8FFA8FFA8FD11FFA8
%CBA8FFA8CBA8FFA9FD12FFA9FFA9FF7D2752FFCBFD11FFA9FFCBFFCBFFFF
%FFA9FD0FFFA9FFCBFD05FFA8FD11FFA9FFA9FFCBFFCBCBCBFD0FFFCBFFCB
%FFFFFFA9FFA9FFA9FD10FFA8FFA8FFA8F8F8F87DFFA8CBA8FD0BFFA8FFA8
%CBA8FF7D284CA8A9CBA8FD0DFFA8CBA8FFA2A8A2A8A8FFA8FFA8FD0BFFA9
%CBA8FFA8FFA9FFFF53F87DA9FD0DFFA8FFA8A87DA8A9FFA8FFA8CBA8FD0E
%FFA9FFA8FF7D27F8F8F87DFFFFA9FD0DFFA8FFA9FF7DFD04F8A9CBFFA8FD
%0BFFA8FFCBFF52FD04F8A8FFFFA8FD0DFFA9FFA8FFA87D2752F8F827FFA9
%FD0BFFA9FFA9FF00F8F8527DCBA9FFA9FFA8FD0CFFA8FFA8FFA827F8F820
%27A8FFA8FFA8CBA8FD07FFA8FFA8CBA8FFA827F8F8F84A77FFA8CBA8FD09
%FFA8CBA8FF7DF8F8264A75A8FFA8CBA8FFCBFD08FFCBA8FFA8FFA827FD05
%F87DA9FFA8FD09FFA8FFA8FF7DF820F8F8F852FFA8FFA8CBA8FD0AFFA9FF
%CBFFCB52F8F852C3A8FFA9FFCBFFA8FD09FFA9FFA9FFFFFFF8F8F82775A1
%FFFFA9FD0BFFA9FFFFA8F8F84BC299CAFFFFA9FFA9FD09FFA8FFCBFFCBA9
%4B26F8F8F87DFFFFCBFFA9FD09FFCBFFFF7D219A00F8F8277EFFCBFFA9FD
%0BFFCBA8FFA8FF4B767DA7A8CACAFFA8FFA8CBA8FD07FFA8FFA8CBA9FF52
%262675996F76FFA8CBA8FD09FFA8CBA8FFA84B209A996FA1FFA8CBA8FFA8
%FD07FFA8CBA8FFA8FFA29A4BF8F820A8FFA8FFA8CBCBFD07FFA8FFA8FF7D
%527777285220F87DFFA8CBA8FD0AFFA9FFA8FFCBA175C9CAA1A0FFA9FFA8
%FFA9FD09FFA8FFFFA827F84B9AC2C275C3A9FFA9FFA8FD07FFA8FFA9FFA9
%FF999AC29A6FCAA9FFA9FFA8FD09FFA9FFA8FFCBCA6F9A75754BFFCBFFA8
%FFA9FD07FFA9FFA8FFCBA9767677C39975F852CBFFA9FFCBFD08FFA8FFA8
%CBA8FFA099BB9A6FC2A8FFA8CBA8FFA8FD07FFA8CBA8FF27F8F84B99C299
%99A0CBA8FFA8CBA8FD05FFA9CBA8FFA8CBA8CA9AC26F9AA8FFA8FFA8CBA8
%FD07FFA8FFA8CBA8FFA17575C2999AA8FFA8CBA8FFA8FD05FFA8FFA8CBA8
%FFA9C36FC2BC9A26F827FFA8FFA8FD0AFFA9FFA9FFA9FFCAC29AC2C3FFCB
%FFA9FFCBFD09FFA9FFA827F8F8F827999A7527A8FFCBFFA8FD07FFA9FFCB
%FFA9FFFFC36F9AC3FFA9FFCBFFA9FD09FFCBFFA9FFA9FF99C2BCC3CAFFCB
%FFA9FFA9FD07FFA9FFA9FFCBFFCAC2999A20F8F8A8FFFFCBFFCBFD08FFA8
%FFA8CBA8FFA9CB99754BA8A9FFA8CBA8FFA8FD07FFA8FFA9FF27F8F82775
%C26F75267EA9FFA8CBA8FD05FFCBCBA8FFA8A984A9A19A76A984A9A8FFA8
%CBA8FD07FFA8FFA8CBA8FFCBCA4B75A0FFA8FFA8CBA8FFA9FD05FFCBFFA8
%CBA8FFA9FF76759A764BA8CBCBA8FFA8FD0AFFA8FFCBFF848560CAC2C384
%85A8FFCBFFA8FD09FFCBA97DF8F8597EFD04C9C8A1FFA8FFA9FD07FFA9FF
%A8A97F855AAFA9FF85857FA9A8FFA9FD09FFA8FFA9FFA8A97D9ABBC37EA9
%CBFFA9FFA8FD07FFA8FFA9FFA8C9A0A2C3C9C8C9C9CFA9FFA8FD0BFFCBA8
%FF5A6036605A847E6036607EFFA8CBA8FD07FFA827F8F8F85A8585A0C8C2
%C8A0C8A8FFA8FD09FFA8855A857E7F7E8585855A855AA9A8FFA8FD07FFA8
%CBA8FFA85A2F7DA0A17C59537EA8FFA8CBA8FD07FFA8FFA7C8A07854557D
%C8C2C29FC9A8CBA8FD0AFFCBFF84615A8560615A615A615A6184FFA9FD08
%FF7DF8F8F87E85857FA8C2C8C2C9C2A8A9FD0AFF857E857F857E8585857E
%8585857EFFCBFD09FFA8FFA85A537E7D7E537D535A537EA9FFCBFD09FFCA
%C8C27E547F54C9C8C8C2C8C2C9A9FD0CFF5A605A605A605A605A605A605A
%60A8FD09FFA8F8F8537F857E857DC8C2C8A0C8A085A8FD09FF7E855A857E
%855A857F855A85847F7EFD0BFFA87E537D535453532F5A53532F7EA8FD09
%FFA8C8C1A154785454A0C8C2C8A0C8C1C9A9FD0BFF8536615A615A615A61
%5A615A613685FD0AFF522885857E857FA8C2C8C2C8C2C97EFD0BFF7E857E
%857F857E857F857EA97E85A9FD0AFFA82F7D535A535A535A535A535A2FA9
%FD0AFFC2C87D55547F54C9C2C8C2C8C2C8C9FD0DFF8536605A605A605A60
%5A603660A8FD0BFF7E7F5A855A85A1C8A0C8A0C2A0A9FD0BFFA95A7F5A85
%7E857E855A857E85A8FD0BFF845352FD09532F7EFD0BFFCFA0FD045478A0
%C8A0C8A0C2A7FD0FFFAF60615A615A615A615A85AFFD0DFFA8857E857EC9
%C2C8C2C8C2FD0FFF84857F857EA97F855AA9A9FD0DFFA87E5354535A535A
%535A53A9FD0EFF7E78547F54C8C2C8C2C9CAFD12FF84845A605A8484AFFD
%10FFA8A97EA8C2C8A0C9C9FD11FFA8A97E857E8584A9A9FD0FFFA8A85959
%535A537E7EFD11FFA87E547EA0C2A0CFCFFD16FFAFFD17FFCFFD33FFA9FD
%FCFFFDFCFFFD3AFFA8FD1BFFA8FD17FFA8FD17FFA8FD17FFA8FFA9FFA8FD
%16FFA9FFA9FFA9FD15FFCBFFA9FFCBFD13FFCBFFA9FFCBFD15FFA9FFCBFF
%A9FD13FFA9FFA9FFA9FD14FFA8FFCBFFA8FFA9FFA8FFA8FD0FFFA8CBA8FF
%A8FFA9FFA8FFA9FD0DFFCBFFA8FFCBFFA9FFA8CBA8FD0FFFA8FFA9FFA8FF
%CBFFA8FFCBFD0DFFA8FFA8FFCBFFCBFFA8FFA8FD10FFCBFFA8527DFFA8FF
%FFFFA8FFA9FD0DFFA8FFA9FFFFFFA87DA8FFA9FFCBFD0BFFCBFFA9FFA252
%7DA27EFFA9FFA8FD0DFFA9FFCBA8272727A8A8FFA9FD0FFFA8FF7D52527D
%A8FFA8FFA9FD0EFFA8FFCB52F8F85227F852A8FFA8FFA8FD0BFFA8CBA8FF
%A87D4CF8F87DA9FFA8CBA8FD09FFA9CBA8FFCB52FD04F8A2FFA8CBA8FD0B
%FFA8FFA8FF52FD05F827A8A8FFA8FD09FFA8FFA8FFA827FD04F87DFFA8FF
%A8FD0EFFCBFF7DFD04F820F852FFFFCBFFA9FD09FFA9FFA9FFA227F8F8F8
%207DFFCBFFA9FD0BFFA9FFCBFF524B20F8F852CBFFA9FFCBFD09FFA9FFCB
%FFCBA87575FD04F852FFCBFD0BFFA9FFFFA8F875F8F8F852A8FFFFFFA8FD
%0CFFA8FFA8FF52FD04F89A4BA9A8FFA8CBA8FD07FFA8FFA8FFA952F8F8F8
%7575A9A8FFA8CBA8FD09FFA8CBA8FFA9A86F4BF8F8F87DFFCBA8FFA9FD07
%FFA9CBA8FFA8FF76759927F827F827A9FFA8FD09FFA8FFA8FF52269926FD
%04F827A8CBCBA8FD0AFFA9FFA8FFA827F84B4B9A7576CBFFA8FFA9FD09FF
%A8FFA9FF5227204B7576A8FFA8FFA9FFA8FD07FFA8FFA9FFA8FFA1759976
%4B4B7DFFA9FFA8FD09FFA9FFA8FFCBC36FC29A756FF827FFA9FFA9FD07FF
%CBFFA8FFCBA84B9A9A9A6F4BF8F8F8CBFD0BFFA8FFA8FFA827F84B6FC29A
%9999FFA9CBA8FFA8FD07FFA8CBA8FFA9A84A9ABC9A6FCAA8CBA8FFA8CBA8
%FD05FFA9CBA8FFA8CBA9C96F9ABC9975CBA8FFA8CBA8FD07FFA8FFA8CBA8
%FFA19999C2994BF8F852FFA8FFA9FD05FFA8FFA8CBA8FFA8C36F9AC29A4B
%F8F8F827FFA8FD0AFFA9FFFFA2F8F820A1C3C275C252FFCBFFCBFD09FFA9
%FFCBFFCAC3BCC299C2CAFFA9FFCBFFA9FD07FFA8FFCBFFA9FFCAC29AC2C3
%CBA9FFCBFFA9FD09FFCBFFA9FFA9CA9AC29A6FFD04F87DFFA9FD07FFA9FF
%A9FFCBFFA1C2BCC27E52F8F8F827A8FFCBFD08FFA8FFA8FF27FD04F89A75
%9A20F827FFA8FFA8FD07FFA8CBA8FFA8FFCAC299BCC3FFA9CBA8FFA8CBA8
%FD05FFA9CBA8FFA8FFA8FF9A6F6FCAA9FFA8FFA8CBA8FD07FFA8FFA8CBA8
%FFAFA14AC24BFD04F828A9FFA9FD05FFA9FFA8CBA8FFA9A97675757D00FD
%04F8A8A9FD0AFFA8FFCB4CF8F82759A0BC752EF8F8A2FFA8FD07FFCBFFA9
%FFCBCB7E7EC2996F7EA8FFFFFFA8FFA9FD07FFA9FFA8FFA9A87EA199C2A0
%7E7EA9CBFFA9FD09FFA8FFA9FFA8CAC3C3A1C9A051F8F827FFA8FD07FFA8
%FFA9FFCBA9A1A099C299520027F827A8FD0AFFA8CBA8FF27F82F616084A0
%A15A5A007DA9CBA8FD07FFA8FFA9842828287DC3C3282E28A8A9CBA8FFCB
%FD05FFA8FFA8FFA87E2F53A0C8C2A02F5353A8A8FFA8FD07FFA8CBA8FFA7
%C2C1A885CAA0C8C8A0F852CBCBA8FD06FFCBA8FFA87E0676BBC2BBA04C2F
%28277DFFA8FD0AFFA9FFFF7D358560615A616061606184FFA9FD0AFFA928
%532E5328532F53282F2FA9CBFFCBFD07FFCBFFCB7E535A537D53A7535A53
%5A53FFCBFD09FFA9FFCAC8C2C9A8CAC2C8C2C8C8C9A8FFA9FD07FFA9FFFF
%A828532E7776772E2F28532FA9CBFD0CFFA8FF60605A605A605A605A605A
%61A8CBA8FD07FFA8FF5328282F282F282F282F282F2EA9A8FD09FFA8A82F
%5A5353535A5353535A53537DFFA9FD07FFA9CBA8C8C2C8A0C9C2C8A0C8C2
%C8C2CAA9FD09FFA8FF282F282F282F282F282F282F53CBA8FD0CFF84615A
%615A615A615A615A843685CBFD09FF7D2F28532853285328532853282F53
%A9FD0AFF7E53535A535A535A535A535A535AA8FD09FFA9C9C2C8C2C8C2C8
%C2C8C2C8C2C8C2FD0BFF7D2F53532853285328532853282F7EFD0CFFA85A
%36605A605A605A605A607D605AFD0AFF7E062F282F282F282F282F282F28
%287DFD09FFA853537D2FFD09532FA8FD0AFFA0C2A0C8A0C8A0C8A0C8A0C8
%A0C2A7FD0AFF532853282F282F282F282F282F067EFD0DFF84615A615A85
%60615A8560845AAFFD0BFF7E285328532E5328532E53282F7EFD0BFF7E59
%7D5A535A537E535A535A53A8FD0BFFCAC2C8C2C8C2C9C2C8C2C9C2C8C9FD
%0BFF84532F5328532E5328532E2F287EFD0FFF846036605A605A6036607D
%AFFD0DFF7E2828282F282F282F282F7DFD0DFF7E7D2F545353535A535353
%A8FD0DFFCAA0C8C2C8A0C8C2C89FC8C9FD0DFF84592928282F282E282928
%7EFD11FFA9855A605A615A8584FD10FFA95353282F282F287EA8FD0FFFA8
%7E535A5353537E7EFD11FFC9C9C2C8C2C8C8C9CAFD10FFA8535328532F59
%7DFD16FFA8AFA8FFAFFD13FFA8A87DA8A8FD15FFA8A9A8A9A8FD13FFA8FF
%CACAA8FD15FFA8A9A8FDFCFFFDFCFFFD9FFFA9FFA8FFA8FFA8FD13FFA8FF
%A8CBA8FFA9FD11FFA8FFA8CBA8FFA8FD13FFA8CBA8FFA8FFA8FD11FFA9FF
%A8FFA8CBA8FD14FFA8FFCBFD05FFA8FD11FFA9FFA8FFFFFFA8FFA9FD0FFF
%A9FFA8FD05FFA9FD11FFA8FD05FFA9FFA8FD0FFFA8FFCBFFFFFFCBFFA8FD
%12FFA8CBA8FF7D5252A8A9FFA8FFA9FD0BFFA8CBA8FFCBFF7DA8A9FFA8FF
%A8FD0DFFA8FFA8FF5252277DA8FFA8CBA8FD0BFFA8FFA8A87D7D527D7DFF
%A8CBA8FD0DFFA8CBA8CB7D7D7DFFCBFFA8FFA8FD0EFFA9FFCBFF27FD04F8
%7DFFFFA9FD0DFFA9FFA87D53F8F85252FFCBFFA9FD0BFFA8FFCBFF52FD04
%F87EFFFFA9FD0DFFA9FFA827FD04F87DFFA9FFA9FD0BFFA9FFA9FF7D20F8
%F8277DA8FFCBFFCBFD0CFFA8FFA8FF27F8F8F82020F8A8A9FFA8FD09FFCB
%FFA8CBCB7DFD05F827A9FFA8CBA8FD09FFA8CBA8FF7DFD06F8FFA8CBA8FD
%0BFFA8FFA8FF769926F8F8F87EFFA8FFA8FD09FFA8FFA8FFA97D75994BF8
%F87DA9FFA8CBA8FD0AFFCBFFA8FF7DF8F8F820C226F852FFA8FFA9FD09FF
%A8FFA9FF52F8F8F820277DFFA8FFA9FFA9FD07FFA9FFA9FFA927F8F82675
%75207DFFA9FFA8FD09FFA9FFA8FFFFA1999AF8F8F852CBFFA8FFCBFD09FF
%A8FFA9FF769A9A9AF8F8A8FFA8FFA9FD0AFFA8FFA8CBFF52F84B4B756F75
%26F87DFFA8FFA8FD07FFA8CBA8FFA827F8F8F87675A2A9CBA8FFA8CBA9FD
%06FFCBA8FFA8A9F84B6FC2999A2052CBFFA8CBA8FD07FFA8FFA8CBA8FF76
%99996F204B27FFA8CBA8FFCBFD07FFA8CBA8FFA8764AC24B204BFFA8CBA8
%FFA8FD0AFFA9FFCBFF284B99C39A9AC276F827CBFFCBFD09FFA9FFCBFF27
%4B7677767777FFA9FFCBFFA9FD07FFA9FFCBFFA84B759AC2C2757527FFCB
%FFA9FD09FFCBFFA9FFCBC36FC2C29A6FA8FFFFA9FFA9FD07FFCBFFA9FFFF
%A9204B20F84AC2CBFFA9FFCBFD0AFFA8FFA9CB27F8F875BC9A75C220F8F8
%CBA8FFA8FD07FFA8CBA8FFA9CB6F99C29A6FA2A9FFA8FFA8CBA8FD05FFCB
%CBA8FFA9A9F84B99C2999A4A27A8FFA8CBA8FD07FFA8FFA8CBA8FFC29A99
%C299A0A8FFA8CBA8FFA9FD05FFA9FFA8CBA8FFA827F8F8F875C9FFA8CBA8
%FFA8FD0AFFA8FF52FD04F8759AC24BF8F852FFFFA8FD07FFCBFFA9FFA8FF
%CBCA9AC299BCC3FFA9FFA8FFA9FD07FFA9FFA8FFA8F8F84B999A75F8F8FF
%A9FFA9FFCBFD07FFA8FFA9FFA9CAC2A099A1A8FFCBFFA9FFA8FD07FFA8FF
%A9FFA8FF7DF8F826A1FFA9FFA9FFA8FD0AFFA8FF7EFD04F8264B754B4BF8
%F8F8277DFFA8FD07FFA8FFA8CBA8FFA9C36F9AA0CAA8FFA8CBA8FFA9FD05
%FFA8FFA8CBA8A8F80076C275520527A8FFA8FFA8FD07FFA8CBA8FFA8A87E
%764ABB765A59A8A8FFA8CBA8FD05FFCBCBA8FFA8FFA8CB514B99C37DA8A8
%FFA8CBA8FD0BFF7EF84B75C8C2A176A0A0C87527F8F8A8FD09FFCBFFA9FF
%FFFFA1A04BA8FFFFCBFFA9FFA9FD07FFA9FFA9FF7E53537EA1CA7E7E537E
%A9FFA9FD09FFA9FF7E53282F76C3A17D282F28597EFFCBFD07FFA9FFCBFF
%A8A277C3C2C3777D76A1A2FFA9FD0CFF7CA0C2C8C2C8A0A0A0C8C2C8C251
%F852FD08FFA8FFA8FFA2A27DA27D7D7DA8A8FFA8CBA8FD09FFA8FF7E5353
%532F545353535A2F7EA8FFA8FD07FFA9FF5328282F28777D7D522F282F28
%2953A8FD08FFA8FFA87D767D7777777D777776777DCBA8FD0AFFC9C8C2C8
%C2C8C2C8C2C8C2C8C2C8C85152FD09FFA9FFA177767D77A1777D77A8A9FF
%A9FFA9FD07FFA9FF8453535A535A535A535A537E53A8A9FD09FF532F2853
%282F52A1777728532853282F53FD09FFA8A2777D77A1777D77A1777D777D
%A1FD0BFFCA9FC8A0C8A0C8A0C8A0C8A0C8A0C89FA7FD09FFCB7777767776
%7D7677767776A8A8FFA8FD09FFA85AFD0B537E53A8FD08FFA853282F282F
%2877767D522F282F282E28A8FD08FFA8A2767D7677767D7677767D767776
%77A8FD0BFFC9C2C9C2C8C2C9C2C8C2C9C2C8C2C8CFFD09FFA87D77A177A1
%77A177A1777D7DFFA9FD0AFFA9535A537E535A537E535A537E7E53A8FD09
%FFA82F2853285377A1777728532E53287EFD0AFF77A177A177A177A177A1
%77A1777DA2FD0DFFC99FC8C2C8A0C8C2C8A0C8C2C2C9FD0BFF7D77777776
%7D7777767D77777DFD0CFF7E2F53535A5353535A5353537E7EFD0BFF7E28
%282F287776A1522F282F2859FD0BFFA876777777767D7777767D76777DFD
%0FFFC9C2C8C2C8C2C8C2C8C2C9CAFD0DFFA27D777D77A1777D777D77A8FD
%0DFFA95353535A535A535A535AA8FD0DFFA8532853777D777D28292884FD
%0EFF777D777D77A1777D76A1A8FD11FFCFA1C8A0C29FC8A0C9A8FD0FFFA8
%A277777677767D7DFD11FF7E532F532F535384A8FD0FFFA97E537D767752
%5359A9FD10FFA1A1777D767D7DA8A8FD16FFCAFFCFFD15FFA8FFA8FD15FF
%A9FFA8AFA8FD17FFA8FD17FFA8FDFCFFFDFCFFFDFCFFFD99FFFF
%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 6.0-c002 79.164460, 2020/05/12-16:04:17        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
    xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
    xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
    xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
    xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
    xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   dc:format="application/postscript"
   xmp:CreatorTool="Adobe Illustrator 24.2 (Windows)"
   xmp:CreateDate="2022-04-15T14:04:15+03:00"
   xmp:ModifyDate="2022-04-15T14:04:15+03:00"
   xmp:MetadataDate="2022-04-15T14:04:15+03:00"
   xmpMM:OriginalDocumentID="uuid:9E3E5C9A8C81DB118734DB58FDDE4BA7"
   xmpMM:DocumentID="xmp.did:679c44fe-16d6-6041-852a-62a1dc575f61"
   xmpMM:InstanceID="xmp.iid:679c44fe-16d6-6041-852a-62a1dc575f61"
   xmpMM:RenditionClass="proof:pdf"
   illustrator:StartupProfile="Basic RGB"
   illustrator:CreatorSubTool="Adobe Illustrator"
   xmpTPg:NPages="1"
   xmpTPg:HasVisibleTransparency="False"
   xmpTPg:HasVisibleOverprint="False"
   pdf:Producer="Adobe PDF library 15.00">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">2204.w037.n003.303B.p1.303</rdf:li>
    </rdf:Alt>
   </dc:title>
   <xmp:Thumbnails>
    <rdf:Alt>
     <rdf:li
      xmpGImg:width="256"
      xmpGImg:height="164"
      xmpGImg:format="JPEG"
      xmpGImg:image="/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgApAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FVGa8t4TR2+&#xA;L+UbnCAStKP6Wtq/Zf50H9cPAU0rw3ME392wJ8OhwEUhVwK7FXYqtkljiXlIwUe+EBUK2q2wOwY+&#xA;4A/icPAU0qRX9tIaBuJ8G2xMStIjIodirsVczKoJY0A6k4qhX1O1U0BLf6o/rTJcJTTSanasaElf&#xA;9Yf0rjwlaRSsrAMpBB6EZFDeKuxV2KqEt9bRGherDsu+ERKaUxqlqTvyHuR/TDwFaRMcsci8o2DD&#xA;2wEIXYFdirsVUprqCH+8ah/l6nCBaof9LW9fsvTxoP65LgKaV4by3mNFb4v5TsciYkLStgQ7FXYq&#xA;gtRvDEPTjNHYbnwGSjFIDDvOvm3TfKnlq/13UHThaQvJFC8ixGeVVLJCjN+05FBscsJpL4v88ecv&#xA;PX5keZ38x2FteR21tJDBp1nbSPILaRloqRFQhaR2BaqryP3ZRLILrqyGORBkBsH29oI1KLRdOGot&#xA;XU0toReuD1nEY9Q1H+XXL2LJrC79eOjf3i9fceOVyFIIRWRQpXM6wRFzueijxOEC1SSWWSVy7mpP&#xA;4ZaAyfPP5+/85Aa/5U8xDyv5XEMN3bxxy6hfSoJWVpRzSKNG+AfAQzFgeu1KbxlJSWR/kF+bXmfz&#xA;pbzWfmS0jS6SE3VjqEI9NbiFJPRk5x1NGSSm60B8Nt4wyAkjqGZhIAE8i9w069YMIZDVTshPY+GS&#xA;lFrITPK0OJABJNANycVSS7u3nc70jH2V/ictApkA+efzO/5yW1bQPOs3lXy1o0V9c2sqW001yZCZ&#xA;Z3C0jijjKHYtxqTue3jGU6SASaHNnH5UeePzA81XGoSeZdCg0Sytki+qqrM00kkhblWrGiqE7qOo&#xA;yOLPHJfCbpuy6fJjrjFW9Ntbp4HqN0P2lywi2ghO1YMoZTUEVBypi3iqW6jetyMMZoB9sj9WTjFI&#xA;DF/NvmnSfKvl6817VmdbGyVTIIl5yMzuI0RFqKszsAN/nkyaZPnvzN/zmEZ9OvLfy7oklpeyApZX&#xA;91KjiOpp6jQKpBYDoORFetRtkDNjb0f/AJxr8zefdb8lTat5nuHufUu3Gl3UqqskkCqA/wBkKGQS&#xA;cgpO/XsBhG43SHuVtcLPEHGx6MPA5AimKrgVC3936EdF/vG6ew8clEWkB5v+bXnyTyT5Kvdfhiju&#xA;tQV4oLG2mLBZZppAtDx3+FOT070pXJk0EvF9N/5y31nTtTmsPOHltI3hcpL9RcpJGQOhjmLh6n/L&#xA;H05COUEWOTKcTEkSFEPorRNYs9Z0ex1ixYtZ6hBFdWzMKN6cyB15DsaHcZYhkWnXhkHpSGrjdW8R&#xA;kJRYkI7IIdiqQ3Tl7iRj/MafIbDLhyZB5p+dXlOw1/TdIe90h9ZhsLz1Xs0nNuGSRDG3NlaNiBXl&#xA;QOh+GnLscXV5TAAhzdHp45SQefw/SluhtoPln6jY+XtHNrFSIysqQ+lEYopI3dJDynklkd0c+tUf&#xA;DQNXfNYdYJbker7vc7eHZkoHhB9B5+fvetPJ6jc6cS1CR9Gb0POUr6e5W7Twaqn6cEuSCnWVMUs1&#xA;dz6iJ2A5feafwyyDIPMPzj/Nqz/LjQ7a8a0N/qF/I0Vja8/TU8AC7u9Goq1GwFST9OEmlJfOvl22&#xA;0T80dfutd8yy27aveTNJeWsU7wTBYlSOBIYaNyhWNeJPLlXvms1eecDY+7Z2/Z2kxZh6ufv3/sez&#xA;/lhpljpPnAQW8cllaR201jYW0pQI5kkN3K0HFmLCir9r7IX55XoMhM++xu5PaeGMcewoRND42TT2&#xA;MEg1HUdM3LoGQRtzjV/5gD94ygsEPqTlbVqftELko80hJstZPD/Ov5TaKfzHfzVc2ihZ5I7iB1kc&#xA;F7qNRuyVKkfDyoKHkN6g7afXZckSR/CXe9mabDOpfxR+/wDUyD8n9Pkh1HVboQNBbmOG0t0kjSOQ&#xA;R2w4gvxUVLu0jA1IpTpkuz5EyPu+0se1IARB5b0PcB+t6hm2dInGluWtaH9liB+v+OVS5sSinbij&#xA;N/KCfuyKGPEkkk7k7nL2bDvzYQt5LuGAUmCe2uayGij6tOk5q37IpHTl2zE1kqh79nM0ELyX/N3+&#xA;T5s1H8hrK6uTfabfSzW19O31aytYkYIksjMjCWSRfgSOnYknYdc18NeeRG7ssvY8fqEvSe7oPeTy&#xA;AfXen2dvY2FtZ28Yit7aJIYo1AUKiKFUACgFAO2boOhKb6S5Erp2K1+kH+3IzQU0ytikuoOWu38F&#xA;oo+jLY8mQYT+Z/lSHzL5Y+qy8StrPHecXUMD6QIPUGh4uaGm2E5IwiSRf2t2DHxzEe8vC9a8geXt&#xA;T059a122ht9Rjj+OSWX6pCZVUJ+8kCqfSBX4SRWn3Zrp9oY6Eccfs5D4SuRvey7o9mcVzynf31v8&#xA;tgqf842eaNUT8yNW8r6fezX3lRLWWW2haR5YYGikRVeEybqh5ldvtbE9My8BkQL5ujzCImRH6X1F&#xA;bOUuI2HZh9x2OXHk1p9lLF2KsfvuMEsxkIREJYsdgF61y6O6TIAWWJX3nZBKY7SAPF0Mkldx3oop&#xA;+vM6Ojseoupy9q0fQPixO30iws9Yh1i21KU+gxcae5lMcjFCoDwsHjWla/A43FeuafT9kZYZBxcJ&#xA;j39XoNX7SYMmE8HHHIRy6fj3M70bzTaag4gkX0Lk/ZUmqt8jtv7Zs8umMdxuHT6btCOQ0dpMk09C&#xA;12ngtWP0Ziy5OeU6ypixH8yPN2heT9FfX9cn9GxhAjAUcpJJGPwxxp+0zfqqTsDk4nZIfKH5p+fY&#xA;/wA7NV0TQ/KWk3MRsGmlmvL7gnBJeCszCNpVVF4VJqSTQAV6zjA5DQYTmIiyz78vvyW8neXCZZhL&#xA;qGpNC0Ut3I3FaOKOFh3TifBuR98wu28JwwjKyYk0ff0/S53Y2fiyS2F19nVkVv8Alr5bsvMOla9Y&#xA;zXSajpdyZ0kaSRkMci+nLD6UksqhWjLD4eO/3HSYe0eCY6x67Afc7bVaYZRdUem5P3vWIZEmRXiP&#xA;JX+yR3zqL6ugZHGvCNU/lAH3DKSwQ+pIWtWp+yQ2SjzSGGar5jhtmMNsBNMNmb9hT9HU5sMOlMtz&#xA;sHHy6kR2G5SO5Nhr9vPa68xeALyhRAo+OoHECn017Urg1nZscgAFggs9H2pPCTyIPQusprfQLa3s&#xA;NFlkeyiTdLpmml5liW5yyFpG9vi2Gw6ZZp9BCMOEjfvac+vnOfFfw51892VaVqUd/beqo4up4yJ1&#xA;of6HMbNiMDTkYsomLZJpaFbWp/aYkfq/hmLLmzKKdeSMv8wI+/IoY8QQSDsRsRl7NhHmLz/ojSPp&#xA;NtAdRlkYRswbjEGrtRxyLUPgPpyWXTA4yZ/TScGoMMg4Pqti/l2/Pl531C5vJNYnjjo7NwjUAsql&#xA;V9NFRD8VaEFvE0zS6HBMZhceEHbz5HfzG3Pk7vX6uEsJAkZH7Pdt/a9C8vectF134LWQx3QFWtZR&#xA;xencr1DD5HN7kwyjzdBHICyvSUJld+yrT6Sf7Mx5simmVsUl1JOF05OwajA/RlsTsyDFNf8AN9pp&#xA;tu8gUSD7K1/bbwA/jmFh1M9Tl8LAL75HkA5x0wxw48hryHN5vZeXPJ+vLfW1xDdXP1xXa6juZZHV&#xA;FkapSGQyu6LU7KioKDKu1uz8mjiMnFHeVChXzc/T6yOcGHCeW5Mifl3Mu8geWfJ3ky3ltNF0xLFb&#xA;kg3FyrPJI5FePN5C7kCuwrQeGYml7YF1kFeYcfN2dQuHyegWiiWaIKahiDUeHXN7xAiw6siuaf5U&#xA;wdirGvPOiX+o6aGsSTJEeUtuOsijw918O/3ZlaTLGMt3C12Kc4VH5d7yplZWKsCrKaFTsQRm4edI&#xA;prFCpbx3Ek8aW6s87MPTVASxbtSmCRAG/JlAEnbm9o0W1uIbGI3YAvHRfXANQGpuNs0WQgnbk9Zj&#xA;MuEcXNH5WyYf+a/5cad+YXku78vXb+jMxE+n3dK+hdRg+m9O67lWH8pOKvHvy+/LhPIej/oyeMDW&#xA;ZCH1Sen25BWiqSBWNK0Q9D175u9HCIht8XW6iRMt2X2YPqk9gM0/tNMDTgdTL9Bdp2FEnMT3RRuc&#xA;K9YyryZpt6okuZ/htGIa3Rupbuw/yc7XTZAdNjH8Vf2PK6gEZp19NsryTW06K6MjCqsCGHiDtiCr&#xA;y7zD5eudJum+EvZuT6M3UUPRWP8AMM3un1AyDzdZlxGJ8kpBoQfDMhqVLiq3DU8aj9eKsj8tWF7N&#xA;rcr268bE/FMx2Xi45oo/yt8wdVOIgAfqcrTg8Vjk9AVQqhVFABQDNQ5zeKsJ/NL9J2nlu6udNjZj&#xA;KQl06dYom+2/jv0PhWuZWloyALHITwvCrwqjC2QALFQO1BVnp8RJ60rsBmdpwZDjP8X2Dp+1qy0P&#xA;SOn3obMhpTDy/a6xc6xax6OrtqHqAwFP2SD9puwUftV2p1yGQxETxcmUbvZ9N6dbywWcSTcTccQZ&#xA;2SvEvT4uNd6V6ZpJGy5aJyKpdr2nTX1g8cDBZh9mv7Q7rX3zH1eOU8ZjE0S5GlyRhMGXJ4L51mn/&#xA;AEy1pKrJ9VUKY22ozDkTT6Rm79mNH4Wn4iPVMn7Nh+v4su0s3HkocgET5FUF7x+4EY+/l/TNd7Yy&#xA;2xD+t/vXJ7IG8j7v0suVWZgqgliaADck5wwF7B3RNM68saVc2dpzuTSSTdIj+wD/ABOdT2fhnjx1&#xA;I/Duef12aM5+n596dZnOE7FXYqlWr+V9E1Ul7q3Hr0oJ4yUf6SNm/wBkDl2PPOHIuPm0uPJ9Q3Sl&#xA;fy18vhgTJckD9kulD9yZd+en5ON/JmLzTzS9B0jSwfqVssTkUaTdnI/1mqcx8maU+ZcvFp4Y/pCP&#xA;ytudirsVQuoaXp+oRhLyBZgteJNQy1pWjChFadjk4ZJRNg0xlAS5pQvkbRlJ4NMgJrQMp/WpzF1u&#xA;D8yQZk7e79Tk6XOcAIgBujLTyxo9swYQ+q4NQ0p5fhsv4ZVh0GLGbAs+bPLrck9idvJNczHFdirs&#xA;VWyRRyxtHKivGwoyMAQR7g4QSOSkWkN15G0GdyypJAT1ETbfcwbMqOtyDzaJaaBbi8kaEknqSLJO&#xA;fCR9v+EC4Za7IfJA00AnkMEMEaxQoscaiiooAA+gZiGRJst4Fcl+BLsVdirEtZ/KzybqkrTNataT&#xA;Pu8lq3pgn/UIaMfQuZENTOIpgcYKWQ/kj5QjcM097Ko/YeSMA/8AAxqfxyw62fkx8IMw0by9ouiw&#xA;GDS7RLZGpzKglmp/M7VZvpOY08kpcy2AAckwyCXYq7FUq1vytoGtqBqdmk7qKJNusijwDqQ1PatM&#xA;uxZ54/pNKk2n/lj5e08ym1luUEvHkC6MPhrSlU98p1/+F8Pifw35c6/U34NRLFfD1ZBp+iabY0ME&#xA;Q9QCnqt8T/een0Zj4dJjx/SN1y6meT6ijsyGh2KuxV2KrZJY4xV2Cj3ONKo/X7OtPUH3H+mS4Sml&#xA;dJEcVRgw8Qa5FDeKuxV2KuJAFSaAdScVUDfWgNDIPo3/AFYeEppUjnhk+w4b2B3xpC/ArsVdirsV&#xA;Unu7ZDRpBXw6/qw0VpyXds5osgJ8On68aK0q4FdirsVdiqySeGP7bhfYnfDSqYvrQmgkH07frx4S&#xA;mlcEEVBqD0IwIdirsVdiq2SWOMVdgo98aVQ/SNnWnP6aH+mS4SmlaOaKUVjYN8sBCF+BXYq7FULf&#xA;XnoIAu8jdPYeOSiLSA+f/wA7fz81zyB5v0zTINJivbG4t1u7yednV5FaR4/TgZTxRl9OpLBuo27m&#xA;RNJtBXH/ADl35DTUxb2+majcWAAMl6qxqRUVYiIvUhfcj+rxhbe16HrdnqenWmr6VcCayvYlntp1&#xA;qA8bioNGAI+RGS5qyW0uluI69HGzDKiKQQr4ELJpUijMjdB+OEC1SK9v6o81xII4IwXYsQqIqipJ&#xA;J22HUnLQKZPGfNn/ADlL+XGjLcRaWZtevIqqi2y+nbs4NCPXk/Z/ykRhkTMLbL/yi/MO68+eUl8w&#xA;Taf+jHNxLAkSyGQMIuPxqxVO7EfRhBtQ9JsL4yH0pT8f7LeORlFBCOyCHEgCp6YqlF5fvKxSM8Yh&#xA;tt1OWRiyAeHfnB+emv8AkTzZbaTY6ANSsRZrfXtwzSKTG0jIeDIrKgXhuzA9fvEp0kAnkEb+Tn59&#xA;2X5halfaVcaeul6jbJ69tGs3rLNCDxYqWSJuSEiop0OSjK0PZbK/eNgkhrGdqnqMEoqQm2VsXYqg&#xA;b++MZ9KI/H+03hk4xSA81/N7zd5p8seVBqPluxh1HVZrqK2SO4b4VEob4wnKNpG5KAFU969Acckx&#xA;EWWyGOUjURZeI6T/AM5aebNIvJ7HzboNtdyoV3sZTA8dRyIYE3COdxsCtO++RjlsWicTE0eb6A/L&#xA;H8ztG87aCNa0X1I40kMF3ZzgCSOVQGKniWBBDAqwO/zqMs2LHm9DhmSaMSL0PbwOVkUxX4FULy6F&#xA;vHUbu32R/HDEWkB51+avnt/JvkzUPMRRLm7h9OO0t5SQsk0rhFX4d9gS1B4ZYdgl4NF/zlx5u03V&#xA;TaeYPLVsoicLcwQvLDMg6mhkMoJoa0p9OVxy2LHJlOJiaIovpXQNcs9Z0ex1rTXY2l/BHc2zkcW4&#xA;SKGHIdjvuMt5sWTWN566lW2kXr7jxyuQpBCKyKHYqkV5IZLmRj2NB8htloGzIPk3/nJf8xNK8wea&#xA;bXyTbw26waXcLHf61KgaWKWQqJI4mP2EQU9T+Yin7O9eSW2yYgGQB2W+Vfyq07y0kOu3LX0VzcBR&#xA;bQywrOVjnWiEpb+sHVmKnkRSnUDqNPn1Epemh933vR6PQ44DjBN8u+vlb378rbrTY/K9vocFxA+o&#xA;aOqxajaQ8VMLy1lUGNfsqVb4c2ukycWMF02txeHlMfd9zOtNkKXSjs9VP68vkNnEKc5UxS3V5DyS&#xA;PsByP07ZZAJDFfOegf4h8paxofqNCdRtJrdZV6q0iEKe1RXqO4wy5MwLNPl3y1+S1po+ow61qV1c&#xA;QmxnUiwkhWShVx8TSQO3JCD14rx/a2BGaTLrTIGIH4+L0Gm7KjAjISdjy/aOn4L6R/K+zuLPyRp1&#xA;tcqiXCmZ5UjFFDyzPKw+0+9X3PI75s9JPixh1OuxmGUg82WIxRgy9VNR9GZLiMgRgyhh0YA/flLB&#xA;D6lIUtWp1chfvyURukJLlrJ5Z+b+jrqWp2STxPNZyWz21zFGkZZ45nqV5ONhyjUk12ptvmo7QyET&#xA;Hut3vZeASxknezR92zz/AMg/kLbWHn7TNT05rsWGmzLeG9lkjZS0bV+r8FRD8Qp8XL6PGzSaieQ7&#xA;hx9foMeEbHf3j7v0vpPNm6pO9PkL2q16r8P3ZVIbsSrswVSx6AE/dkUMfdi7lm6san6cuZsP/M7T&#xA;pL7QIRGhd7a6iuUHIoOcVSoZhWit9kmh69Mwe0CRAd17uz7KiDkPfW3zD5//ADM8teQ7CM6zqHpw&#xA;zemtq9uOcjOQGkVYwv2ZX6epJtQdK7jXaXLkPpDs+0NPgj65e78efmVn/OKX5jaRo2q3XlLUF9GT&#xA;W5kksbwn4TOq8RAw7c/2T47dxm8gXlw+wdIkPN4+xHIfRthmFKZ5WhJtRkL3TDstFGWx5MgwX81f&#xA;Ken+ZvKhs712jS2uYLuNkoTzielN6jdWI3yvUX4ciOgcjSxjLLES5EvCtS/KjRvMEJ1K9t5YtcBC&#xA;NHE6WtvNKqKnEco3YQ8waNxDEdKjjmo0+bIZjHDe3e6rR4vDOXJYMefQfcdvteTW3mzXfIHnO8by&#xA;pqMtvFZ3LI0JcvBLwPF45UNFkWoIqRXuDXfNpjMgPVzedzCImeA3F9yflp5ztvNnljSPMlsnpLqE&#xA;dZYa19OVWMcqV7hZFIB79cvO4YM9ypi7FUguFKTyKezH9eXBk+MIfyV13X/OOvX2vTNYWf6TvAzA&#xA;VnnYXD8mjr8KoT0c1r2BG+XYdIZ7nYOt1WvGM8I3k9U0vyRpWl6PBpunXl7ZrbghZ0l5SEMSTyDB&#xA;o267VTbtmFreyMkslw4TE97s+zfaLFjw8OXiEhe8Ul8n/l7r/ln819N8w6Pqkt7YX8zwazHduPWM&#xA;Uyndm2WRQ3EjuCB1zNlojjiDHk67D2mMszxcyeff+19M2ClruOnY1P0DKJcnYFO8qYpVqyn10bsV&#xA;p9xP9csgyDybz7+ccGhX8ml6RbpeX0JpczSk+jG/8lFoXYd9xT76ZeLT8QstU8tbBh8/nTT/ADDE&#xA;t7fay2h6wNpwkDvbuBsoVQl1UUpWvFvemazWdlTlk4ogSB73caHtaEMQjIyiR3b/AGFOfK355WqS&#xA;29hqunJa2vLh9btWYogJ+0Y35MR3Y8q+xzZ/khCNR5B1EtXKcuKfMvYI5I5Y1kjYPG4DI6moYHcE&#xA;EdQcx21kcSlY0U9QAD9AygsELqqk2oI/ZYE/iP45KHNIYh5n8zWegWH1mcepLIStvADQuw3O+9AO&#xA;5zJxYzM0ic+EPNtR8zjzNbyLrU5sbaGWM26WbSRSEtyDcpEYScQPtUIH00zE7T0uQ8McUeI7kk+X&#xA;63M7O1UYEymSBsKBq/l3K8/my48smDT9FkiltkUvLE49RSzdy4Iap6n4sj2JgnLHI5BW+ye1tRE5&#xA;Bw9zO/KPm618w2jsqeheQUFxBWvXoynup/DM7LiMD5ODCfEzfTFItQT+0SR+rMWXNkUTIpaN1HUg&#xA;gfSMiEMddlRSzHiqirE9gMtlIRFnk2AEmgkV/cHV4LrTVh9SzuYZYpwQatG6FWrSnEEHNNHtE5so&#xA;hHaB5ny73ZHSjFDjlvIdP0MF1b8rvJN/okejahYRTQxyesi27NCkT0I+AwlAzHkeRNQf14Wp1McU&#xA;6xSMj1l+hzYg54DxICEf5o+95Dc/84569pnnvQ5vLVwbvSmvYZHmlYJPaCJxIzORxDgKnwstDXan&#xA;QnYaHXjKeE7S+91eq0Rx7jeL7E0lSZ2bsq0+knNrNwimuVsUkv1K3cle5qPpGWx5Mg8n85/nHY6f&#xA;rB0eytY7uOCUJfXU1WjUqfiVEUgsVPU167UOZPgT4CR9VbMI5YcYEvpvdh9zqHlSNJ7sX8jTSsZE&#xA;dZpJZY2LcwIUkLiPfagAHjnPYdLqhkBjHhIPdQepzanRnERKfECO8k/s+x4hr3kO2u7me502eRJZ&#xA;pWfjdOHryNTydVBrvWu+dDLRnh5+p5I5hxbCo9H2P+T/AJOj8qeSND0KO4S7eFPWmuojWOSSdzM7&#xA;Idqp8dFPhmNVBv6PS8qYuxVIPN63cGmTXllGXmC0bjuVHTnT/JGZGnAMgC0arJKOMmPN5ISSSSak&#xA;7knN08u1ihfGtVeg+JaMCPnSn45TkkROPcbH2X+g/NvxxEoS7xR+2v0j5PYPLFverpcE1+hS8dKO&#xA;rdQB0J9z1OanORxHh5PSYJSMBxfUnGUtqWeZbbUZ9EvF0sKdUEMhseZovq8TxqT75PGQDvyU+T4x&#xA;v7e9tr6eC+R472KRluUlBDiQH4uVe9c3QII2cIqGFDsVe9/849N5purSdLtC/ly3/wB455SQwmB3&#xA;ji/mTqW8D075gavhHL6nJwk15PbcwG1bJGskbI3RhQ4hXgf5oRao/myS2ukaK3ghJsiR8LxqhdnW&#xA;lftMCP15tMM4xx35j7TTTMGUq8vuFsJzMaHYqy38sLfV5vNdv9QjLxCq3zbhFhbqWPzFVHc5j6kg&#xA;Q3bMV2+hkRURUX7KigzTuS3irFPN8E8MatGp+rytWRh2PYH55q+18k/DAH09f0Oz7NETIk8+jFan&#xA;Ocd27FV8AlMyeiCZajgF3Ne1MnjMhIcP1dGE6o3yek6dbvDbL6gpM4DSAdjTp9GdmJEgXzeWnVmu&#xA;SJwsWP8AnlNVTy1qF1o8LT6pDA/1aJN2LEdVHcr9oDv0y3ERxAHkgk1s+QZ0pYwuyfvJJZfUlPUl&#xA;Qvw/RWp+eblwuqFxV2KvqX8kNM1+08mW/wCmojCQ7/o+OSokFs1CpdTuPiLcf8nNVqpAy2cvHdbv&#xA;Q8xmbsVdirGdY8gaNfu00FbKdtyYwDGT4mPb8CMy8WsnHY7hwM3Z+Oe49JSgflWK76nt/wAYP+vm&#xA;Xfyh/R+39jjfyT/S+z9qfaH5K0fSpBOA1zdClJZaUU/5KjYfTXMbNqJZObm6fRwxbjcp/mO5bsVd&#xA;irEfOn5XeU/Np9e/gaDUKADULYhJqDYB6hlcf6wr4EZdjzyhy5MJQBebXH/OMcwlT6t5gUxFvj9S&#xA;1IZV9qSkMfuzJGt8mvwfNO/L3/OOPluxuRPrF/LqwQ1W3VPq0R/1wrSOfocZCeskeQpkMQer2lpa&#xA;WdtHa2kKW9tCOMUEShEVR2VVoBmITfNtVcCuxVL9b0HStasza6jAJo9+DVKuhIoSjDcbff3yUZmJ&#xA;2QQ87vvyItGdmsNWeJP2Y54hIfpdWj/4jmbHXHqGo4V2nfkTYJIrajqkk6d4oIxF/wAMzSfqxlrj&#xA;0CjC9C0TQNI0SzFpplstvDWrUqWc+Lsasx+ZzDnkMjZbQAEwyCXYq1JGkiFJFDowoysKgj3GAgEU&#xA;UgkGwx+88l2ErFreVrev7NOa/RUg/jmry9k45fSeH7XY4+0pj6haFj8jHl+8vPh8FTc/e2Ux7G75&#xA;fY2ntTuj9qd6ZoWn6d8UKFpT1mehb5DpT6M2On0ePF9I373Bz6qeTny7kwzKcZ2KuxVhfm78pPJ/&#xA;mZnmuIXsruV/UlubMrGzvQjk6sroSeW548j45fj1M47dGEsYLCG/5xl031Krr0wir9k26lqf63MD&#xA;8Mv/ADp7mHgss8qfkl5J8v3Md76UmpXsRDRTXjBlRx+0kahU+XKtO2U5NTKW3JlHGAz/ADHbHYq7&#xA;FXYq4kAVJoPE4qp/WLetPVSvhyGGiqoCCKjpgV2KuxV2KuxVYZ4FNGkUHwLDDSrldGFVYMPEGuBW&#xA;8VdirsVdiq15Yk+26r8yBjSuSWJ/sOrfIg40q7FXYq7FXYq0zogq7BR4k0xVYLm3JoJVr8xhorSp&#xA;gV2KuxV2KuJAFSaDxOKqX1u2rT1V+8YaK0qKysKqQR4jfAreKuxV2KqF3dLbpXq7fZXCBaQGGedf&#xA;POh+VdFm1rzDeCC0i2RNjJI5+zHDHUcnPgPmaAE5ZsEvEYv+cx/LRvuEvl28Sx5UM6zRNLx8fSIV&#xA;a+3qfTg41t7x5U816fruiWeu6LP6+nXyepCxBFaEqysp6MrAq3uMNAqyu2uEnjDrsejL4HKyKYqu&#xA;BVskixoXc0VdycVSS/1P93JLK4hto1LuSaKFUVJY+wy0RplTyDzF/wA5OflbpDWYt7qfV1u6l3sY&#xA;6iFFcoWk9UxEGqmigVI36EVeILbN/Iv5jeWPOdrdXvlu7eeGym+rzO0bxHlQMCA4U8WB2w2CrObG&#xA;+9b93JtIOh8crlGkEIzIodiqV3uoszGOE0UbFx1PyyyMWQDxb83P+ch9F8g6quiwae+r6z6ay3EQ&#xA;lEMUKyCqc34ysXI+LiF6d8JlS2q/k/8An9pP5g30+lS2R0rWYI/Wih9X1o5o1oHaNykRDKTupHTc&#xA;E70RK1t7LZaiwYRzGqnYOeo+eCUUEJnlaHYqhL6+9H4E3kPU+AyUY2kB5j+Z/wCaieRksp7vR77V&#xA;Y78ukUtoFZVlQcvTk5Gq8lqVoD0PhkpSEWQBOwDBfKv/ADlb5S1nzBbaRqGmXOkC6kECXczo8aSN&#xA;QKJaBSgLbV7d9q0RMFFvd7a8mgOxqndD0wkWtJ1FKksYdDUHKyGK7AqjdXKW8fI7sdlXxOEC1Y9r&#xA;GrJa2N1qN45+r2cUlxLSmyRKXalSB0GW1TJ4zb/85R+WodQFrr+gatocDtxW6uIQyrvTlIoKuB/q&#xA;hsrjmjLkWc8co/UCHrXljzXo2v6bHq+gXyXthKWVJ46gFkNGVlYAgjwIyzYsGV2d2twm+0i/aX+I&#xA;yuQpBCIyKHYqkd9KZLlz2U8R8hlsRsyD5V/P6Sy87/mfaeXbPVBPbaVpvL6vaskhF9JclJowGZUa&#xA;RYuDsvIbKRUdsfU5eAW5OlwDLPhvp+P1oPSPyisdLhvdBFwly+qryub11XmltD6XwLEVcKzySMwP&#xA;L9kGuamesMql3fe73F2ZGAMLvi6+Qr9P3J7/AM42+eJ9J8y3P5aXD/WLAI91pdwVVZUm4LLPDIEa&#xA;Rehbv8LKR323OGfEHncsOCRi+ndMlKXIX9lxQ/PqMtkNmspxlTFLtWlPwRDofiP6hk4BIYD+bC64&#xA;/wCW3mOLQ7Q32pz2MsEVsvLmyTD05SgX4i6xMzIB1YAZM8kl8heWfye1e4ufrGpLFNp8XKO4it5x&#xA;6iz0K+mxCtxaJviYfR3zCOaJFRl6vcXOx6GYNzj6eWxHP8fq6vp38htF0TRvLmoWWkWzxQ/XDI08&#xA;jczKTGqCreKiP4gNq/PMnCCI7kE+TRqBESqIIHnzenRuyOrr1U1GWNLIFYMoYdCKj6cpYKGoSmO1&#xA;YjYt8I+nJRG6QkmWsnxj5M/L2w846mvmXWbm4vE1Jri+uk40jaU3DKYnmV+Sv0YjjuDt0zUarVyj&#xA;YHN3HZ/ZsMlSlZH2c+Vp1DZaN5N81eXtZ0020T6Tqmn6bfTWzDlItzHKt56gVmIejfZI2GHSZpGW&#xA;972UdoaaEIXGvSQNvcbfWmbZ1Cd2EpktlJ6r8J+jKpDdiUQSACT0G+RQx+WRpJGdurGuXBmwX81p&#xA;p49L04xIXCX0MkqhnQ8K+mzckP2UEvNq7cQa7Zr+0ZekDvt2vZMPWZd1faXzj5p/JqHUNVGs21+5&#xA;tNUkDMlrC9zxeUljKXZ/7riOTMT12HUZi4tbQ4SNw5Wp7KEpcYO0u4X8fc+pfy+0vVdK8kaHp2rT&#xA;PPqdtZwpeSSMXb1OILKWbc8fs/Rm6HJ0FMw0mU83iPQjkPmNsjMMSmeVoSfUpS9yV7JsP1nLYjZk&#xA;GD/mvrdpov5ea3f3kElxbLB6UiQhCw9ZhErUdlFAziv6sjlBMSA24pASBPIPlnzL5x03zPp9v5Ut&#xA;vrn6UvbyzFxxEJgpHCsbLABNw3ccgCRv9ojNViwnGeM1QB/HJ22o1Uc0RiF8RI7q5dN305+S/lVf&#xA;K/5c6VpfxGWkk85cBW5zSM9CFLD4VIXY70zZ4J8UAXVZ8PhzMe5n1jKY7lD2Y8T8jlkhs0lPMqYu&#xA;xV5B+fes+YtJ8h6hH5dink1rUZksLT6srPMvrEmR04bgiJGo37PXJZMgjGyaDOMTLYCy+Y9C/wCc&#xA;bvP98i3F9La6UDRgk0hkmHevGIMo+l65qsnauIbC5Obj7OyHc0HqF75Z86XkL6eDbrey2v1F9aa1&#xA;cXXxLRyZAREE5HnVW9gvLMQTxj1Xtzq/0c76cvsdzPLOUa/iqr4Tfz5V15/C3m9j5S/MX8m/MMfm&#xA;yLTrXWbW2R43uE9SSJEkHFmYL6ckbcajkQVHvmy03aGPIaGx7i6HNo8mPc7h9XflL5/03z95ftNe&#xA;sImtyXaG8tHIYwzxgF05ADkKMGU03BGw6ZsCbDjPRcrYpVqyn10bsVp9xP8AXLIMgl8kscSGSV1j&#xA;jXdnYgAfMnJpeSeere2tpJo9K04T6ZOKyiGRoBIX3Z4Jl+EsDQfaWh/a2zT59EeO4cnotLrh4fDP&#xA;c/L7uvy970XylYxWmh2/pPzW4Anr4c1G2/gBvmfpcHhQr4up1+p8bJdVWycZkuGyCFSsManqFAP0&#xA;DKSwQ2qqTbAjswJ+4jDDmkMb1nV7PSdPlvbqRURAeAY7u9PhRe5Jy+MDI0FMgOb5V/KnyBJoN/cX&#xA;Gqa0LVprdo4Y4BIY1lLoQ/KjDkFSnxREb77ZRrOzZyh6aMrcrs7XQxZDxWIkdO9GfmL5N1PW3to1&#xA;8zi5jtT60KJbhUEvQM5URhm4/tCtPAY6HswxiTIcMvnsntLtDxJACXFEfDd9N6DrtjrWnpe2jfCf&#xA;hkjP2kcDdWy+cDE0XEjIEMn0pSLWv8zEj8B/DKJ81KLcEowHUgjIoYbruv6ToVg19qlwtvApoK7s&#xA;zdlRRux+WZMYmRoJlIDm8t8xfnDpesr+jNL05zPK3C0vbtxGkcrfCsjxpyLICasvJSR3BwarQCeM&#xA;8XTfZu0WvljyDh67bpRea1d+X7e11G+Ntq97HcKViCvDAjBGIZY1kdtv+LGYV3psKa7s7QHxCZCh&#xA;XkS7XtXX/ugIys3vQIHI/jqyny/+e+h3ciw6xaPpzNt66H1oq/5VArr9xzcy0xHLd5+OcdXrGgXN&#xA;vecbq1lSe2kj5RzRkMjAkUII2zEmKbSU7ypCSXykXcle5r94y2PJkGGefNV8tSaRd6Fq0P1+O/iM&#xA;NxZKafA46s4+we4I374lthiMng/lD8pfK3lrzCuvNetqEtpObjTLJlPGPi/KIStRfUZRSp+H/VzX&#xA;k5pSAEajfWnY49NhgCTIylW3Snt2k/mVaSusWoW/1YGg9aM8kHzWnID5VzYAuFLAejN7GSO4eCSF&#xA;xJHIVZHU1BFeoIwnk452ZDlLB2KsS85abP6i3yEtBQLIvZG7H5HNJ2thmanzj9zt+zcsd49WL5o3&#xA;buxVa6I6MjqGRgVZWFQQdiCDihP/AMqfIml+U9Kv1063NrbaleSX62/7KNLHGjemtPhQ+kOI/hnW&#xA;aHJOWIcfP9DzmsjCOQiLOMy3FQeqxM1nJJGhkliVnSNftMQK8RXuclE0kPANd1rUtUvHe9YqUYhL&#xA;fcLHvTiFPfx75N2MIADZLxI4QoGIQ9VrsfowM068r+ZLjR75OTs1i5pcQ1qKH9tR/MMIa8mPiHm9&#xA;m0yFbpklUhoKBw46MDuKfPGRpwDsneVMVssayxtG3RhTCCr57/M6+1OXzNNZ3cbQw2fwWsTbBlP+&#xA;7R48/Hw2zb6aI4bHVx8siSxHMhqdirO/Ic+pRa5pEenwGSPUITHfxpRVpFK6+sew4Jx3779zmLnA&#xA;4TfRtxkgvd4o1jjVF6KKZqSXIXYq+cv+chdB8wW/mCLVJpHn0O4UJZ0HwW8lPjjIHdyOQJ69P2c2&#xA;WkmDGurj5gbeZaEnPV7UeD8v+BBP8MvzH0FOmF5AyPzatdLU/wAsqn8GGYel+r4Ow130fFh6I7uq&#xA;IpZ2IVVUVJJ2AAGbF1L6r/JvyXf+V/Kgj1FnF/fP9YltixKwAiixgdA3dqd9u2anU5ROW3JyscaD&#xA;PMx2aR+bXubXSLnULWIz3EEZIjUVJ/yqeC1qfbJxLPGLNPAp55p5nmmcySyEs7tuST1OF2IFKeKX&#xA;Yq9c/KTTdVi06W6uqrYyEGxjYHkSftuPBT+P6xIuFqCL25vQcg47sVaZVZSrAMrChU7gjARaQaY7&#xA;qHky1lYyWkhgJ39Mjkn0dx+OarP2TCRuB4fudjh7SlHaQtLh5J1LlvNDx8avX7uOYg7HyXzH2uV/&#xA;KcO4ptpvlCytnEty31mQbhSKID8t6/Tmdp+y4QNy9R+xw8/aE5io+kJ9mzde7FXYqxXzT+Xeja7I&#xA;bpWNlft9q4jAZX/4yIaV+YIOEFux5jH3MKm/JvzAJCIby0eOvws5kRiPcBH/AF5LibxqYplo/wCT&#xA;fGVZNYvVdFO9vbA/F85HAI/4H6cHEwlqe4PR7OztrK1itbWMRW8KhY4x0AHzyLjE2rYodiqTeZvK&#xA;GieY7UQajEeaf3NzGQs0e+/FiDsfAgjLcWaUDsxlEF5lf/kVq6zH6hqVvLD1BnDxMD4UQSj6fwzN&#xA;jro9Q1HCV+nfkVqLSA6lqcMUY6rbK0jH2q4jp86HGWuHQKML07y95Z0jQLJLXT4iOK8WnejSuORb&#xA;4moP2mJoNswcmUzNlujEBNcrS7FVC/sLLULOWyvoEubSdeE0EgDKw9wcIJBsKQ8qvv8AnHrSYtWG&#xA;oaJqD2kY5EWM6+qgLAj4JOQYKK/tBj75kS1RlGijFEQlxITUfyK1nULb6tJqVtChZSZFV3IAO/wk&#xA;JXb3yOLLwm3Iz5BONMt8j/k95V8qSreIrahqi/ZvbgD92f8AiqMfCnz3Pvhy6iU9uQcWOMBnWY7N&#xA;2KuxVhfmL8rdF1SdrmzkOnXD7uI1DRMe59Oq0PyP0ZISb4ZyOe7Gv+VM6rzp+kIOH83F6/d/bh4m&#xA;38yO5kGhflNotjKs+oStqMqbrGyhIa+6VYt9Jp7YDJrnqCeWzOFVVUKoAUCgA2AAyLjt4q7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq//2Q=="/>
    </rdf:Alt>
   </xmp:Thumbnails>
   <xmpMM:DerivedFrom
    stRef:instanceID="xmp.iid:a9b8a3a7-b070-8e4d-9482-aee20400dbf4"
    stRef:documentID="xmp.did:a9b8a3a7-b070-8e4d-9482-aee20400dbf4"
    stRef:originalDocumentID="uuid:9E3E5C9A8C81DB118734DB58FDDE4BA7"
    stRef:renditionClass="proof:pdf"/>
   <xmpMM:History>
    <rdf:Seq>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:70f8aa99-76da-7d40-aa1a-1c7a0e09fb88"
      stEvt:when="2021-11-02T18:45:28+03:00"
      stEvt:softwareAgent="Adobe Illustrator 24.2 (Windows)"
      stEvt:changed="/"/>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:a9b8a3a7-b070-8e4d-9482-aee20400dbf4"
      stEvt:when="2022-04-15T14:04:13+03:00"
      stEvt:softwareAgent="Adobe Illustrator 24.2 (Windows)"
      stEvt:changed="/"/>
     <rdf:li
      stEvt:action="converted"
      stEvt:parameters="from application/postscript to application/vnd.adobe.illustrator"/>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:679c44fe-16d6-6041-852a-62a1dc575f61"
      stEvt:when="2022-04-15T14:04:15+03:00"
      stEvt:softwareAgent="Adobe Illustrator 24.2 (Windows)"
      stEvt:changed="/"/>
    </rdf:Seq>
   </xmpMM:History>
   <xmpTPg:MaxPageSize
    stDim:w="633.049000"
    stDim:h="400.000000"
    stDim:unit="Pixels"/>
   <xmpTPg:PlateNames>
    <rdf:Seq>
     <rdf:li>Cyan</rdf:li>
     <rdf:li>Magenta</rdf:li>
     <rdf:li>Yellow</rdf:li>
     <rdf:li>Black</rdf:li>
    </rdf:Seq>
   </xmpTPg:PlateNames>
   <xmpTPg:SwatchGroups>
    <rdf:Seq>
     <rdf:li
      xmpG:groupName="Default Swatch Group"
      xmpG:groupType="0"/>
    </rdf:Seq>
   </xmpTPg:SwatchGroups>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                 
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1  -1  scale 0 -400 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 400 li
633.049 400 li
633.049 0 li
cp
clp
633.049 400 mo
-7.36265e-06 400 li
-7.36265e-06 0 li
633.049 0 li
633.049 400 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
1 1 1 rgb
f
114.76 78.9453 mo
114.76 83.8149 114.02 88.5151 112.63 92.9253 cv
110.51 99.665 106.91 105.745 102.2 110.775 cv
102.1 110.895 102 111.005 101.89 111.115 cv
101.75 111.265 101.6 111.415 101.459 111.555 cv
92.9995 120.195 81.1997 125.565 68.1396 125.565 cv
66.1196 125.565 64.1099 125.435 62.1597 125.195 cv
62.1396 125.185 62.1299 125.185 62.1099 125.185 cv
57.3096 124.555 52.7295 123.205 48.4995 121.235 cv
48.1499 121.075 47.7998 120.905 47.4497 120.735 cv
40.5596 117.325 34.6396 112.245 30.2095 106.035 cv
29.8296 105.495 29.4497 104.955 29.0898 104.395 cv
28.1899 103.035 27.3696 101.625 26.6299 100.175 cv
23.3599 93.8052 21.5195 86.5952 21.5195 78.9453 cv
21.5195 53.1953 42.3896 32.3252 68.1396 32.3252 cv
93.8896 32.3252 114.76 53.1953 114.76 78.9453 cv
cp
.909804 .882353 .937255 rgb
f
102.2 110.775 mo
102.1 110.895 102 111.005 101.89 111.115 cv
101.75 111.265 101.6 111.415 101.459 111.555 cv
92.9995 120.195 81.1997 125.565 68.1396 125.565 cv
66.1196 125.565 64.1099 125.435 62.1597 125.195 cv
62.1396 125.185 62.1299 125.185 62.1099 125.185 cv
57.3096 124.555 52.7295 123.205 48.4995 121.235 cv
48.8999 104.345 48.7295 89.5649 48.7295 89.2852 cv
48.8896 88.9351 56.7095 86.9253 67.1196 86.585 cv
83.4995 86.0649 97.3398 95.3052 102.2 110.775 cv
cp
.407843 .713726 .847059 rgb
f
62.1597 125.195 mo
62.1396 125.185 62.1299 125.185 62.1099 125.185 cv
57.3096 124.555 52.7295 123.205 48.4995 121.235 cv
48.1499 121.075 47.7998 120.905 47.4497 120.735 cv
40.5596 117.325 34.6396 112.245 30.2095 106.035 cv
39.1899 93.7251 46.5298 90.1353 48.7295 89.2852 cv
49.1797 89.105 49.4097 89.0454 49.4097 89.0454 cv
62.1597 125.195 li
cp
f
69.2075 59.4507 mo
69.2075 59.4507 79.7837 60.2217 80.6372 50.0815 cv
81.5464 39.2856 71.5688 37.999 67.2119 42.2642 cv
62.8545 46.5288 63.5298 50.9946 63.5298 50.9946 cv
63.5298 50.9946 60.6357 48.2515 57.3237 51.4487 cv
54.8931 53.7949 56.0176 57.7588 56.0176 57.7588 cv
56.0176 57.7588 50.5615 57.4116 50.9512 62.1934 cv
51.3413 66.9756 54.6914 69.4819 54.6914 69.4819 cv
69.2075 59.4507 li
cp
0 0 0 rgb
f
59.0581 77.9063 mo
59.8769 89.1855 li
59.8769 89.1855 62.1465 92.2803 68.7842 92.3374 cv
73.7285 92.3799 75.3745 91.1431 75.3745 91.1431 cv
74.2744 85.4805 li
73.1943 79.959 li
61.0889 78.2031 li
59.0581 77.9063 li
cp
.956863 .517647 .384314 rgb
f
61.0889 78.2031 mo
61.1401 78.5088 61.2832 78.8643 61.4961 79.2676 cv
64.4292 84.7188 71.417 85.4326 74.2744 85.4805 cv
73.1943 79.959 li
61.0889 78.2031 li
cp
0 0 0 rgb
f
73.8423 54.0669 mo
73.8423 54.0669 80.7886 67.7788 79.0259 75.8052 cv
77.2627 83.832 69.9941 82.999 65.6001 81.7173 cv
61.2065 80.436 59.0566 77.9087 59.0566 77.9087 cv
59.0566 77.9087 55.1118 79.5024 52.2075 75.915 cv
49.3032 72.3276 50.7148 67.937 52.9556 66.8218 cv
55.1963 65.7061 58.0229 67.209 58.0229 67.209 cv
55.6489 63.2441 li
55.6489 63.2441 63.4712 41.9614 73.8423 54.0669 cv
cp
.956863 .517647 .384314 rgb
f
58.0146 73.3794 mo
57.9253 73.3794 57.835 73.3555 57.7534 73.3052 cv
53.3569 70.6035 li
53.1216 70.459 53.0478 70.1514 53.1929 69.916 cv
53.3364 69.6802 53.6455 69.6064 53.8804 69.752 cv
58.2768 72.4536 li
58.5122 72.5981 58.5859 72.9058 58.4409 73.1411 cv
58.3467 73.2949 58.1826 73.3794 58.0146 73.3794 cv
cp
0 0 0 rgb
f
54.3633 73.6772 mo
54.1782 73.6772 54.001 73.5747 53.9141 73.3975 cv
53.7925 73.1494 53.8945 72.8501 54.1426 72.7285 cv
56.4429 71.5996 li
56.6919 71.4785 56.9902 71.5801 57.1118 71.8281 cv
57.2334 72.0762 57.1313 72.3755 56.8833 72.4971 cv
54.583 73.626 li
54.5122 73.6606 54.437 73.6772 54.3633 73.6772 cv
cp
f
75.6953 59.4282 mo
75.5952 59.4282 75.4941 59.3984 75.4062 59.3359 cv
74.1753 58.46 73.0044 59.2324 72.956 59.2651 cv
72.727 59.4189 72.417 59.3604 72.2622 59.1338 cv
72.1074 58.9067 72.1631 58.5981 72.3892 58.4414 cv
72.4604 58.3916 74.1743 57.2329 75.9853 58.5205 cv
76.2104 58.6807 76.2632 58.9927 76.1035 59.2178 cv
76.0059 59.355 75.8516 59.4282 75.6953 59.4282 cv
cp
f
73.8647 72.2002 mo
73.8291 72.2002 73.793 72.1963 73.7568 72.1885 cv
73.4868 72.1289 73.3164 71.8623 73.376 71.5928 cv
74.2915 67.4395 71.9282 64.627 71.9043 64.5991 cv
71.7246 64.3901 71.7476 64.0742 71.9565 63.8945 cv
72.1655 63.7148 72.479 63.7363 72.6606 63.9448 cv
72.772 64.0737 75.3799 67.1484 74.3525 71.8076 cv
74.3013 72.041 74.0942 72.2002 73.8647 72.2002 cv
cp
f
75.5366 66.0698 mo
75.2642 66.0698 75.0415 65.8516 75.0366 65.5786 cv
74.9893 62.8906 li
74.9844 62.6147 75.2041 62.3867 75.4805 62.3818 cv
75.7388 62.3862 75.9844 62.5972 75.9893 62.873 cv
76.0366 65.561 li
76.0415 65.8369 75.8213 66.0649 75.5454 66.0698 cv
75.5425 66.0698 75.5395 66.0698 75.5366 66.0698 cv
cp
f
68.1333 66.5903 mo
67.8608 66.5903 67.6382 66.3721 67.6333 66.0991 cv
67.5859 63.4111 li
67.581 63.1353 67.8008 62.9072 68.0771 62.9023 cv
68.3491 62.8911 68.581 63.1177 68.5859 63.3936 cv
68.6333 66.0815 li
68.6382 66.3574 68.418 66.5854 68.1421 66.5903 cv
68.1392 66.5903 68.1362 66.5903 68.1333 66.5903 cv
cp
f
75.2612 57.1675 mo
75.2612 57.1675 73.8716 54.9888 71.0566 55.1738 cv
68.2417 55.3589 66.7427 57.46 66.7427 57.46 cv
66.7427 57.46 68.3208 62.1084 64.6777 64.9033 cv
61.0342 67.6978 58.0229 67.209 58.0229 67.209 cv
55.1758 66.4214 li
52.8457 62.5142 li
60.2456 53.2788 li
70.2383 47.0396 li
75.8828 51.4624 li
75.2612 57.1675 li
cp
f
71.5679 75.0264 mo
70.6255 75.0264 68.8413 74.7598 67.8042 72.9106 cv
67.6689 72.6699 67.7549 72.3647 67.9956 72.23 cv
68.2368 72.0952 68.5405 72.1802 68.6763 72.4214 cv
69.7534 74.3418 71.9331 74.0122 72.0239 73.9971 cv
72.2939 73.9526 72.5527 74.1367 72.5981 74.4087 cv
72.6435 74.6802 72.4609 74.937 72.1894 74.9834 cv
72.1567 74.9888 71.9214 75.0264 71.5679 75.0264 cv
cp
f
78.5142 61.2998 mo
76.459 61.2998 74.7593 63.0093 74.7056 65.1543 cv
74.6787 66.2119 75.0518 67.2153 75.7549 67.9795 cv
76.4536 68.7393 77.3965 69.1719 78.4087 69.1968 cv
79.4409 69.2305 80.3848 68.8379 81.1206 68.1138 cv
81.8613 67.3857 82.2837 66.4023 82.3101 65.3442 cv
82.3647 63.1675 80.7031 61.3535 78.6064 61.3013 cv
78.5757 61.3003 78.5449 61.2998 78.5142 61.2998 cv
cp
78.5039 70.1982 mo
78.4639 70.1982 78.4238 70.1978 78.3838 70.1968 cv
77.0981 70.1646 75.9028 69.6177 75.019 68.6567 cv
74.1392 67.7002 73.6728 66.4478 73.7056 65.1289 cv
73.7744 62.4019 76.0039 60.2461 78.6313 60.3013 cv
81.2798 60.3677 83.3784 62.6411 83.3101 65.3696 cv
83.2768 66.688 82.7485 67.916 81.8218 68.8271 cv
80.9199 69.7139 79.7456 70.1982 78.5039 70.1982 cv
cp
1 1 1 rgb
f
67.0908 62.1152 mo
64.959 62.1152 63.1982 63.8223 63.1445 65.9658 cv
63.0898 68.1426 64.8164 69.958 66.9936 70.0122 cv
69.1728 70.0771 70.9853 68.3398 71.04 66.1631 cv
71.0947 63.9863 69.3682 62.1709 67.1909 62.1167 cv
67.1577 62.1157 67.124 62.1152 67.0908 62.1152 cv
cp
67.0942 71.0137 mo
67.0522 71.0137 67.0107 71.0132 66.9683 71.0122 cv
64.2402 70.9438 62.0762 68.6685 62.1445 65.9404 cv
62.2134 63.2124 64.4712 61.0518 67.2163 61.1167 cv
69.9443 61.1851 72.1084 63.4604 72.04 66.1885 cv
71.9726 68.8745 69.7656 71.0137 67.0942 71.0137 cv
cp
f
71.0747 66.1484 mo
70.8115 66.1484 70.5908 65.9429 70.5762 65.6768 cv
70.5605 65.4009 70.771 65.165 71.0469 65.1494 cv
74.5312 64.9521 li
74.8057 64.9321 75.043 65.147 75.0586 65.4229 cv
75.0742 65.6987 74.8638 65.9346 74.5879 65.9502 cv
71.1035 66.1475 li
71.0937 66.1479 71.0845 66.1484 71.0747 66.1484 cv
cp
f
62.6274 67.1079 mo
62.5469 67.1079 62.4648 67.0884 62.3892 67.0474 cv
62.3428 67.0215 57.7236 64.5566 55.5312 66.7729 cv
55.3374 66.9697 55.021 66.9707 54.8242 66.7769 cv
54.6279 66.5825 54.626 66.2661 54.8203 66.0698 cv
57.541 63.3203 62.6518 66.0522 62.8667 66.1689 cv
63.1094 66.3008 63.1987 66.604 63.0674 66.8467 cv
62.9766 67.0132 62.8047 67.1079 62.6274 67.1079 cv
cp
f
69.2158 93.0718 mo
66.3267 93.0718 62.7246 92.2734 58.7768 89.5884 cv
58.5483 89.4331 58.4893 89.1221 58.6445 88.8936 cv
58.8003 88.6655 59.1123 88.6064 59.3393 88.7612 cv
68.4565 94.9639 75.3237 90.6982 75.6113 90.5137 cv
75.8447 90.3643 76.1528 90.4316 76.3022 90.6636 cv
76.4517 90.8955 76.3852 91.2041 76.1538 91.354 cv
76.1089 91.3828 73.417 93.0718 69.2158 93.0718 cv
cp
f
64.7934 60.7524 mo
64.6987 60.7524 64.603 60.7256 64.5181 60.6694 cv
64.2876 60.5171 64.2246 60.2065 64.3769 59.9766 cv
65.7798 57.8574 67.8765 58.0767 68.7895 58.4863 cv
69.041 58.6001 69.1533 58.896 69.04 59.1479 cv
68.9263 59.3979 68.6304 59.5103 68.3809 59.3994 cv
68.3042 59.3657 66.4873 58.6006 65.2109 60.5283 cv
65.1147 60.6738 64.9556 60.7524 64.7934 60.7524 cv
cp
0 0 0 rgb
f
487.672 320.862 mo
487.672 327.122 486.442 333.092 484.202 338.542 cv
484.002 339.042 483.782 339.532 483.552 340.022 cv
477.933 352.492 466.982 362.052 453.592 365.772 cv
452.643 366.042 451.672 366.282 450.692 366.482 cv
450.362 366.552 450.042 366.612 449.712 366.672 cv
446.902 367.212 444.002 367.482 441.052 367.482 cv
439.402 367.482 437.772 367.402 436.162 367.232 cv
435.112 367.122 434.072 366.972 433.042 366.792 cv
431.683 366.552 430.353 366.262 429.032 365.912 cv
427.252 365.442 425.502 364.862 423.813 364.182 cv
419.902 362.632 416.252 360.562 412.942 358.062 cv
407.672 354.082 403.282 349.002 400.103 343.172 cv
396.482 336.542 394.422 328.942 394.422 320.862 cv
394.422 295.112 415.302 274.242 441.052 274.242 cv
466.802 274.242 487.672 295.112 487.672 320.862 cv
cp
.909804 .882353 .937255 rgb
f
453.593 365.771 mo
449.603 366.891 445.393 367.48 441.053 367.48 cv
438.322 367.48 435.643 367.25 433.042 366.79 cv
431.683 366.551 430.353 366.261 429.032 365.91 cv
427.252 365.44 425.502 364.86 423.813 364.181 cv
427.122 330.851 li
445.172 326.591 li
452.353 328.721 li
453.593 365.771 li
cp
.639216 .482353 .564706 rgb
f
447.472 320.772 mo
442.742 319.892 429.202 298.112 429.202 298.112 cv
429.202 298.112 422.462 289.802 424.282 288.702 cv
426.103 287.612 427.832 289.282 427.832 289.282 cv
427.832 289.282 433.862 288.332 439.382 288.112 cv
440.082 288.082 440.772 288.062 441.442 288.062 cv
443.472 288.052 445.313 288.182 446.582 288.542 cv
451.592 289.962 454.952 298.172 454.952 298.172 cv
454.952 298.172 457.462 297.942 458.522 301.362 cv
459.592 304.792 452.192 321.652 447.472 320.772 cv
cp
0 0 0 rgb
f
447.415 318.056 mo
447.646 329.526 li
447.646 329.526 445.645 332.865 438.945 333.547 cv
433.955 334.054 432.176 332.959 432.176 332.959 cv
432.756 327.136 li
433.328 321.457 li
445.391 318.547 li
447.415 318.056 li
cp
.956863 .517647 .384314 rgb
f
445.391 318.547 mo
445.368 318.86 445.257 319.232 445.08 319.66 cv
442.629 325.441 435.638 326.819 432.756 327.136 cv
433.328 321.457 li
445.391 318.547 li
cp
0 0 0 rgb
f
430.242 295.363 mo
430.242 295.363 424.513 309.866 427.048 317.809 cv
429.582 325.751 436.847 324.228 441.164 322.521 cv
445.482 320.813 447.416 318.059 447.416 318.059 cv
447.416 318.059 451.551 319.298 454.147 315.401 cv
456.745 311.505 454.906 307.202 452.538 306.286 cv
450.17 305.369 447.456 307.153 447.456 307.153 cv
449.481 302.925 li
449.481 302.925 439.581 282.161 430.242 295.363 cv
cp
.956863 .517647 .384314 rgb
f
430.242 295.363 mo
430.242 295.363 434.706 293.567 436.611 295.141 cv
438.516 296.715 440.762 310.011 447.456 307.153 cv
454.15 304.295 450.688 295.776 450.688 295.776 cv
450.688 295.776 433.849 281.357 430.242 295.363 cv
cp
0 0 0 rgb
f
432.81 326.6 mo
432.81 326.6 431.332 346.21 429.032 365.91 cv
416.563 362.601 406.152 354.25 400.103 343.17 cv
403.803 339.29 409.723 332.801 414.832 330.73 cv
423.752 327.11 432.81 326.6 432.81 326.6 cv
cp
.25098 .313726 .498039 rgb
f
437.051 334.052 mo
434.611 334.052 432.823 333.671 432.647 333.632 cv
432.378 333.572 432.208 333.306 432.268 333.036 cv
432.327 332.767 432.591 332.598 432.863 332.655 cv
432.966 332.677 442.973 334.796 448.21 328.65 cv
448.392 328.44 448.706 328.416 448.915 328.594 cv
449.125 328.773 449.15 329.089 448.972 329.299 cv
445.621 333.23 440.633 334.052 437.051 334.052 cv
cp
.572549 .705882 .917647 rgb
f
483.552 340.022 mo
477.933 352.492 466.982 362.052 453.592 365.772 cv
452.643 366.042 451.672 366.282 450.692 366.482 cv
450.362 366.552 450.042 366.612 449.712 366.672 cv
448.362 351.422 447.582 324.762 447.582 324.762 cv
447.582 324.762 468.353 325.072 483.552 340.022 cv
cp
.25098 .313726 .498039 rgb
f
447.97 313.558 mo
447.845 313.558 447.72 313.511 447.622 313.417 cv
447.424 313.226 447.418 312.909 447.61 312.71 cv
451.224 308.968 li
451.415 308.77 451.731 308.765 451.931 308.956 cv
452.129 309.147 452.135 309.464 451.942 309.663 cv
448.329 313.405 li
448.231 313.507 448.101 313.558 447.97 313.558 cv
cp
0 0 0 rgb
f
452.857 312.644 mo
452.816 312.644 452.773 312.639 452.731 312.627 cv
449.611 311.813 li
449.344 311.743 449.184 311.47 449.254 311.203 cv
449.323 310.937 449.595 310.77 449.863 310.846 cv
452.983 311.66 li
453.251 311.729 453.411 312.003 453.341 312.27 cv
453.282 312.495 453.08 312.644 452.857 312.644 cv
cp
f
429.296 301.886 mo
429.189 301.886 429.083 301.852 428.993 301.782 cv
428.777 301.616 428.732 301.312 428.895 301.093 cv
428.934 301.04 429.87 299.815 432.247 300.153 cv
432.521 300.192 432.71 300.446 432.671 300.72 cv
432.631 300.993 432.369 301.174 432.104 301.144 cv
430.354 300.892 429.718 301.662 429.692 301.695 cv
429.593 301.819 429.444 301.886 429.296 301.886 cv
cp
f
440.101 302.021 mo
439.987 302.021 439.874 301.983 439.78 301.905 cv
438.53 300.861 437.106 301.228 437.046 301.244 cv
436.782 301.315 436.506 301.158 436.434 300.893 cv
436.361 300.627 436.517 300.354 436.781 300.28 cv
436.861 300.259 438.762 299.754 440.421 301.138 cv
440.633 301.314 440.661 301.63 440.484 301.842 cv
440.386 301.96 440.243 302.021 440.101 302.021 cv
cp
f
429.771 307.602 mo
429.455 307.577 429.25 307.336 429.272 307.062 cv
429.489 304.392 li
429.511 304.116 429.761 303.913 430.027 303.934 cv
430.303 303.956 430.508 304.197 430.485 304.472 cv
430.269 307.142 li
430.248 307.403 430.029 307.602 429.771 307.602 cv
cp
f
437.67 307.928 mo
437.354 307.903 437.148 307.662 437.171 307.388 cv
437.388 304.717 li
437.409 304.441 437.653 304.243 437.926 304.259 cv
438.201 304.281 438.406 304.522 438.384 304.797 cv
438.167 307.468 li
438.146 307.729 437.928 307.928 437.67 307.928 cv
cp
f
431.689 313.976 mo
431.498 313.976 431.316 313.865 431.233 313.68 cv
429.558 309.928 432.069 306.904 432.178 306.778 cv
432.355 306.568 432.671 306.542 432.881 306.72 cv
433.092 306.898 433.118 307.214 432.94 307.425 cv
432.85 307.532 430.731 310.105 432.146 313.271 cv
432.259 313.523 432.146 313.819 431.894 313.932 cv
431.827 313.962 431.758 313.976 431.689 313.976 cv
cp
f
434.814 316.376 mo
434.538 316.376 434.314 316.152 434.314 315.876 cv
434.314 315.601 434.537 315.377 434.813 315.376 cv
434.883 315.375 436.544 315.346 437.142 313.92 cv
437.248 313.666 437.539 313.545 437.796 313.652 cv
438.051 313.759 438.17 314.052 438.063 314.307 cv
437.207 316.353 434.912 316.376 434.814 316.376 cv
cp
f
114.76 200.431 mo
114.76 205.301 114.02 210.001 112.63 214.411 cv
110.8 220.23 107.86 225.561 104.05 230.141 cv
103.459 230.871 102.84 231.57 102.2 232.261 cv
102.1 232.381 102 232.491 101.89 232.601 cv
101.77 232.721 li
101.67 232.831 101.56 232.94 101.459 233.041 cv
100.12 234.4 98.6997 235.69 97.1997 236.891 cv
96.8296 237.181 96.4595 237.471 96.0796 237.751 cv
95.6997 238.041 95.3096 238.32 94.9199 238.591 cv
94.5195 238.871 94.1299 239.141 93.7295 239.4 cv
93.3296 239.661 92.9199 239.921 92.5098 240.171 cv
92.3496 240.271 92.1797 240.371 92.0195 240.471 cv
91.8096 240.601 91.5898 240.73 91.3696 240.851 cv
91.2798 240.9 91.1997 240.951 91.1099 241.001 cv
90.8296 241.161 90.5498 241.311 90.2695 241.461 cv
89.8896 241.671 89.4995 241.881 89.1099 242.07 cv
88.8296 242.211 88.5498 242.351 88.2598 242.491 cv
88.0898 242.57 87.9199 242.661 87.7397 242.73 cv
87.4697 242.86 87.1997 242.991 86.9199 243.101 cv
86.5298 243.281 86.1396 243.451 85.7397 243.61 cv
85.4595 243.721 85.1899 243.841 84.9097 243.94 cv
84.5898 244.061 84.2798 244.181 83.9595 244.291 cv
83.8398 244.341 83.7197 244.381 83.5996 244.421 cv
83.1997 244.561 82.7998 244.701 82.3896 244.831 cv
82.0395 244.951 81.6797 245.061 81.3198 245.15 cv
81.0298 245.251 80.7397 245.331 80.4497 245.411 cv
80.3696 245.431 80.2895 245.451 80.2197 245.471 cv
79.7798 245.591 79.3398 245.701 78.8999 245.801 cv
77.4795 246.141 76.0298 246.411 74.5698 246.61 cv
74.0498 246.681 73.5195 246.751 72.9897 246.801 cv
72.4595 246.86 71.9199 246.9 71.3896 246.94 cv
70.3096 247.011 69.2295 247.051 68.1396 247.051 cv
66.3599 247.051 64.5898 246.951 62.8599 246.761 cv
62.6196 246.741 62.3896 246.711 62.1597 246.681 cv
62.1396 246.671 62.1299 246.671 62.1099 246.671 cv
59.8999 246.381 57.7397 245.94 55.6396 245.351 cv
53.1699 244.671 50.7798 243.781 48.4995 242.721 cv
48.1499 242.561 47.7998 242.391 47.4497 242.221 cv
45.1997 241.11 43.0596 239.82 41.0498 238.371 cv
39.0298 236.931 37.1299 235.331 35.3696 233.581 cv
34.6396 232.86 33.9399 232.121 33.2695 231.351 cv
32.1699 230.131 31.1597 228.851 30.21 227.521 cv
29.8296 226.98 29.4497 226.44 29.0898 225.881 cv
28.1899 224.521 27.3696 223.11 26.6299 221.661 cv
23.3599 215.291 21.5195 208.081 21.5195 200.431 cv
21.5195 174.681 42.3896 153.811 68.1396 153.811 cv
93.8896 153.811 114.76 174.681 114.76 200.431 cv
cp
.909804 .882353 .937255 rgb
f
58.0791 181.117 mo
58.0791 181.117 42.1601 187.205 41.3481 205.223 cv
40.1743 231.265 71.3843 225.228 71.3843 225.228 cv
71.3843 225.228 89.0605 227.062 93.9507 214.03 cv
98.8403 200.999 83.1235 193.133 83.1235 193.133 cv
83.1235 193.133 64.0674 176.353 58.0791 181.117 cv
cp
0 0 0 rgb
f
104.05 230.141 mo
100.02 219.331 88.5498 202.891 69.4297 203.591 cv
68.1299 203.641 66.8696 203.761 65.6597 203.94 cv
65.6196 203.951 65.5796 203.961 65.5395 203.961 cv
48.6299 206.61 37.4399 221.741 33.2695 231.351 cv
33.9399 232.121 34.6396 232.86 35.3696 233.581 cv
37.1299 235.331 39.0298 236.931 41.0498 238.371 cv
43.0596 239.82 45.1997 241.11 47.4497 242.221 cv
47.7998 242.391 48.1499 242.561 48.4995 242.721 cv
50.7798 243.781 53.1699 244.671 55.6396 245.351 cv
57.7397 245.94 59.8999 246.381 62.1099 246.671 cv
62.1299 246.671 62.1396 246.671 62.1597 246.681 cv
62.3896 246.711 62.6196 246.741 62.8496 246.761 cv
64.5898 246.951 66.3599 247.051 68.1396 247.051 cv
69.2295 247.051 70.3096 247.011 71.3896 246.94 cv
71.9199 246.9 72.4595 246.86 72.9897 246.801 cv
73.5195 246.751 74.0498 246.681 74.5698 246.61 cv
76.0298 246.411 77.4795 246.141 78.8999 245.801 cv
79.3398 245.701 79.7798 245.591 80.2197 245.471 cv
80.2895 245.451 80.3696 245.431 80.4497 245.411 cv
80.7397 245.331 81.0298 245.251 81.3198 245.15 cv
81.6797 245.061 82.0395 244.951 82.3896 244.831 cv
82.7998 244.701 83.1997 244.561 83.5996 244.421 cv
83.7197 244.381 83.8398 244.341 83.9595 244.291 cv
84.2798 244.181 84.5898 244.061 84.9097 243.94 cv
85.1899 243.841 85.4595 243.721 85.7397 243.61 cv
86.1396 243.451 86.5298 243.281 86.9199 243.101 cv
87.1997 242.991 87.4697 242.86 87.7397 242.73 cv
87.9199 242.661 88.0898 242.57 88.2598 242.491 cv
88.5498 242.351 88.8296 242.211 89.1099 242.07 cv
89.4995 241.881 89.8896 241.671 90.2695 241.461 cv
90.5498 241.311 90.8296 241.161 91.1099 241.001 cv
91.1997 240.951 91.2798 240.9 91.3696 240.851 cv
91.5898 240.73 91.8096 240.601 92.0195 240.471 cv
92.1797 240.371 92.3496 240.271 92.5098 240.171 cv
92.9199 239.921 93.3296 239.661 93.7295 239.4 cv
94.1299 239.141 94.5195 238.871 94.9199 238.591 cv
95.3096 238.32 95.6997 238.041 96.0796 237.751 cv
96.4595 237.471 96.8296 237.181 97.1997 236.891 cv
98.6997 235.69 100.12 234.4 101.459 233.041 cv
104.05 230.141 li
cp
.407843 .713726 .847059 rgb
f
92.019 240.469 mo
85.0391 244.649 76.8691 247.049 68.1387 247.049 cv
66.3589 247.049 64.5889 246.949 62.8589 246.759 cv
62.6191 246.739 62.3887 246.709 62.1587 246.68 cv
62.1387 246.669 62.1289 246.669 62.1089 246.669 cv
59.8989 246.379 57.7388 245.939 55.6387 245.35 cv
53.1689 244.669 50.7788 243.779 48.499 242.719 cv
48.1489 242.56 47.7988 242.39 47.4487 242.219 cv
45.1987 241.109 43.0591 239.819 41.0488 238.369 cv
40.959 231.499 40.9087 226.079 40.9087 226.079 cv
58.6689 212.899 li
67.3887 206.43 li
67.499 206.43 67.6089 206.43 67.7187 206.439 cv
72.519 206.539 76.5688 207.52 79.7588 208.699 cv
80.269 208.899 80.7588 209.089 81.229 209.289 cv
85.6587 211.169 88.0591 213.279 88.0591 213.279 cv
88.0591 213.279 90.1387 227.06 92.019 240.469 cv
cp
f
65.2549 197.138 mo
65.6226 206.985 li
65.6226 206.985 67.4673 210.011 73.6255 210.28 cv
78.2134 210.481 79.8428 209.177 79.8428 209.177 cv
79.1299 204.664 li
78.3076 199.504 li
67.1299 197.48 li
65.2549 197.138 li
cp
.956863 .517647 .384314 rgb
f
65.2549 196.638 mo
65.292 196.923 65.4136 197.257 65.5976 197.639 cv
68.1416 202.794 76.4795 204.526 79.1299 204.664 cv
78.3076 199.504 li
65.2549 196.638 li
cp
0 0 0 rgb
f
79.7539 175.496 mo
79.7539 175.496 85.7534 188.448 83.855 195.84 cv
81.957 203.231 75.2383 202.222 71.2021 200.889 cv
67.166 199.556 65.2534 197.141 65.2534 197.141 cv
65.2534 197.141 61.54 198.491 58.9619 195.066 cv
56.3838 191.642 57.8369 187.614 59.9531 186.651 cv
62.0693 185.689 64.6431 187.176 64.6431 187.176 cv
62.5693 183.419 li
62.5693 183.419 70.5239 163.922 79.7539 175.496 cv
cp
.956863 .517647 .384314 rgb
f
81.6909 180.878 mo
81.6665 180.878 81.6421 180.876 81.6172 180.873 cv
79.0561 180.493 li
78.7827 180.452 78.5942 180.198 78.6348 179.925 cv
78.6758 179.651 78.9292 179.465 79.2026 179.503 cv
81.7637 179.883 li
82.0371 179.924 82.2256 180.178 82.1851 180.451 cv
82.1479 180.7 81.9346 180.878 81.6909 180.878 cv
cp
0 0 0 rgb
f
72.1396 181.937 mo
71.9443 181.937 71.7593 181.821 71.6787 181.63 cv
71.5718 181.375 71.6914 181.083 71.9458 180.976 cv
74.918 179.727 li
75.1733 179.623 75.4658 179.74 75.5727 179.994 cv
75.6797 180.249 75.5601 180.542 75.3057 180.649 cv
72.3335 181.897 li
72.27 181.924 72.2046 181.937 72.1396 181.937 cv
cp
f
79.6753 191.5 mo
79.6587 191.5 79.6416 191.499 79.6245 191.498 cv
79.3496 191.47 79.1494 191.224 79.1772 190.95 cv
79.5879 186.906 77.9126 184.871 77.8955 184.851 cv
77.7178 184.641 77.7427 184.326 77.9521 184.147 cv
78.1611 183.968 78.4746 183.992 78.6548 184.2 cv
78.7353 184.294 80.6289 186.549 80.1724 191.05 cv
80.146 191.308 79.9287 191.5 79.6753 191.5 cv
cp
f
74.3379 193.999 mo
74.4985 194.338 74.7754 194.694 75.249 194.829 cv
75.7217 194.964 76.165 194.785 76.5 194.559 cv
74.3379 193.999 li
cp
75.5908 195.878 mo
75.3935 195.878 75.1875 195.852 74.9746 195.791 cv
73.3208 195.318 73.1348 193.422 73.1274 193.341 cv
73.1133 193.18 73.1782 193.021 73.3022 192.916 cv
73.4263 192.811 73.5942 192.772 73.751 192.813 cv
77.6343 193.82 li
77.7959 193.862 77.9263 193.982 77.9809 194.14 cv
78.0361 194.298 78.0083 194.473 77.9072 194.606 cv
77.8623 194.665 76.9238 195.878 75.5908 195.878 cv
cp
f
64.6606 192.579 mo
64.5918 192.579 64.5215 192.565 64.4541 192.534 cv
59.1807 190.137 li
58.9292 190.023 58.8184 189.727 58.9326 189.475 cv
59.0459 189.224 59.3413 189.112 59.5947 189.227 cv
64.8682 191.624 li
65.1196 191.738 65.2305 192.035 65.1162 192.286 cv
65.0327 192.47 64.8511 192.579 64.6606 192.579 cv
cp
f
59.9629 193.797 mo
59.834 193.797 59.7051 193.748 59.6074 193.649 cv
59.4131 193.453 59.415 193.136 59.6113 192.942 cv
61.936 190.645 li
62.1328 190.45 62.4492 190.453 62.6431 190.648 cv
62.8374 190.845 62.8354 191.162 62.6392 191.355 cv
60.3144 193.653 li
60.2168 193.75 60.0898 193.797 59.9629 193.797 cv
cp
f
72.1396 176.897 mo
72.1396 176.897 75.1426 176.469 78.2759 178.251 cv
81.4092 180.035 82.0527 181.772 82.0527 181.772 cv
82.0527 181.772 83.9907 177.168 79.7432 173.106 cv
75.4956 169.044 67.3457 167.918 62.6475 172.724 cv
57.9497 177.529 58.2373 181.772 58.2373 181.772 cv
64.6431 187.176 li
64.6431 187.176 74.5366 185.383 72.1396 176.897 cv
cp
f
61.5044 174.016 mo
61.5044 174.016 55.4604 162.537 49.334 167.388 cv
43.2075 172.238 50.0293 182.029 56.1147 182.743 cv
62.2002 183.457 61.5044 174.016 61.5044 174.016 cv
cp
f
62.8589 246.759 mo
62.6191 246.739 62.3887 246.709 62.1587 246.68 cv
62.1387 246.669 62.1289 246.669 62.1089 246.669 cv
59.8989 246.379 57.7388 245.939 55.6387 245.35 cv
58.6689 212.899 li
58.769 211.869 li
65.2549 208.607 li
64.0864 205.774 li
64.0864 205.774 70.9687 232.819 62.8589 246.759 cv
cp
.407843 .713726 .847059 rgb
f
92.5088 240.169 mo
92.3491 240.27 92.1792 240.369 92.019 240.469 cv
91.8091 240.6 91.5889 240.729 91.3691 240.85 cv
93.5391 229.52 89.0991 223.029 89.0488 222.959 cv
88.8887 222.729 88.9292 222.399 89.1489 222.229 cv
89.3789 222.06 89.689 222.109 89.8491 222.339 cv
90.0488 222.619 94.3887 228.919 92.5088 240.169 cv
cp
.968627 .701961 .411765 rgb
f
74.188 210.78 mo
68.5102 210.78 65.2964 207.369 65.2539 207.323 cv
65.0679 207.12 65.0815 206.805 65.2842 206.618 cv
65.4878 206.432 65.8027 206.445 65.9907 206.646 cv
66.2012 206.875 71.2642 212.203 80.2187 208.493 cv
80.4731 208.387 80.7666 208.509 80.8721 208.764 cv
80.978 209.019 80.8569 209.312 80.6016 209.417 cv
78.2114 210.408 76.0649 210.78 74.188 210.78 cv
cp
f
65.9658 196.638 mo
65.9658 197.675 65.1245 198.517 64.0864 198.517 cv
63.0488 198.517 62.207 197.675 62.207 196.638 cv
62.207 195.6 63.0488 194.758 64.0864 194.758 cv
65.1245 194.758 65.9658 195.6 65.9658 196.638 cv
cp
.901961 .956863 1 rgb
f
73.6255 187.326 mo
73.3491 187.326 73.1255 187.103 73.1255 186.826 cv
73.1255 184.526 li
73.1255 184.395 73.1772 184.269 73.2695 184.175 cv
74.2876 183.143 li
74.4814 182.945 74.7978 182.944 74.9946 183.138 cv
75.1914 183.332 75.1934 183.648 74.9995 183.845 cv
74.1255 184.731 li
74.1255 186.826 li
74.1255 187.103 73.9018 187.326 73.6255 187.326 cv
cp
0 0 0 rgb
f
81.1816 187.326 mo
80.9053 187.326 80.6816 187.103 80.6816 186.826 cv
80.6816 184.526 li
80.6816 184.395 80.7334 184.269 80.8257 184.175 cv
81.8433 183.143 li
82.0366 182.945 82.3525 182.943 82.5503 183.138 cv
82.7471 183.332 82.749 183.648 82.5552 183.845 cv
81.6816 184.731 li
81.6816 186.826 li
81.6816 187.103 81.458 187.326 81.1816 187.326 cv
cp
f
363.508 79.0977 mo
363.508 87.9976 361.008 96.3174 356.688 103.397 cv
355.938 104.627 355.128 105.808 354.277 106.958 cv
353.647 107.797 352.998 108.607 352.308 109.397 cv
350.518 111.498 348.538 113.428 346.408 115.188 cv
345.708 115.757 344.988 116.317 344.248 116.848 cv
343.848 117.147 343.438 117.438 343.018 117.717 cv
342.298 118.197 341.567 118.667 340.817 119.107 cv
340.678 119.208 340.527 119.288 340.378 119.377 cv
340.228 119.467 340.067 119.558 339.908 119.647 cv
338.428 120.498 336.878 121.257 335.298 121.938 cv
331.968 123.377 328.428 124.428 324.748 125.047 cv
324.338 125.127 323.938 125.188 323.527 125.248 cv
322.488 125.397 321.438 125.507 320.378 125.587 cv
320.268 125.598 320.158 125.607 320.048 125.607 cv
319.317 125.658 318.567 125.688 317.818 125.697 cv
317.508 125.717 317.198 125.717 316.888 125.717 cv
313.128 125.717 309.458 125.268 305.958 124.428 cv
303.108 123.748 300.368 122.797 297.748 121.598 cv
295.668 120.678 293.668 119.587 291.758 118.368 cv
291.048 117.917 290.348 117.438 289.658 116.938 cv
288.848 116.357 288.058 115.748 287.288 115.098 cv
285.278 113.458 283.408 111.637 281.698 109.667 cv
281.318 109.228 280.948 108.788 280.588 108.337 cv
280.198 107.857 279.818 107.368 279.448 106.868 cv
279.288 106.658 279.138 106.458 278.988 106.248 cv
277.758 104.538 276.648 102.737 275.658 100.857 cv
275.258 100.118 274.888 99.3574 274.538 98.5977 cv
271.788 92.6577 270.268 86.0474 270.268 79.0977 cv
270.268 53.3477 291.138 32.4775 316.888 32.4775 cv
342.638 32.4775 363.508 53.3477 363.508 79.0977 cv
cp
.909804 .882353 .937255 rgb
f
344.248 116.848 mo
343.848 117.147 343.438 117.438 343.018 117.717 cv
342.158 118.297 341.277 118.857 340.378 119.377 cv
335.298 122.348 329.607 124.377 323.527 125.248 cv
323.238 125.288 322.948 125.328 322.647 125.357 cv
321.098 125.558 319.518 125.667 317.908 125.697 cv
317.818 125.697 li
317.508 125.717 317.198 125.717 316.888 125.717 cv
313.128 125.717 309.458 125.268 305.958 124.428 cv
300.848 123.197 296.058 121.127 291.758 118.368 cv
290.198 117.377 288.708 116.288 287.288 115.098 cv
285.278 113.458 283.408 111.637 281.698 109.667 cv
281.318 109.228 280.948 108.788 280.588 108.337 cv
279.998 100.348 287.518 92.6475 288.858 91.0776 cv
293.168 85.9775 305.288 83.1372 317.188 83.4775 cv
317.188 83.4775 333.397 83.4175 340.147 90.6274 cv
343.118 93.7974 344.107 105.098 344.248 116.848 cv
cp
.572549 .705882 .917647 rgb
f
290.268 89.7046 mo
289.658 116.939 li
288.848 116.359 288.058 115.749 287.288 115.099 cv
285.278 113.459 283.408 111.639 281.698 109.669 cv
281.318 109.229 280.948 108.789 280.588 108.339 cv
280.198 107.859 279.818 107.369 279.448 106.869 cv
279.288 106.659 279.138 106.459 278.988 106.249 cv
277.758 104.539 276.648 102.739 275.658 100.859 cv
281.612 95.1504 290.268 89.7046 290.268 89.7046 cv
cp
f
352.308 109.397 mo
350.518 111.498 348.538 113.428 346.408 115.188 cv
345.708 115.757 344.988 116.317 344.248 116.848 cv
343.848 117.147 343.438 117.438 343.018 117.717 cv
342.828 117.848 342.628 117.978 342.438 118.098 cv
342.198 118.257 341.958 118.417 341.718 118.558 cv
341.277 118.848 340.828 119.118 340.378 119.377 cv
338.748 120.337 337.048 121.188 335.298 121.938 cv
329.508 117.167 li
340.548 91.0776 li
352.308 109.397 li
cp
f
308.302 75.043 mo
307.542 84.397 li
307.542 84.397 308.179 87.2339 314.299 88.2344 cv
318.858 88.98 321.347 86.2285 321.347 86.2285 cv
321.27 84.2095 li
321.061 78.957 li
310.134 75.6069 li
308.302 75.043 li
cp
.956863 .517647 .384314 rgb
f
310.134 75.6069 mo
310.138 75.8965 310.22 76.2451 310.358 76.6479 cv
312.288 82.0996 318.638 83.7568 321.27 84.2095 cv
321.061 78.957 li
310.134 75.6069 li
cp
0 0 0 rgb
f
325.356 55.1431 mo
325.356 55.1431 329.812 68.7954 327.038 75.9546 cv
324.264 83.1138 317.671 81.3066 313.797 79.4961 cv
309.924 77.6851 308.3 75.0449 308.3 75.0449 cv
308.3 75.0449 304.43 75.9531 302.261 72.2261 cv
300.092 68.499 302.022 64.6465 304.25 63.937 cv
306.479 63.2271 308.874 65.0181 308.874 65.0181 cv
307.248 61.0186 li
307.248 61.0186 317.51 42.4854 325.356 55.1431 cv
cp
.956863 .517647 .384314 rgb
f
323.185 71.8105 mo
323.119 71.8105 323.053 71.7979 322.988 71.7705 cv
322.734 71.6621 322.616 71.3682 322.725 71.1143 cv
323.701 68.8257 322.189 66.0625 322.174 66.0347 cv
322.04 65.7935 322.126 65.4893 322.367 65.3545 cv
322.606 65.2207 322.912 65.3057 323.047 65.5469 cv
323.119 65.6768 324.815 68.7612 323.645 71.5068 cv
323.563 71.6968 323.379 71.8105 323.185 71.8105 cv
cp
0 0 0 rgb
f
307.725 71.0806 mo
307.605 71.0806 307.487 71.0269 307.408 70.9243 cv
304.242 66.7881 li
304.109 66.6138 304.142 66.3638 304.316 66.2305 cv
304.489 66.0981 304.74 66.1289 304.875 66.3047 cv
308.041 70.4409 li
308.174 70.6152 308.142 70.8652 307.967 70.9985 cv
307.895 71.0537 307.81 71.0806 307.725 71.0806 cv
cp
f
304.065 69.6812 mo
303.854 69.6812 303.678 69.5151 303.668 69.3022 cv
303.657 69.0825 303.827 68.896 304.047 68.8857 cv
306.545 68.7676 li
306.76 68.7588 306.951 68.9272 306.961 69.146 cv
306.972 69.3657 306.802 69.5522 306.582 69.5625 cv
304.084 69.6807 li
304.078 69.6812 304.071 69.6812 304.065 69.6812 cv
cp
f
317.759 66.314 mo
317.488 66.314 317.266 66.0977 317.259 65.8257 cv
317.2 63.3545 li
317.193 63.0786 317.412 62.8496 317.688 62.8428 cv
317.986 62.8472 318.193 63.0552 318.2 63.3311 cv
318.259 65.8022 li
318.266 66.0781 318.047 66.3071 317.771 66.314 cv
317.767 66.314 317.763 66.314 317.759 66.314 cv
cp
f
325.06 66.4824 mo
324.793 66.4824 324.571 66.2725 324.56 66.0039 cv
324.453 63.5342 li
324.441 63.2583 324.655 63.0249 324.932 63.0132 cv
325.206 62.9844 325.44 63.2153 325.453 63.4912 cv
325.56 65.9609 li
325.571 66.2368 325.357 66.4702 325.081 66.4819 cv
325.074 66.4824 325.066 66.4824 325.06 66.4824 cv
cp
f
316.552 61.6777 mo
316.453 61.6777 316.354 61.6489 316.267 61.5889 cv
316.04 61.4312 315.983 61.1196 316.141 60.8931 cv
317.287 59.2417 319.462 59.9971 319.555 60.0293 cv
319.813 60.1221 319.948 60.4072 319.856 60.667 cv
319.764 60.9272 319.477 61.062 319.219 60.9712 cv
319.155 60.9487 317.668 60.4429 316.963 61.4624 cv
316.865 61.6025 316.71 61.6777 316.552 61.6777 cv
cp
f
326.091 61.6655 mo
325.923 61.6655 325.759 61.5811 325.665 61.4272 cv
325.554 61.249 325.166 60.769 324.705 60.6758 cv
324.455 60.625 324.197 60.6924 323.926 60.8848 cv
323.7 61.0425 323.389 60.9907 323.229 60.7642 cv
323.07 60.5386 323.124 60.2266 323.35 60.0674 cv
323.848 59.7168 324.387 59.5894 324.911 59.6973 cv
325.877 59.8975 326.455 60.8022 326.518 60.9048 cv
326.661 61.1401 326.587 61.4482 326.352 61.5923 cv
326.271 61.6421 326.181 61.6655 326.091 61.6655 cv
cp
f
325.355 55.145 mo
324.513 53.9116 li
324.513 53.9116 323.476 54.6226 321.169 55.1094 cv
317.625 55.8779 313.464 55.6611 313.464 55.6611 cv
313.464 55.6611 314.162 56.6758 314.001 60.3286 cv
313.841 63.9927 310.041 66.0327 310.041 66.0327 cv
308.704 65.0923 307.577 64.5581 306.63 64.2744 cv
306.22 64.1582 305.857 64.0845 305.517 64.0439 cv
303.325 63.8281 302.508 65.1816 302.508 65.1816 cv
302.508 65.1816 297.463 57.1401 303.3 51.3623 cv
307.393 47.3291 312.873 47.5869 315.777 48.1079 cv
316.764 48.2881 317.448 48.4937 317.699 48.5723 cv
317.768 48.5913 317.802 48.6011 317.802 48.6011 cv
317.802 48.6011 326.541 46.5288 327.994 47.8242 cv
329.448 49.1084 326.404 55.1987 325.355 55.145 cv
cp
f
319.053 73.6128 mo
319.049 73.7373 319.063 73.8672 319.109 73.9839 cv
319.186 74.1724 319.344 74.314 319.594 74.416 cv
320.039 74.5991 320.47 74.5781 320.82 74.4912 cv
319.053 73.6128 li
cp
320.301 75.5557 mo
319.959 75.5557 319.593 75.4966 319.215 75.3418 cv
318.713 75.1357 318.354 74.7925 318.179 74.3486 cv
317.869 73.5698 318.215 72.7666 318.256 72.6772 cv
318.312 72.5537 318.416 72.4585 318.544 72.4131 cv
318.669 72.3687 318.811 72.376 318.934 72.4365 cv
322.196 74.0581 li
322.352 74.1353 322.455 74.2866 322.472 74.459 cv
322.487 74.6313 322.414 74.7998 322.275 74.9043 cv
322.23 74.9385 321.4 75.5557 320.301 75.5557 cv
cp
f
322.647 125.357 mo
321.098 125.558 319.518 125.667 317.908 125.697 cv
314.438 88.6875 li
317.848 89.5776 li
322.647 125.357 li
cp
.635294 .772549 .976471 rgb
f
321.493 83.9131 mo
321.493 83.9131 325.466 94.957 324.307 94.793 cv
323.147 94.6284 316.009 88.9478 316.009 88.9478 cv
316.009 88.9478 311.335 95.3755 309.705 95.4951 cv
308.075 95.6143 307.542 83.9912 307.542 83.9912 cv
307.542 83.9912 308.776 87.2778 314.861 87.835 cv
320.945 88.3916 321.493 83.9131 321.493 83.9131 cv
cp
.901961 .956863 1 rgb
f
340.817 119.107 mo
340.678 119.208 340.527 119.288 340.378 119.377 cv
340.228 119.467 340.067 119.558 339.908 119.647 cv
335.918 100.958 li
335.868 100.688 336.038 100.428 336.308 100.368 cv
336.578 100.308 336.838 100.478 336.897 100.748 cv
340.817 119.107 li
cp
f
239.14 200.806 mo
239.14 207.506 237.72 213.886 235.18 219.646 cv
234.62 220.896 234.02 222.116 233.36 223.306 cv
233.03 223.916 232.68 224.516 232.32 225.105 cv
231.68 226.156 231 227.166 230.29 228.146 cv
230.17 228.306 230.06 228.466 229.95 228.616 cv
229.94 228.636 229.93 228.646 229.91 228.666 cv
227.63 231.716 224.98 234.476 222.04 236.896 cv
220.95 237.786 219.82 238.636 218.65 239.426 cv
217.79 240.006 216.91 240.565 216.01 241.086 cv
215.39 241.446 214.76 241.796 214.12 242.136 cv
209.53 244.536 204.5 246.196 199.16 246.956 cv
197.29 247.226 195.39 247.376 193.45 247.406 cv
193.14 247.426 192.83 247.426 192.52 247.426 cv
188.76 247.426 185.09 246.976 181.59 246.136 cv
176.48 244.906 171.69 242.836 167.39 240.076 cv
165.83 239.086 164.34 237.996 162.92 236.806 cv
160.91 235.166 159.04 233.346 157.33 231.376 cv
156.55 230.466 155.79 229.536 155.08 228.576 cv
154.92 228.366 154.77 228.166 154.62 227.956 cv
152.91 225.565 151.41 223.006 150.17 220.306 cv
147.42 214.366 145.9 207.756 145.9 200.806 cv
145.9 175.056 166.77 154.186 192.52 154.186 cv
218.27 154.186 239.14 175.056 239.14 200.806 cv
cp
.909804 .882353 .937255 rgb
f
222.039 236.895 mo
220.949 237.784 219.819 238.635 218.649 239.424 cv
217.789 240.004 216.909 240.564 216.009 241.084 cv
210.929 244.055 205.239 246.084 199.159 246.954 cv
197.289 247.225 195.389 247.374 193.449 247.404 cv
193.139 247.424 192.829 247.424 192.519 247.424 cv
188.759 247.424 185.089 246.975 181.589 246.135 cv
176.479 244.904 171.689 242.834 167.389 240.074 cv
165.829 239.084 164.339 237.994 162.919 236.805 cv
160.909 235.164 159.039 233.345 157.329 231.374 cv
156.549 230.464 155.789 229.534 155.079 228.574 cv
158.259 221.044 164.069 210.254 171.989 207.614 cv
184.459 203.454 211.029 209.314 211.029 209.314 cv
211.029 209.314 220.129 213.734 222.039 236.895 cv
cp
.25098 .313726 .498039 rgb
f
216.009 241.084 mo
210.929 244.055 205.239 246.084 199.159 246.954 cv
197.289 247.225 195.389 247.374 193.449 247.404 cv
193.139 247.424 192.829 247.424 192.519 247.424 cv
188.759 247.424 185.089 246.975 181.589 246.135 cv
176.479 244.904 171.689 242.834 167.389 240.074 cv
165.829 239.084 164.339 237.994 162.919 236.805 cv
162.999 224.614 163.919 213.475 166.869 210.814 cv
168.349 209.475 170.119 208.424 171.989 207.614 cv
176.319 205.744 181.159 205.114 184.339 204.904 cv
186.449 204.765 187.819 204.814 187.819 204.814 cv
187.819 204.814 190.649 204.924 194.449 205.345 cv
195.499 205.475 196.559 205.604 197.669 205.765 cv
204.139 206.694 211.719 208.504 213.679 211.924 cv
215.369 214.864 215.909 228.034 216.009 241.084 cv
cp
f
201.47 180.396 mo
182.2 194.986 li
182.2 194.986 171.7 184.446 175.97 178.426 cv
178.62 174.676 183.98 172.876 187.65 172.046 cv
188.07 171.956 188.46 171.876 188.83 171.806 cv
190.41 171.496 191.47 171.406 191.47 171.406 cv
191.48 171.466 li
192.15 171.216 198.83 166.386 202.49 167.986 cv
207.52 170.176 201.47 180.396 201.47 180.396 cv
cp
0 0 0 rgb
f
184.199 197.266 mo
183.564 207.619 li
183.564 207.619 185.249 210.71 191.275 211.574 cv
195.765 212.218 197.413 211.295 197.413 211.295 cv
197.105 206.013 li
196.799 200.861 li
186.009 197.784 li
184.199 197.266 li
cp
.956863 .517647 .384314 rgb
f
186.009 197.784 mo
186.018 198.068 186.105 198.408 186.249 198.801 cv
188.249 204.115 194.514 205.619 197.105 206.013 cv
196.799 200.861 li
186.009 197.784 li
cp
0 0 0 rgb
f
200.556 177.403 mo
200.556 177.403 205.193 190.717 202.608 197.798 cv
200.023 204.879 193.518 203.232 189.68 201.53 cv
185.843 199.828 184.198 197.268 184.198 197.268 cv
184.198 197.268 180.417 198.233 178.215 194.617 cv
176.014 191 177.834 187.182 180.008 186.442 cv
182.182 185.703 184.567 187.414 184.567 187.414 cv
182.894 183.52 li
182.894 183.52 192.608 165.129 200.556 177.403 cv
cp
.956863 .517647 .384314 rgb
f
183.866 193.068 mo
183.755 193.068 183.644 193.031 183.55 192.955 cv
179.091 189.314 li
178.877 189.14 178.846 188.825 179.021 188.611 cv
179.194 188.396 179.508 188.364 179.724 188.54 cv
184.183 192.181 li
184.397 192.355 184.429 192.67 184.254 192.884 cv
184.155 193.005 184.011 193.068 183.866 193.068 cv
cp
0 0 0 rgb
f
179.618 192.75 mo
179.383 192.75 179.174 192.583 179.128 192.344 cv
179.075 192.073 179.253 191.811 179.524 191.759 cv
182.644 191.156 li
182.915 191.102 183.177 191.281 183.229 191.552 cv
183.282 191.823 183.104 192.085 182.833 192.138 cv
179.713 192.74 li
179.682 192.747 179.649 192.75 179.618 192.75 cv
cp
f
191.586 182.974 mo
191.469 182.974 191.352 182.933 191.257 182.85 cv
191.049 182.668 191.028 182.353 191.21 182.145 cv
192.763 180.368 194.667 180.83 195.457 181.322 cv
195.69 181.468 195.762 181.776 195.616 182.011 cv
195.471 182.243 195.164 182.315 194.93 182.172 cv
194.766 182.073 193.311 181.26 191.963 182.803 cv
191.864 182.916 191.726 182.974 191.586 182.974 cv
cp
f
201.646 182.549 mo
201.523 182.549 201.4 182.504 201.304 182.414 cv
200.302 181.478 199.146 182.051 199.135 182.056 cv
198.888 182.181 198.588 182.083 198.463 181.837 cv
198.337 181.592 198.435 181.291 198.681 181.165 cv
198.753 181.127 200.477 180.272 201.987 181.684 cv
202.188 181.872 202.199 182.188 202.011 182.39 cv
201.912 182.496 201.779 182.549 201.646 182.549 cv
cp
f
199.298 192.292 mo
199.241 192.292 199.183 192.282 199.126 192.261 cv
198.867 192.166 198.733 191.879 198.828 191.62 cv
200.154 187.997 198.378 185.88 198.36 185.859 cv
198.179 185.65 198.203 185.335 198.412 185.154 cv
198.619 184.974 198.936 184.997 199.117 185.206 cv
199.206 185.31 201.293 187.794 199.768 191.963 cv
199.693 192.166 199.502 192.292 199.298 192.292 cv
cp
f
201.293 187.521 mo
201.062 187.521 200.854 187.358 200.804 187.123 cv
200.302 184.708 li
200.295 184.673 200.292 184.639 200.292 184.605 cv
200.292 184.374 200.454 184.166 200.689 184.116 cv
200.96 184.06 201.224 184.234 201.281 184.504 cv
201.784 186.918 li
201.791 186.953 201.794 186.987 201.794 187.021 cv
201.794 187.253 201.632 187.461 201.396 187.51 cv
201.361 187.517 201.327 187.521 201.293 187.521 cv
cp
f
193.73 187.696 mo
193.498 187.696 193.29 187.534 193.241 187.298 cv
192.738 184.884 li
192.682 184.614 192.856 184.349 193.126 184.292 cv
193.399 184.237 193.661 184.41 193.718 184.68 cv
194.22 187.094 li
194.276 187.365 194.103 187.629 193.833 187.686 cv
193.798 187.693 193.764 187.696 193.73 187.696 cv
cp
f
201.466 180.395 mo
201.466 180.395 200.47 178.245 197.888 178.068 cv
195.306 177.892 193.687 179.619 193.687 179.619 cv
193.687 179.619 194.553 184.038 190.899 186.132 cv
187.245 188.227 184.567 187.414 184.567 187.414 cv
182.075 186.35 li
180.435 182.513 li
188.292 175.023 li
198.139 170.574 li
202.729 175.285 li
201.466 180.395 li
cp
f
196.441 196.257 mo
196.038 196.257 193.653 196.155 192.723 193.809 cv
192.621 193.553 192.747 193.262 193.003 193.16 cv
193.258 193.058 193.55 193.184 193.652 193.441 cv
194.384 195.287 196.376 195.261 196.463 195.256 cv
196.723 195.242 196.969 195.466 196.977 195.741 cv
196.986 196.017 196.771 196.247 196.496 196.256 cv
196.488 196.256 196.469 196.257 196.441 196.257 cv
cp
f
194.586 212.378 mo
187.808 212.378 182.649 207.684 182.399 207.452 cv
182.196 207.265 182.185 206.948 182.372 206.745 cv
182.56 206.542 182.875 206.529 183.078 206.718 cv
183.146 206.78 189.902 212.909 197.76 210.997 cv
198.027 210.932 198.298 211.096 198.364 211.363 cv
198.43 211.632 198.265 211.902 197.997 211.968 cv
196.827 212.254 195.685 212.378 194.586 212.378 cv
cp
1 1 1 rgb
f
230.29 228.146 mo
230.16 228.326 230.04 228.496 229.91 228.666 cv
227.63 231.716 224.98 234.476 222.04 236.896 cv
220.96 237.776 219.84 238.626 218.68 239.406 cv
210 235.706 li
213.109 211.14 li
230.29 228.146 li
cp
.25098 .313726 .498039 rgb
f
611.339 199.822 mo
611.339 209.032 608.669 217.622 604.049 224.862 cv
603.229 226.143 602.349 227.382 601.419 228.582 cv
598.539 232.242 595.129 235.462 591.299 238.122 cv
590.879 238.412 590.448 238.702 590.019 238.982 cv
587.669 240.502 585.169 241.822 582.549 242.912 cv
581.858 243.192 581.169 243.462 580.469 243.712 cv
575.549 245.482 570.249 246.442 564.719 246.442 cv
564.358 246.442 563.988 246.442 563.618 246.432 cv
558.999 246.322 554.539 245.542 550.339 244.182 cv
544.608 242.332 539.368 239.393 534.858 235.622 cv
534.658 235.462 534.448 235.282 534.249 235.112 cv
532.868 233.922 531.568 232.652 530.339 231.313 cv
530.179 231.143 530.028 230.972 529.879 230.792 cv
522.539 222.563 518.089 211.712 518.089 199.822 cv
518.089 174.072 538.969 153.202 564.719 153.202 cv
590.459 153.202 611.339 174.072 611.339 199.822 cv
cp
.909804 .882353 .937255 rgb
f
550.339 244.182 mo
544.608 242.332 539.368 239.393 534.858 235.622 cv
534.658 235.462 534.448 235.282 534.249 235.112 cv
532.868 233.922 531.568 232.652 530.339 231.313 cv
530.179 231.143 530.028 230.972 529.879 230.792 cv
534.578 217.102 542.389 206.192 551.389 206.222 cv
562.618 206.313 556.769 227.412 550.339 244.182 cv
cp
.25098 .313726 .498039 rgb
f
570.592 178.535 mo
570.592 178.535 583.937 174.944 593.862 187.101 cv
603.789 199.257 597.62 214.222 581.895 213.792 cv
566.169 213.362 562.513 197.291 562.513 197.291 cv
570.592 178.535 li
cp
0 0 0 rgb
f
590.019 238.982 mo
587.669 240.502 585.169 241.822 582.549 242.912 cv
581.858 243.192 581.169 243.462 580.469 243.712 cv
575.549 245.482 570.249 246.442 564.719 246.442 cv
564.358 246.442 563.988 246.442 563.618 246.432 cv
552.688 246.182 542.679 242.162 534.858 235.622 cv
535.799 225.122 537.068 216.682 538.759 214.252 cv
542.309 209.143 546.479 207.262 551.389 206.222 cv
554.009 205.682 556.778 205.393 559.778 204.962 cv
564.179 204.352 569.479 204.482 574.219 205.022 cv
574.278 205.022 li
578.919 205.563 583.028 206.512 585.209 207.582 cv
587.019 208.462 588.759 222.522 590.019 238.982 cv
cp
.25098 .313726 .498039 rgb
f
553.421 196.448 mo
552.863 198.998 551.332 200.829 550.001 200.537 cv
548.671 200.246 548.044 197.943 548.603 195.393 cv
549.16 192.843 550.691 191.012 552.022 191.303 cv
553.354 191.595 553.979 193.897 553.421 196.448 cv
cp
.572549 .705882 .917647 rgb
f
601.419 228.582 mo
598.539 232.242 595.129 235.462 591.299 238.122 cv
588.578 240.012 585.648 241.622 582.549 242.912 cv
581.858 243.192 581.169 243.462 580.469 243.712 cv
571.889 205.022 li
571.889 205.022 572.738 204.952 574.219 205.022 cv
574.278 205.022 li
578.969 205.282 592.139 205.102 601.419 228.582 cv
cp
.25098 .313726 .498039 rgb
f
550.558 188.54 mo
550.558 188.54 546.764 184.506 547.711 178.123 cv
548.354 173.796 550.246 172.363 550.246 172.363 cv
550.246 172.363 547.209 166.532 555.919 166.721 cv
564.629 166.911 571.765 166.167 575.646 173.659 cv
577.933 178.073 577.022 187.66 577.022 187.66 cv
550.558 188.54 li
cp
0 0 0 rgb
f
569.801 195.343 mo
569.739 205.973 li
569.739 205.973 567.805 209.017 561.584 209.485 cv
556.949 209.835 555.497 207.447 555.497 207.447 cv
556.673 198.153 li
567.915 195.749 li
569.801 195.343 li
cp
.956863 .517647 .384314 rgb
f
569.789 194.695 mo
569.76 194.985 569.647 195.327 569.474 195.719 cv
567.064 201.015 558.682 203.175 556.006 203.399 cv
556.673 198.153 li
569.789 194.695 li
cp
0 0 0 rgb
f
554.444 173.912 mo
554.444 173.912 548.788 187.206 550.944 194.623 cv
553.1 202.04 559.864 200.804 563.904 199.327 cv
567.945 197.85 569.803 195.346 569.803 195.346 cv
569.803 195.346 573.603 196.593 576.102 193.047 cv
578.6 189.501 577.002 185.472 574.83 184.566 cv
572.659 183.66 570.103 185.247 570.103 185.247 cv
572.081 181.38 li
572.081 181.38 563.412 161.91 554.444 173.912 cv
cp
.956863 .517647 .384314 rgb
f
570.103 185.247 mo
570.103 185.247 564.433 186.504 560.356 180.247 cv
556.281 173.989 556.594 171.381 556.594 171.381 cv
552.78 177.996 li
552.78 177.996 551.813 173.479 553.57 170.553 cv
555.328 167.628 557.222 168.191 557.222 168.191 cv
569.832 171.085 li
573.33 181.081 li
570.103 185.247 li
cp
0 0 0 rgb
f
555.211 190.805 mo
555.001 190.805 554.805 190.671 554.735 190.46 cv
553.802 187.608 555.77 184.666 555.854 184.542 cv
556.01 184.315 556.32 184.256 556.548 184.41 cv
556.776 184.564 556.836 184.875 556.682 185.104 cv
556.663 185.13 554.906 187.769 555.687 190.149 cv
555.772 190.412 555.629 190.694 555.366 190.78 cv
555.314 190.797 555.263 190.805 555.211 190.805 cv
cp
f
570.76 191.523 mo
570.64 191.523 570.519 191.48 570.423 191.393 cv
570.219 191.207 570.204 190.89 570.391 190.686 cv
573.924 186.817 li
574.11 186.614 574.427 186.6 574.63 186.786 cv
574.834 186.972 574.849 187.288 574.662 187.492 cv
571.129 191.361 li
571.03 191.469 570.896 191.523 570.76 191.523 cv
cp
f
574.55 190.44 mo
574.527 190.44 574.505 190.439 574.482 190.436 cv
571.989 190.1 li
571.715 190.063 571.523 189.812 571.561 189.538 cv
571.597 189.264 571.853 189.072 572.122 189.109 cv
574.615 189.445 li
574.89 189.482 575.081 189.733 575.044 190.007 cv
575.011 190.258 574.796 190.44 574.55 190.44 cv
cp
f
552.453 180.014 mo
552.219 180.014 552.01 179.848 551.963 179.609 cv
551.911 179.338 552.088 179.076 552.359 179.023 cv
554.702 178.569 li
554.961 178.516 555.234 178.693 555.288 178.965 cv
555.34 179.236 555.163 179.499 554.892 179.551 cv
552.549 180.005 li
552.518 180.011 552.485 180.014 552.453 180.014 cv
cp
f
562.254 181.369 mo
562.181 181.369 562.106 181.353 562.037 181.319 cv
558.145 179.441 li
557.896 179.322 557.791 179.022 557.911 178.774 cv
558.031 178.524 558.333 178.421 558.578 178.541 cv
562.471 180.419 li
562.72 180.539 562.824 180.838 562.704 181.086 cv
562.618 181.265 562.439 181.369 562.254 181.369 cv
cp
f
552.559 185.447 mo
552.514 185.447 552.467 185.441 552.421 185.428 cv
552.155 185.352 552.002 185.075 552.078 184.81 cv
552.691 182.664 li
552.114 181.984 li
551.936 181.773 551.961 181.458 552.171 181.279 cv
552.384 181.101 552.698 181.127 552.876 181.336 cv
553.627 182.22 li
553.735 182.348 553.772 182.521 553.727 182.682 cv
553.039 185.085 li
552.977 185.304 552.776 185.447 552.559 185.447 cv
cp
f
559.257 185.96 mo
559.212 185.96 559.165 185.954 559.119 185.941 cv
558.854 185.865 558.7 185.588 558.776 185.323 cv
559.389 183.184 li
558.535 182.226 li
558.352 182.02 558.369 181.704 558.575 181.521 cv
558.782 181.336 559.098 181.355 559.281 181.561 cv
560.318 182.725 li
560.433 182.853 560.474 183.03 560.426 183.195 cv
559.737 185.598 li
559.675 185.817 559.475 185.96 559.257 185.96 cv
cp
f
557.133 194.256 mo
556.814 194.256 556.502 194.19 556.205 194.035 cv
555.96 193.907 555.865 193.604 555.993 193.36 cv
556.123 193.116 556.428 193.021 556.668 193.149 cv
557.697 193.685 559.59 192.048 560.171 191.43 cv
560.361 191.229 560.677 191.219 560.878 191.408 cv
561.079 191.598 561.089 191.914 560.899 192.115 cv
560.662 192.368 558.83 194.256 557.133 194.256 cv
cp
f
555.754 205.418 mo
550.454 206.344 li
550.454 206.344 550.565 213.446 560.535 214.343 cv
570.506 215.24 577.201 205.305 577.201 205.305 cv
566.73 204.036 li
555.754 205.418 li
cp
.956863 .517647 .384314 rgb
f
574.988 197.044 mo
575.15 199.649 574.179 201.83 572.819 201.914 cv
571.46 201.999 570.227 199.956 570.064 197.35 cv
569.903 194.745 570.874 192.564 572.233 192.48 cv
573.593 192.396 574.826 194.439 574.988 197.044 cv
cp
.572549 .705882 .917647 rgb
f
545.852 241.335 mo
545.719 241.335 545.586 241.282 545.488 241.178 cv
536.296 231.432 544.021 221.534 544.1 221.436 cv
544.272 221.222 544.588 221.188 544.802 221.357 cv
545.018 221.53 545.053 221.845 544.881 222.061 cv
544.581 222.437 537.628 231.387 546.215 240.492 cv
546.404 240.692 546.396 241.009 546.194 241.198 cv
546.098 241.29 545.975 241.335 545.852 241.335 cv
cp
f
362.884 200.806 mo
362.884 209.176 360.674 217.036 356.804 223.836 cv
355.704 225.766 354.464 227.616 353.104 229.366 cv
351.104 231.946 348.844 234.306 346.354 236.406 cv
346.283 236.466 346.214 236.526 346.144 236.576 cv
343.124 239.105 339.783 241.256 336.184 242.966 cv
334.563 243.736 332.884 244.416 331.164 244.996 cv
326.483 246.565 321.474 247.426 316.264 247.426 cv
311.793 247.426 307.474 246.796 303.384 245.616 cv
299.784 244.586 296.364 243.136 293.184 241.315 cv
288.793 238.815 284.844 235.616 281.504 231.876 cv
281.304 231.656 281.114 231.436 280.924 231.216 cv
280.614 230.866 280.313 230.506 280.024 230.146 cv
278.644 228.446 277.384 226.646 276.254 224.766 cv
272.054 217.756 269.634 209.565 269.634 200.806 cv
269.634 175.056 290.514 154.186 316.264 154.186 cv
342.004 154.186 362.884 175.056 362.884 200.806 cv
cp
.909804 .882353 .937255 rgb
f
309.066 180.891 mo
309.066 180.891 300.983 174.429 304.664 169.074 cv
308.344 163.718 316.233 169.167 316.233 169.167 cv
316.233 169.167 319.308 166.092 323.655 168.58 cv
328.003 171.068 328.5 177.136 328.5 177.136 cv
328.5 177.136 332.93 177.035 333.183 182.424 cv
333.437 187.814 327.635 192.614 327.635 192.614 cv
309.066 180.891 li
cp
0 0 0 rgb
f
346.144 236.576 mo
343.124 239.105 339.783 241.256 336.184 242.966 cv
334.563 243.736 332.884 244.416 331.164 244.996 cv
326.483 246.565 321.474 247.426 316.264 247.426 cv
311.793 247.426 307.474 246.796 303.384 245.616 cv
299.784 244.586 296.364 243.136 293.184 241.315 cv
292.634 210.156 li
304.974 201.496 316.944 203.656 316.944 203.656 cv
316.944 203.656 332.664 201.866 340.874 209.376 cv
342.073 210.476 343.094 211.736 343.884 213.226 cv
345.193 215.676 345.844 225.516 346.144 236.576 cv
cp
.407843 .462745 .666667 rgb
f
323.254 195.58 mo
323.355 205.851 li
323.355 205.851 321.533 208.821 315.529 209.369 cv
311.057 209.777 309.475 208.781 309.475 208.781 cv
310.047 203.573 li
310.612 198.495 li
321.438 196 li
323.254 195.58 li
cp
.956863 .517647 .384314 rgb
f
321.438 196 mo
321.415 196.281 321.312 196.613 321.149 196.995 cv
318.901 202.147 312.63 203.316 310.047 203.573 cv
310.612 198.495 li
321.438 196 li
cp
0 0 0 rgb
f
308.09 175.107 mo
308.09 175.107 302.828 188.037 305.023 195.171 cv
307.219 202.305 313.736 201.007 317.617 199.519 cv
321.498 198.03 323.256 195.583 323.256 195.583 cv
323.256 195.583 326.945 196.73 329.306 193.266 cv
331.667 189.802 330.061 185.933 327.949 185.091 cv
325.837 184.249 323.392 185.82 323.392 185.82 cv
325.244 182.054 li
325.244 182.054 316.573 163.375 308.09 175.107 cv
cp
.956863 .517647 .384314 rgb
f
323.822 191.452 mo
323.669 191.452 323.518 191.381 323.419 191.248 cv
323.256 191.025 323.304 190.712 323.526 190.549 cv
328.12 187.176 li
328.341 187.013 328.654 187.059 328.819 187.283 cv
328.982 187.505 328.935 187.818 328.712 187.981 cv
324.118 191.355 li
324.029 191.42 323.926 191.452 323.822 191.452 cv
cp
0 0 0 rgb
f
328.039 191.353 mo
328 191.353 327.959 191.349 327.919 191.338 cv
324.864 190.584 li
324.597 190.518 324.433 190.247 324.499 189.979 cv
324.565 189.711 324.835 189.544 325.104 189.613 cv
328.159 190.368 li
328.427 190.434 328.591 190.705 328.524 190.973 cv
328.468 191.201 328.264 191.353 328.039 191.353 cv
cp
f
316.742 180.53 mo
316.686 180.53 316.628 180.52 316.571 180.5 cv
315.813 180.224 313.631 180.102 312.854 180.078 cv
312.578 180.069 312.361 179.839 312.369 179.563 cv
312.378 179.287 312.561 179.076 312.885 179.078 cv
313.187 179.087 315.868 179.179 316.913 179.56 cv
317.173 179.654 317.307 179.941 317.212 180.201 cv
317.138 180.404 316.946 180.53 316.742 180.53 cv
cp
f
306.775 180.146 mo
306.534 180.146 306.321 179.97 306.282 179.724 cv
306.239 179.451 306.426 179.195 306.698 179.152 cv
308.051 178.939 308.465 178.957 308.535 178.963 cv
308.81 178.987 309.014 179.229 308.989 179.505 cv
308.966 179.776 308.727 179.975 308.457 179.96 cv
308.427 179.955 308.064 179.948 306.854 180.139 cv
306.828 180.144 306.802 180.146 306.775 180.146 cv
cp
f
309.389 191.569 mo
309.175 191.569 308.978 191.432 308.911 191.217 cv
307.626 187.054 309.77 184.058 309.861 183.933 cv
310.023 183.712 310.335 183.662 310.559 183.824 cv
310.781 183.986 310.83 184.299 310.669 184.522 cv
310.649 184.549 308.734 187.255 309.866 190.922 cv
309.948 191.186 309.8 191.466 309.536 191.547 cv
309.487 191.562 309.438 191.569 309.389 191.569 cv
cp
f
306.871 185.08 mo
306.829 185.08 306.787 185.075 306.744 185.064 cv
306.478 184.994 306.317 184.72 306.388 184.453 cv
307.007 182.091 li
307.076 181.823 307.348 181.666 307.617 181.734 cv
307.884 181.804 308.044 182.078 307.974 182.345 cv
307.354 184.707 li
307.296 184.932 307.093 185.08 306.871 185.08 cv
cp
f
313.372 185.143 mo
313.33 185.143 313.288 185.137 313.245 185.126 cv
312.979 185.056 312.818 184.783 312.889 184.516 cv
313.508 182.154 li
313.578 181.887 313.848 181.73 314.118 181.797 cv
314.385 181.867 314.545 182.141 314.475 182.408 cv
313.855 184.77 li
313.797 184.994 313.594 185.143 313.372 185.143 cv
cp
f
307.038 178.02 mo
307.038 178.02 308.133 175.944 310.694 175.901 cv
313.256 175.858 314.77 177.647 314.77 177.647 cv
314.77 177.647 313.689 181.973 317.195 184.23 cv
320.702 186.488 323.392 185.82 323.392 185.82 cv
325.909 184.895 li
327.727 181.184 li
320.339 173.377 li
310.827 168.477 li
306.049 172.902 li
307.038 178.02 li
cp
f
311.364 193.969 mo
311.241 193.969 311.163 193.963 311.146 193.961 cv
310.87 193.938 310.667 193.696 310.69 193.42 cv
310.715 193.146 310.979 192.94 311.229 192.965 cv
311.326 192.975 313.282 193.099 314.096 191.315 cv
314.211 191.064 314.508 190.954 314.759 191.068 cv
315.01 191.183 315.12 191.479 315.006 191.73 cv
314.064 193.791 312.037 193.969 311.364 193.969 cv
cp
f
310.047 203.573 mo
310.047 203.573 307.929 205.819 306.667 209.962 cv
305.951 212.312 306.126 215.78 306.62 215.784 cv
307.113 215.788 310.811 210.066 313.17 209.718 cv
315.529 209.369 317.503 216.22 318.51 216.46 cv
319.518 216.7 323.434 214.004 324.823 210.102 cv
326.213 206.198 323.72 203.683 323.72 203.683 cv
323.72 203.683 311.544 212.924 310.047 203.573 cv
cp
.968627 .701961 .411765 rgb
f
303.384 245.616 mo
299.784 244.586 296.364 243.136 293.184 241.315 cv
288.793 238.815 284.844 235.616 281.504 231.876 cv
281.304 231.656 281.114 231.436 280.924 231.216 cv
281.364 229.866 281.844 228.516 282.374 227.206 cv
287.184 215.226 292.634 210.156 292.634 210.156 cv
303.384 245.616 li
cp
.407843 .462745 .666667 rgb
f
353.104 229.366 mo
351.104 231.946 348.844 234.306 346.354 236.406 cv
346.283 236.466 346.214 236.526 346.144 236.576 cv
343.124 239.105 339.783 241.256 336.184 242.966 cv
340.874 209.376 li
340.874 209.376 347.454 214.446 353.104 229.366 cv
cp
f
292.536 239.424 mo
292.519 239.424 292.501 239.423 292.484 239.421 cv
292.209 239.393 292.01 239.147 292.038 238.873 cv
292.989 229.622 li
293.018 229.347 293.279 229.146 293.537 229.176 cv
293.813 229.204 294.012 229.449 293.983 229.724 cv
293.032 238.975 li
293.006 239.232 292.789 239.424 292.536 239.424 cv
cp
.968627 .701961 .411765 rgb
f
239.39 79.0977 mo
239.39 85.3574 238.16 91.3276 235.92 96.7773 cv
234.59 100.007 232.91 103.058 230.92 105.877 cv
230.46 106.547 229.97 107.197 229.47 107.837 cv
229.42 107.897 229.38 107.958 229.33 108.007 cv
229.29 108.058 229.25 108.107 229.2 108.158 cv
227.49 110.308 225.6 112.308 223.53 114.118 cv
223.04 114.558 222.53 114.978 222.02 115.387 cv
220.24 116.828 218.36 118.127 216.37 119.288 cv
214.98 120.118 213.53 120.868 212.05 121.547 cv
211.6 121.757 211.14 121.958 210.67 122.147 cv
208.94 122.877 207.15 123.498 205.31 124.007 cv
202.66 124.748 199.92 125.257 197.1 125.507 cv
196.54 125.567 195.98 125.607 195.41 125.637 cv
194.54 125.688 193.66 125.717 192.77 125.717 cv
191.84 125.717 190.92 125.688 190.01 125.637 cv
189.3 125.598 188.59 125.538 187.88 125.467 cv
186.83 125.357 185.79 125.208 184.76 125.027 cv
184.48 124.978 184.21 124.928 183.94 124.877 cv
183.54 124.797 183.15 124.717 182.75 124.627 cv
182.3 124.527 181.84 124.417 181.39 124.308 cv
181.18 124.257 180.96 124.208 180.75 124.147 cv
180.31 124.027 179.87 123.908 179.43 123.777 cv
179.39 123.768 179.36 123.757 179.32 123.748 cv
178.04 123.357 176.76 122.917 175.53 122.417 cv
175.49 122.397 175.45 122.387 175.41 122.368 cv
174.53 122.018 173.66 121.637 172.81 121.228 cv
172.24 120.967 171.68 120.688 171.13 120.387 cv
170.36 119.998 169.6 119.567 168.86 119.118 cv
168.55 118.938 168.24 118.748 167.95 118.547 cv
167.88 118.518 167.81 118.467 167.75 118.428 cv
167.52 118.297 167.3 118.147 167.07 117.998 cv
167.05 117.987 167.04 117.978 167.02 117.958 cv
166.5 117.618 165.97 117.257 165.46 116.887 cv
165.19 116.688 164.92 116.498 164.66 116.297 cv
163.1 115.118 161.62 113.848 160.22 112.478 cv
160.16 112.428 160.11 112.368 160.05 112.317 cv
159.89 112.158 159.73 111.987 159.58 111.828 cv
159.43 111.667 159.27 111.518 159.13 111.357 cv
156.26 108.387 153.8 105.047 151.82 101.408 cv
151.44 100.717 151.08 100.007 150.74 99.2876 cv
150.45 98.7075 150.19 98.1177 149.93 97.5176 cv
147.49 91.8677 146.14 85.6372 146.14 79.0977 cv
146.14 53.3477 167.02 32.4775 192.77 32.4775 cv
218.52 32.4775 239.39 53.3477 239.39 79.0977 cv
cp
.909804 .882353 .937255 rgb
f
229.2 108.158 mo
227.49 110.308 225.6 112.308 223.53 114.118 cv
223.04 114.558 222.53 114.978 222.02 115.387 cv
220.24 116.828 218.36 118.127 216.37 119.288 cv
214.98 120.118 213.53 120.868 212.05 121.547 cv
211.6 121.757 211.14 121.958 210.67 122.147 cv
208.08 104.137 215.49 91.4473 215.49 91.4473 cv
215.49 91.4473 222.04 97.6372 229.2 108.158 cv
cp
.572549 .705882 .917647 rgb
f
193.861 72.6987 mo
182.941 72.6987 li
172.094 101.835 li
213.777 98.7358 li
213.777 98.7358 216.25 85.7197 209.436 73.478 cv
202.621 61.2363 193.861 72.6987 193.861 72.6987 cv
cp
0 0 0 rgb
f
192.52 61.4873 mo
179.65 94.9077 li
179.65 94.9077 176.82 116.167 172.81 121.228 cv
172.24 120.967 171.68 120.688 171.13 120.387 cv
170.36 119.998 169.6 119.567 168.86 119.118 cv
168.55 118.938 168.24 118.748 167.95 118.547 cv
167.88 118.518 167.81 118.467 167.75 118.428 cv
167.52 118.297 167.3 118.147 167.07 117.998 cv
167.05 117.987 167.04 117.978 167.02 117.958 cv
166.5 117.618 165.97 117.257 165.46 116.887 cv
165.19 116.688 164.92 116.498 164.66 116.297 cv
163.1 115.118 161.62 113.848 160.22 112.478 cv
160 112.268 159.78 112.047 159.58 111.828 cv
159.43 111.667 159.27 111.518 159.13 111.357 cv
156.26 108.387 153.8 105.047 151.82 101.408 cv
151.44 100.717 151.08 100.007 150.74 99.2876 cv
151.71 96.8477 153.14 94.8574 154.88 93.7773 cv
161.75 89.5273 164.96 93.2676 167.85 89.7773 cv
171.7 85.1475 167.27 82.0273 169.33 75.8076 cv
171.44 69.4575 175.97 69.5874 180.13 67.0176 cv
183.97 64.6577 183.65 59.3076 184.08 57.1675 cv
184.31 56.0073 184.49 56.5176 184.83 56.7373 cv
192.52 61.4873 li
cp
f
184.274 60.3931 mo
183.827 59.4023 183.655 58.3027 183.822 57.2285 cv
184.001 56.0815 184.351 54.8521 184.605 54.1768 cv
185.863 50.8433 189.437 44.6743 198.501 45.5854 cv
210.833 46.8247 209.436 68.9639 209.436 68.9639 cv
187.383 67.2793 li
184.274 60.3931 li
cp
f
222.02 115.387 mo
220.24 116.828 218.36 118.127 216.37 119.288 cv
214.98 120.118 213.53 120.868 212.05 121.547 cv
209.89 122.538 207.64 123.357 205.31 124.007 cv
202.66 124.748 199.92 125.257 197.1 125.507 cv
196.54 125.567 195.98 125.607 195.41 125.637 cv
194.54 125.688 193.66 125.717 192.77 125.717 cv
191.84 125.717 190.92 125.688 190.01 125.637 cv
189.3 125.598 188.59 125.538 187.88 125.467 cv
186.83 125.357 185.79 125.208 184.76 125.027 cv
184.08 124.908 183.42 124.777 182.75 124.627 cv
182.3 124.527 181.84 124.417 181.39 124.308 cv
181.18 124.257 180.96 124.208 180.75 124.147 cv
180.31 124.027 179.87 123.908 179.43 123.777 cv
178.11 123.387 176.8 122.928 175.53 122.417 cv
175.49 122.397 175.45 122.387 175.41 122.368 cv
173.94 121.777 172.51 121.127 171.13 120.387 cv
170.36 119.998 169.6 119.567 168.86 119.118 cv
168.55 118.938 168.24 118.748 167.95 118.547 cv
168.88 108.938 170.91 100.257 174.84 95.3374 cv
178.52 90.7476 182.62 87.8076 186.46 85.9277 cv
194.44 82.0273 201.4 82.6777 201.4 82.6777 cv
213.2 84.1274 219.63 96.1973 221.14 103.928 cv
221.48 105.678 221.77 109.897 222.02 115.387 cv
cp
.968627 .701961 .411765 rgb
f
205.168 88.9736 mo
205.168 88.9736 204.48 90.3125 200.445 89.9404 cv
194.234 89.3638 192.245 86.5933 192.245 86.5933 cv
191.966 75.9941 li
193.862 76.3662 li
205.112 78.542 li
205.131 83.7114 li
205.168 88.9736 li
cp
.956863 .517647 .384314 rgb
f
205.131 83.7114 mo
202.174 83.4136 196.503 82.1865 194.197 77.3701 cv
194.011 76.9985 193.899 76.645 193.862 76.3662 cv
205.112 78.542 li
205.131 83.7114 li
cp
0 0 0 rgb
f
206.871 54.3379 mo
206.871 54.3379 212.764 67.4814 210.757 74.9165 cv
208.75 82.3516 201.983 81.2495 197.928 79.8545 cv
193.872 78.46 191.972 75.999 191.972 75.999 cv
191.972 75.999 188.208 77.3154 185.649 73.8286 cv
183.09 70.3413 184.606 66.2944 186.753 65.3496 cv
188.9 64.4048 191.479 65.937 191.479 65.937 cv
189.433 62.1206 li
189.433 62.1206 197.7 42.5459 206.871 54.3379 cv
cp
.956863 .517647 .384314 rgb
f
208.811 65.5034 mo
208.567 65.5034 208.354 65.3247 208.317 65.0762 cv
207.956 62.623 li
207.935 62.4805 207.977 62.3354 208.07 62.2256 cv
209.055 61.0713 li
209.236 60.8613 209.551 60.8364 209.76 61.0156 cv
209.97 61.1948 209.995 61.5103 209.816 61.7207 cv
208.979 62.7021 li
209.306 64.9307 li
209.346 65.2036 209.158 65.458 208.884 65.498 cv
208.86 65.502 208.835 65.5034 208.811 65.5034 cv
cp
0 0 0 rgb
f
199.218 61.3755 mo
199.141 61.3755 199.063 61.3579 198.99 61.3203 cv
198.745 61.1938 198.648 60.8921 198.774 60.647 cv
199.697 58.854 201.958 59.3203 202.054 59.3408 cv
202.323 59.3989 202.494 59.6641 202.437 59.9336 cv
202.379 60.2036 202.117 60.3735 201.844 60.3188 cv
201.779 60.3042 200.233 59.9956 199.664 61.104 cv
199.575 61.2764 199.4 61.3755 199.218 61.3755 cv
cp
f
208.631 59.856 mo
208.472 59.856 208.315 59.7798 208.218 59.6387 cv
208.124 59.502 207.779 59.1118 207.449 59.1118 cv
207.177 59.1123 206.925 59.3984 206.761 59.6382 cv
206.605 59.8657 206.295 59.9248 206.066 59.7686 cv
205.838 59.6128 205.78 59.3013 205.936 59.0737 cv
206.372 58.4351 206.881 58.1118 207.449 58.1118 cv
208.365 58.1133 208.978 58.9766 209.044 59.0752 cv
209.2 59.3037 209.14 59.6147 208.912 59.7695 cv
208.826 59.8281 208.728 59.856 208.631 59.856 cv
cp
f
191.479 65.937 mo
191.479 65.937 197.254 66.0918 201.197 59.7754 cv
205.14 53.459 204.679 51.8555 204.679 51.8555 cv
208.607 58.3765 li
208.607 58.3765 209.486 53.855 207.678 50.9731 cv
205.869 48.0903 203.992 48.688 203.992 48.688 cv
191.477 51.8149 li
188.181 61.8462 li
191.479 65.937 li
cp
f
201.51 66.0898 mo
201.262 66.0898 201.046 65.9058 201.014 65.6528 cv
200.701 63.1934 li
200.681 63.0371 200.736 62.8799 200.85 62.7705 cv
202.118 61.5479 li
202.317 61.3564 202.634 61.3628 202.825 61.5605 cv
203.017 61.7598 203.011 62.0762 202.813 62.2676 cv
201.725 63.3164 li
202.006 65.5269 li
202.041 65.8008 201.847 66.0508 201.573 66.0859 cv
201.552 66.0884 201.531 66.0898 201.51 66.0898 cv
cp
f
207.49 70.3623 mo
207.217 70.3623 206.994 70.1431 206.99 69.8696 cv
206.954 67.3184 205.44 63.9902 205.425 63.957 cv
205.31 63.7061 205.42 63.4092 205.671 63.2939 cv
205.924 63.1792 206.219 63.2896 206.334 63.54 cv
206.4 63.6841 207.951 67.0952 207.99 69.855 cv
207.994 70.1313 207.773 70.3584 207.497 70.3623 cv
207.495 70.3623 207.492 70.3623 207.49 70.3623 cv
cp
f
202.878 73.3657 mo
203.214 73.8501 203.69 74.3301 204.242 74.3696 cv
204.794 74.4067 205.247 74.1211 205.555 73.8247 cv
202.878 73.3657 li
cp
204.353 75.3735 mo
204.293 75.3735 204.232 75.3711 204.171 75.3667 cv
202.43 75.2422 201.521 72.978 201.483 72.8818 cv
201.417 72.7139 201.446 72.5229 201.561 72.3833 cv
201.674 72.2427 201.852 72.1729 202.033 72.2061 cv
206.549 72.981 li
206.708 73.0083 206.844 73.1104 206.915 73.2554 cv
206.985 73.4004 206.981 73.5703 206.904 73.7119 cv
206.866 73.7822 205.984 75.3735 204.353 75.3735 cv
cp
f
190.999 71.4985 mo
190.868 71.4985 190.738 71.4478 190.64 71.3472 cv
187.024 67.6279 li
186.832 67.4297 186.836 67.1133 187.034 66.9209 cv
187.232 66.7275 187.549 66.7334 187.741 66.9307 cv
191.357 70.6499 li
191.549 70.8481 191.545 71.1646 191.347 71.3569 cv
191.25 71.4517 191.124 71.4985 190.999 71.4985 cv
cp
f
186.66 71.4985 mo
186.453 71.4985 186.26 71.3701 186.188 71.1641 cv
186.096 70.9038 186.233 70.6182 186.494 70.5269 cv
189.728 69.3906 li
189.988 69.2983 190.273 69.436 190.365 69.6968 cv
190.457 69.957 190.32 70.2427 190.059 70.334 cv
186.825 71.4702 li
186.771 71.4897 186.715 71.4985 186.66 71.4985 cv
cp
f
202.006 90.5288 mo
195.602 90.5288 192.071 87.1255 191.893 86.9487 cv
191.696 86.7549 191.695 86.439 191.888 86.2427 cv
192.082 86.0459 192.398 86.0444 192.595 86.2373 cv
192.646 86.2861 197.705 91.125 206.565 88.9546 cv
206.833 88.8862 207.105 89.0527 207.17 89.3208 cv
207.236 89.5889 207.072 89.8599 206.804 89.9253 cv
205.061 90.3535 203.459 90.5288 202.006 90.5288 cv
cp
1 1 1 rgb
f
189.19 115.538 mo
187.95 119.428 186.08 122.478 183.94 124.877 cv
183.54 124.797 183.15 124.717 182.75 124.627 cv
182.3 124.527 181.84 124.417 181.39 124.308 cv
181.18 124.257 180.96 124.208 180.75 124.147 cv
180.31 124.027 179.87 123.908 179.43 123.777 cv
179.39 123.768 179.36 123.757 179.32 123.748 cv
178.04 123.357 176.76 122.917 175.53 122.417 cv
175.49 122.397 175.45 122.387 175.41 122.368 cv
174.53 122.018 173.66 121.637 172.81 121.228 cv
172.24 120.967 171.68 120.688 171.13 120.387 cv
170.36 119.998 169.6 119.567 168.86 119.118 cv
168.55 118.938 168.24 118.748 167.95 118.547 cv
168.88 108.938 170.91 100.257 174.84 95.3374 cv
178.52 90.7476 182.62 87.8076 186.46 85.9277 cv
188.89 91.3076 193.12 103.277 189.19 115.538 cv
cp
.572549 .705882 .917647 rgb
f
182.79 88.0273 mo
179.32 123.748 li
178.04 123.357 176.76 122.917 175.53 122.417 cv
175.49 122.397 175.45 122.387 175.41 122.368 cv
174.53 122.018 173.66 121.637 172.81 121.228 cv
172.24 120.967 171.68 120.688 171.13 120.387 cv
170.36 119.998 169.6 119.567 168.86 119.118 cv
168.55 118.938 168.24 118.748 167.95 118.547 cv
167.88 118.518 167.81 118.467 167.75 118.428 cv
167.52 118.297 167.3 118.147 167.07 117.998 cv
167.05 117.987 167.04 117.978 167.02 117.958 cv
166.5 117.618 165.97 117.257 165.46 116.887 cv
165.19 116.688 164.92 116.498 164.66 116.297 cv
163.1 115.118 161.62 113.848 160.22 112.478 cv
160.16 112.428 160.11 112.368 160.05 112.317 cv
168.25 97.0474 182.79 88.0273 182.79 88.0273 cv
cp
f
487.23 200.806 mo
487.23 211.786 483.431 221.886 477.061 229.846 cv
476.94 230.006 476.811 230.166 476.681 230.326 cv
476.4 230.676 476.101 231.026 475.801 231.376 cv
471.79 235.986 466.891 239.815 461.34 242.565 cv
461.19 242.636 461.04 242.716 460.891 242.786 cv
460.28 243.076 459.67 243.366 459.04 243.626 cv
458.38 243.906 457.721 244.176 457.04 244.436 cv
451.94 246.376 446.4 247.426 440.61 247.426 cv
433.33 247.426 426.431 245.756 420.29 242.766 cv
420.17 242.706 420.04 242.646 419.92 242.586 cv
419.021 242.146 418.141 241.676 417.28 241.176 cv
417.16 241.105 417.04 241.036 416.931 240.966 cv
412.61 238.426 408.74 235.206 405.471 231.446 cv
405.32 231.276 405.17 231.105 405.04 230.936 cv
403.471 229.116 402.061 227.166 400.811 225.105 cv
396.49 218.026 393.99 209.706 393.99 200.806 cv
393.99 175.056 414.86 154.186 440.61 154.186 cv
466.36 154.186 487.23 175.056 487.23 200.806 cv
cp
.909804 .882353 .937255 rgb
f
443.705 168.914 mo
443.705 168.914 452.669 167.572 459.093 171.599 cv
465.517 175.625 462.608 186.343 462.608 186.343 cv
462.608 186.343 472.899 194.401 473.458 203.246 cv
474.018 212.091 465.964 215.335 465.964 215.335 cv
444.743 212.091 li
443.705 168.914 li
cp
0 0 0 rgb
f
423.23 207.105 mo
419.92 242.586 li
419.021 242.146 418.141 241.676 417.28 241.176 cv
417.16 241.105 417.04 241.036 416.931 240.966 cv
412.61 238.426 408.74 235.206 405.471 231.446 cv
405.32 231.276 405.17 231.105 405.04 230.936 cv
406.37 227.086 408.101 223.176 410.431 219.886 cv
418.23 208.855 423.23 207.105 423.23 207.105 cv
cp
.968627 .701961 .411765 rgb
f
461.34 242.565 mo
461.19 242.636 461.04 242.716 460.891 242.786 cv
460.28 243.076 459.67 243.366 459.04 243.626 cv
458.38 243.906 457.721 244.176 457.04 244.436 cv
451.94 246.376 446.4 247.426 440.61 247.426 cv
433.33 247.426 426.431 245.756 420.29 242.766 cv
419.271 242.276 418.261 241.746 417.28 241.176 cv
417.16 241.105 417.04 241.036 416.931 240.966 cv
423.23 207.105 li
423.23 207.105 433.721 202.186 441.931 202.436 cv
443.63 202.476 445.32 202.726 446.98 203.105 cv
453.33 204.496 458.94 207.926 460.57 211.286 cv
461.311 212.796 461.45 226.046 461.34 242.565 cv
cp
f
477.061 229.846 mo
476.94 230.006 476.811 230.166 476.681 230.326 cv
476.4 230.676 476.101 231.026 475.801 231.376 cv
471.681 236.116 466.62 240.026 460.891 242.786 cv
460.28 243.076 459.67 243.366 459.04 243.626 cv
458.38 243.906 457.721 244.176 457.04 244.436 cv
447.811 244.436 li
444.9 227.855 li
446.755 202.427 li
446.755 202.427 466.011 203.016 477.061 229.846 cv
cp
f
446.802 203.661 mo
446.802 203.661 443.099 209.099 438.773 212.37 cv
434.448 215.643 432.473 216.028 432.473 216.028 cv
432.748 205.478 li
446.802 203.661 li
cp
.572549 .705882 .917647 rgb
f
446.589 192.792 mo
446.769 203.246 li
446.769 203.246 444.936 206.284 438.828 206.886 cv
434.279 207.335 432.66 206.333 432.66 206.333 cv
433.205 201.027 li
433.742 195.853 li
444.743 193.234 li
446.589 192.792 li
cp
.956863 .517647 .384314 rgb
f
444.743 193.234 mo
444.722 193.52 444.619 193.858 444.457 194.248 cv
442.207 199.51 435.832 200.746 433.205 201.027 cv
433.742 195.853 li
444.743 193.234 li
cp
0 0 0 rgb
f
431 172.065 mo
431 172.065 425.739 185.267 428.027 192.512 cv
430.316 199.757 436.94 198.388 440.88 196.843 cv
444.82 195.299 446.59 192.794 446.59 192.794 cv
446.59 192.794 450.355 193.935 452.732 190.391 cv
455.109 186.847 453.445 182.921 451.29 182.08 cv
449.134 181.238 446.656 182.855 446.656 182.855 cv
448.514 179.008 li
448.514 179.008 439.548 160.059 431 172.065 cv
cp
.956863 .517647 .384314 rgb
f
447.132 188.577 mo
446.979 188.577 446.829 188.507 446.731 188.375 cv
446.566 188.154 446.611 187.841 446.833 187.676 cv
451.485 184.208 li
451.706 184.042 452.021 184.087 452.185 184.31 cv
452.35 184.531 452.305 184.844 452.083 185.009 cv
447.431 188.478 li
447.341 188.544 447.236 188.577 447.132 188.577 cv
cp
0 0 0 rgb
f
451.424 188.444 mo
451.386 188.444 451.347 188.44 451.308 188.431 cv
448.192 187.686 li
447.924 187.622 447.758 187.352 447.822 187.083 cv
447.886 186.815 448.151 186.647 448.425 186.713 cv
451.54 187.458 li
451.809 187.522 451.975 187.792 451.91 188.061 cv
451.855 188.29 451.65 188.444 451.424 188.444 cv
cp
f
439.845 177.511 mo
439.698 177.511 439.553 177.447 439.454 177.323 cv
438.151 175.694 437.312 175.972 437.3 175.976 cv
437.052 176.067 436.759 175.946 436.658 175.698 cv
436.558 175.45 436.658 175.171 436.902 175.059 cv
437.052 174.989 438.434 174.446 440.235 176.699 cv
440.407 176.915 440.373 177.229 440.157 177.402 cv
440.064 177.476 439.954 177.511 439.845 177.511 cv
cp
f
429.696 177.195 mo
429.556 177.195 429.415 177.136 429.316 177.02 cv
429.137 176.81 429.161 176.495 429.371 176.315 cv
430.789 175.102 431.949 174.881 431.998 174.872 cv
432.267 174.824 432.529 175.003 432.579 175.275 cv
432.628 175.546 432.449 175.805 432.179 175.856 cv
432.156 175.86 431.208 176.06 430.021 177.075 cv
429.927 177.155 429.812 177.195 429.696 177.195 cv
cp
f
431.627 187.11 mo
431.385 187.11 431.172 186.933 431.134 186.686 cv
430.568 183.012 432.167 180.375 432.235 180.265 cv
432.38 180.03 432.687 179.959 432.922 180.103 cv
433.157 180.247 433.229 180.555 433.086 180.79 cv
433.071 180.814 431.615 183.239 432.122 186.534 cv
432.164 186.807 431.977 187.062 431.704 187.104 cv
431.679 187.108 431.652 187.11 431.627 187.11 cv
cp
f
429.829 182.217 mo
429.789 182.217 429.747 182.212 429.706 182.201 cv
429.438 182.133 429.276 181.861 429.345 181.593 cv
429.908 179.377 li
429.26 178.219 li
429.125 177.978 429.211 177.673 429.452 177.538 cv
429.691 177.404 429.997 177.489 430.133 177.73 cv
430.879 179.063 li
430.941 179.175 430.959 179.307 430.927 179.431 cv
430.313 181.84 li
430.256 182.066 430.053 182.217 429.829 182.217 cv
cp
f
437.422 182.232 mo
437.382 182.232 437.34 182.227 437.299 182.216 cv
437.031 182.148 436.869 181.876 436.938 181.608 cv
437.489 179.439 li
436.577 178.285 li
436.406 178.068 436.443 177.753 436.66 177.582 cv
436.876 177.411 437.19 177.447 437.362 177.665 cv
438.428 179.013 li
438.524 179.135 438.559 179.296 438.52 179.447 cv
437.906 181.855 li
437.849 182.082 437.646 182.232 437.422 182.232 cv
cp
f
446.656 183.164 mo
444.743 185.693 li
444.743 185.693 440.662 180.035 440.673 176.881 cv
440.685 173.728 440.673 172.63 440.673 172.63 cv
440.673 172.63 436.574 174.126 433.205 174.026 cv
429.834 173.927 427.709 172.132 427.933 170.537 cv
428.156 168.941 430.147 164.055 440.673 165.651 cv
451.199 167.246 451.396 179.538 446.656 183.164 cv
cp
f
427.45 217.758 mo
427.191 217.758 426.973 217.558 426.953 217.295 cv
426.933 217.02 427.139 216.78 427.414 216.759 cv
427.521 216.751 438.16 215.805 446.561 202.834 cv
446.712 202.601 447.022 202.539 447.252 202.686 cv
447.484 202.836 447.55 203.146 447.4 203.377 cv
438.713 216.791 427.941 217.724 427.487 217.757 cv
427.476 217.758 427.463 217.758 427.45 217.758 cv
cp
1 1 1 rgb
f
432.489 215.883 mo
432.2 215.875 431.982 215.646 431.989 215.37 cv
432.285 204.036 li
432.292 203.761 432.512 203.545 432.798 203.549 cv
433.074 203.557 433.292 203.786 433.285 204.062 cv
432.989 215.396 li
432.982 215.667 432.76 215.883 432.489 215.883 cv
cp
f
433.119 190.762 mo
432.902 190.762 432.696 190.72 432.512 190.62 cv
432.269 190.49 432.177 190.187 432.308 189.943 cv
432.438 189.699 432.742 189.609 432.984 189.739 cv
433.28 189.899 434.317 189.384 435.044 188.818 cv
435.262 188.649 435.575 188.686 435.746 188.904 cv
435.915 189.122 435.877 189.436 435.659 189.606 cv
435.266 189.914 434.091 190.762 433.119 190.762 cv
cp
0 0 0 rgb
f
394.044 79.3579 mo
394.044 88.2583 396.544 96.5781 400.864 103.658 cv
402.854 106.918 405.225 109.898 407.935 112.558 cv
408.954 113.568 410.024 114.538 411.135 115.448 cv
412.904 116.898 414.765 118.208 416.734 119.388 cv
417.064 119.588 417.404 119.778 417.744 119.978 cv
420.744 121.668 423.944 123.038 427.314 124.038 cv
431.534 125.298 436.015 125.978 440.664 125.978 cv
450.404 125.978 459.444 122.988 466.925 117.878 cv
468.524 116.788 470.055 115.598 471.494 114.318 cv
473.044 112.958 474.505 111.488 475.854 109.928 cv
476.185 109.548 476.505 109.168 476.824 108.778 cv
483.364 100.758 487.284 90.5083 487.284 79.3579 cv
487.284 53.6079 466.414 32.7383 440.664 32.7383 cv
414.914 32.7383 394.044 53.6079 394.044 79.3579 cv
cp
.909804 .882353 .937255 rgb
f
447.792 67.6177 mo
447.792 67.6177 469.032 53.6152 461.663 45.5659 cv
454.295 37.5161 445.037 57.5786 445.037 57.5786 cv
447.792 67.6177 li
cp
0 0 0 rgb
f
407.935 112.558 mo
408.954 113.568 410.024 114.538 411.135 115.448 cv
415.845 119.308 421.324 122.258 427.314 124.038 cv
427.994 104.528 423.309 92.8711 423.309 92.8711 cv
423.309 92.8711 411.135 100.761 407.935 112.558 cv
cp
.407843 .462745 .666667 rgb
f
434.521 52.9248 mo
434.521 52.9248 445.685 45.668 452.454 54.7144 cv
459.026 63.4976 452.604 73.4604 452.604 73.4604 cv
437.414 61.6187 li
434.521 52.9248 li
cp
0 0 0 rgb
f
411.135 115.448 mo
419.175 122.028 429.454 125.978 440.664 125.978 cv
452.484 125.978 463.284 121.578 471.494 114.318 cv
471.814 109.418 471.645 105.388 470.765 103.068 cv
466.725 92.458 447.924 88.5605 447.924 88.5605 cv
447.924 88.5605 434.998 88.5605 429.791 90.0229 cv
425.414 91.2524 417.515 95.228 413.944 102.308 cv
412.114 105.928 411.414 110.918 411.135 115.448 cv
cp
.407843 .462745 .666667 rgb
f
448.242 78.9453 mo
448.718 89.3828 li
448.718 89.3828 446.973 92.4692 440.89 93.2441 cv
436.357 93.8208 434.713 92.8657 434.713 92.8657 cv
435.105 87.5503 li
435.496 82.3667 li
446.411 79.4385 li
448.242 78.9453 li
cp
.956863 .517647 .384314 rgb
f
446.411 79.4385 mo
446.397 79.7246 446.305 80.0659 446.153 80.4595 cv
444.056 85.7798 437.722 87.1953 435.105 87.5503 cv
435.496 82.3667 li
446.411 79.4385 li
cp
0 0 0 rgb
f
432.084 58.6816 mo
432.084 58.6816 427.202 72.0181 429.693 79.1904 cv
432.185 86.3628 438.763 84.8076 442.654 83.1538 cv
446.547 81.5 448.244 78.9473 448.244 78.9473 cv
448.244 78.9473 452.037 79.98 454.311 76.3726 cv
456.585 72.7651 454.813 68.8906 452.635 68.1113 cv
450.457 67.3315 448.028 69.0176 448.028 69.0176 cv
449.774 65.1221 li
449.774 65.1221 440.282 46.4463 432.084 58.6816 cv
cp
.956863 .517647 .384314 rgb
f
448.028 69.0176 mo
448.028 69.0176 442.525 70.5391 438.208 64.6016 cv
433.891 58.6641 434.066 56.0879 434.066 56.0879 cv
430.658 63.3262 li
430.658 63.3262 429.479 58.3887 431.056 55.4282 cv
432.634 52.4678 434.521 52.9248 434.521 52.9248 cv
447.047 55.1289 li
450.986 64.7651 li
448.028 69.0176 li
cp
0 0 0 rgb
f
434.765 93.5059 mo
433.508 95.1558 432.628 96.9238 432.923 97.2485 cv
433.105 97.4492 433.351 97.5518 433.674 97.562 cv
435.188 97.6069 437.806 95.665 439.366 94.314 cv
437.966 94.2959 436.431 94.0576 434.765 93.5059 cv
cp
441.461 94.1733 mo
442.459 95.4634 445.021 98.3633 447.507 97.8442 cv
447.954 97.75 448.304 97.4966 448.574 97.0693 cv
449.602 95.4468 449.163 92.041 448.864 90.373 cv
447.726 91.5278 445.208 93.6138 441.461 94.1733 cv
cp
446.906 98.9063 mo
444.031 98.9063 441.445 95.8301 440.535 94.6138 cv
439.308 95.7383 435.924 98.6563 433.642 98.5615 cv
433.043 98.5425 432.552 98.3271 432.183 97.9214 cv
431.118 96.75 433.237 93.8145 434.197 92.6064 cv
434.33 92.4399 434.556 92.375 434.756 92.4458 cv
443.724 95.6157 448.553 89.2695 448.754 88.9985 cv
448.87 88.8418 449.067 88.7656 449.256 88.8057 cv
449.446 88.8447 449.598 88.9897 449.643 89.1787 cv
449.7 89.418 451.027 95.062 449.419 97.6035 cv
449.003 98.2617 448.429 98.6724 447.712 98.8228 cv
447.442 98.8799 447.173 98.9063 446.906 98.9063 cv
cp
.968627 .701961 .411765 rgb
f
466.925 117.878 mo
468.524 116.788 470.055 115.598 471.494 114.318 cv
473.044 112.958 474.505 111.488 475.854 109.928 cv
476.185 109.548 476.505 109.168 476.824 108.778 cv
468.989 96.6665 461.154 93.478 461.154 93.478 cv
461.154 93.478 468.925 108.408 466.925 117.878 cv
cp
.407843 .462745 .666667 rgb
f
416.734 119.388 mo
417.064 119.588 417.404 119.778 417.744 119.978 cv
417.614 118.268 417.645 116.278 417.965 114.048 cv
419.314 104.878 426.385 101.718 426.454 101.688 cv
426.694 101.588 426.814 101.298 426.704 101.058 cv
426.595 100.808 426.314 100.698 426.074 100.798 cv
425.755 100.938 418.435 104.208 417.015 113.908 cv
416.715 115.938 416.654 117.778 416.734 119.388 cv
cp
.968627 .701961 .411765 rgb
f
433.057 75.2349 mo
432.848 75.2349 432.652 75.1025 432.582 74.8931 cv
431.589 71.9199 433.629 68.832 433.716 68.7021 cv
433.87 68.4736 434.179 68.4111 434.409 68.5659 cv
434.638 68.7192 434.699 69.0298 434.546 69.2593 cv
434.527 69.2871 432.695 72.0742 433.531 74.5767 cv
433.618 74.8384 433.477 75.1216 433.215 75.209 cv
433.162 75.2266 433.109 75.2349 433.057 75.2349 cv
cp
0 0 0 rgb
f
448.86 75.2349 mo
448.741 75.2349 448.621 75.1924 448.525 75.106 cv
448.32 74.9209 448.304 74.605 448.489 74.3999 cv
452.17 70.3218 li
452.355 70.1172 452.671 70.1001 452.876 70.2856 cv
453.081 70.4707 453.098 70.7866 452.912 70.9917 cv
449.231 75.0698 li
449.133 75.1792 448.997 75.2349 448.86 75.2349 cv
cp
f
452.827 74.0757 mo
452.806 74.0757 452.784 74.0742 452.763 74.0718 cv
450.146 73.7349 li
449.872 73.6992 449.679 73.4487 449.714 73.1748 cv
449.749 72.9009 450.004 72.7095 450.273 72.7427 cv
452.89 73.0796 li
453.164 73.1152 453.357 73.3657 453.322 73.6396 cv
453.29 73.8916 453.074 74.0757 452.827 74.0757 cv
cp
f
430.657 63.8262 mo
430.424 63.8262 430.216 63.6621 430.168 63.4243 cv
430.113 63.1533 430.289 62.8901 430.561 62.8359 cv
432.455 62.457 li
432.713 62.4019 432.988 62.5776 433.043 62.8491 cv
433.098 63.1201 432.922 63.3833 432.65 63.4375 cv
430.756 63.8164 li
430.724 63.8232 430.69 63.8262 430.657 63.8262 cv
cp
f
440.383 65.2983 mo
440.311 65.2983 440.237 65.2827 440.168 65.25 cv
436.882 63.688 li
436.633 63.5693 436.526 63.271 436.646 63.0215 cv
436.764 62.772 437.063 62.6665 437.312 62.7847 cv
440.598 64.3467 li
440.847 64.4653 440.953 64.7637 440.834 65.0132 cv
440.749 65.1929 440.569 65.2983 440.383 65.2983 cv
cp
f
431.228 69.6338 mo
431.184 69.6338 431.138 69.6279 431.093 69.6152 cv
430.827 69.541 430.672 69.2651 430.746 68.999 cv
431.38 66.7324 li
430.762 66.0137 li
430.581 65.8042 430.605 65.4883 430.814 65.3086 cv
431.025 65.1284 431.341 65.1528 431.52 65.3613 cv
432.313 66.2832 li
432.422 66.4102 432.46 66.583 432.415 66.7441 cv
431.709 69.2686 li
431.647 69.4893 431.446 69.6338 431.228 69.6338 cv
cp
f
438.58 70.1309 mo
438.536 70.1309 438.49 70.125 438.445 70.1123 cv
438.18 70.0381 438.024 69.7617 438.099 69.4961 cv
438.731 67.2368 li
437.822 66.228 li
437.637 66.0229 437.653 65.7065 437.858 65.5215 cv
438.063 65.3364 438.379 65.3535 438.564 65.5581 cv
439.658 66.7715 li
439.773 66.8989 439.814 67.0762 439.769 67.2412 cv
439.062 69.7656 li
439 69.9863 438.799 70.1309 438.58 70.1309 cv
cp
f
434.696 78.6602 mo
434.351 78.6602 433.992 78.6138 433.624 78.5039 cv
433.359 78.4253 433.209 78.147 433.287 77.8823 cv
433.365 77.6182 433.642 77.4683 433.909 77.5459 cv
435.799 78.1094 437.532 76.3789 437.549 76.3613 cv
437.745 76.1655 438.06 76.1631 438.256 76.3569 cv
438.452 76.5503 438.455 76.8657 438.262 77.0625 cv
438.188 77.1387 436.667 78.6602 434.696 78.6602 cv
cp
f
363.028 321.333 mo
363.028 330.573 360.339 339.193 355.699 346.434 cv
355.049 347.443 354.369 348.434 353.639 349.394 cv
353.259 349.903 352.858 350.403 352.459 350.894 cv
352.329 351.063 352.199 351.224 352.059 351.383 cv
351.199 352.403 350.289 353.394 349.349 354.333 cv
347.829 355.854 346.199 357.273 344.469 358.563 cv
344.419 358.604 344.369 358.633 344.318 358.674 cv
343.959 358.953 343.589 359.213 343.219 359.474 cv
342.778 359.793 342.329 360.094 341.869 360.394 cv
341.769 360.463 341.669 360.523 341.559 360.583 cv
340.299 361.403 338.989 362.163 337.639 362.844 cv
337.329 363.003 337.019 363.163 336.699 363.313 cv
335.249 364.014 333.759 364.644 332.239 365.193 cv
330.219 365.924 328.139 366.523 325.999 366.963 cv
322.898 367.613 319.699 367.953 316.409 367.953 cv
315.759 367.953 315.099 367.943 314.449 367.913 cv
313.699 367.883 312.959 367.833 312.219 367.764 cv
312.169 367.764 312.129 367.753 312.079 367.753 cv
311.439 367.693 310.799 367.623 310.159 367.533 cv
309.419 367.434 308.689 367.313 307.959 367.174 cv
307.179 367.033 306.409 366.873 305.649 366.693 cv
303.429 366.174 301.279 365.493 299.199 364.653 cv
297.389 363.943 295.639 363.113 293.939 362.174 cv
293.899 362.153 293.869 362.133 293.829 362.113 cv
293.629 362.003 293.429 361.894 293.239 361.773 cv
292.929 361.604 292.619 361.424 292.319 361.233 cv
292.019 361.063 291.719 360.883 291.429 360.693 cv
290.879 360.354 290.349 359.993 289.819 359.623 cv
288.869 358.974 287.939 358.273 287.039 357.533 cv
286.929 357.453 286.829 357.373 286.719 357.283 cv
285.449 356.224 284.229 355.104 283.069 353.924 cv
282.739 353.594 282.419 353.253 282.109 352.913 cv
281.369 352.123 280.659 351.293 279.999 350.453 cv
279.949 350.394 279.899 350.333 279.849 350.273 cv
279.749 350.153 279.659 350.043 279.569 349.924 cv
279.549 349.903 279.539 349.883 279.529 349.863 cv
278.749 348.863 278.019 347.833 277.329 346.773 cv
272.559 339.453 269.779 330.724 269.779 321.333 cv
269.779 295.583 290.659 274.713 316.409 274.713 cv
342.159 274.713 363.028 295.583 363.028 321.333 cv
cp
.909804 .882353 .937255 rgb
f
336.562 332.921 mo
336.562 332.921 335.74 288.513 320.032 286.911 cv
304.325 285.311 302.464 296.349 302.464 296.349 cv
302.464 296.349 298.548 297.744 297.756 303.714 cv
296.963 309.685 296.592 333.503 296.592 333.503 cv
332.062 335.533 li
336.562 332.921 li
cp
0 0 0 rgb
f
353.639 349.394 mo
353.259 349.903 352.858 350.403 352.459 350.894 cv
352.329 351.063 352.199 351.224 352.059 351.383 cv
351.199 352.403 350.289 353.394 349.349 354.333 cv
347.829 355.854 346.199 357.273 344.469 358.563 cv
344.419 358.604 344.369 358.633 344.318 358.674 cv
343.959 358.953 343.589 359.213 343.219 359.474 cv
342.778 359.793 342.329 360.094 341.869 360.394 cv
341.769 360.463 341.669 360.523 341.559 360.583 cv
340.299 361.403 338.989 362.163 337.639 362.844 cv
337.329 363.003 337.019 363.163 336.699 363.313 cv
335.249 364.014 333.759 364.644 332.239 365.193 cv
330.219 365.924 328.139 366.523 325.999 366.963 cv
322.898 367.613 319.699 367.953 316.409 367.953 cv
315.759 367.953 315.099 367.943 314.449 367.913 cv
313.699 367.883 312.959 367.833 312.219 367.764 cv
312.169 367.764 312.129 367.753 312.079 367.753 cv
311.439 367.693 310.799 367.623 310.159 367.533 cv
309.419 367.434 308.689 367.313 307.959 367.174 cv
307.179 367.033 306.409 366.873 305.649 366.693 cv
303.429 366.174 301.279 365.493 299.199 364.653 cv
297.389 363.943 295.639 363.113 293.939 362.174 cv
293.899 362.153 293.869 362.133 293.829 362.113 cv
293.629 362.003 293.429 361.894 293.239 361.773 cv
292.929 361.604 292.619 361.424 292.319 361.233 cv
289.349 349.434 288.169 338.764 291.869 334.413 cv
292.049 334.174 292.279 333.953 292.509 333.753 cv
293.379 332.993 294.319 332.313 295.289 331.674 cv
295.329 331.653 295.359 331.633 295.389 331.613 cv
297.009 330.563 298.749 329.653 300.579 328.883 cv
300.599 328.863 300.629 328.854 300.639 328.854 cv
312.429 323.943 327.629 324.764 335.919 328.224 cv
340.879 330.283 348.479 340.713 353.639 349.394 cv
cp
.407843 .462745 .666667 rgb
f
309.16 317.012 mo
309.16 327.919 li
309.16 327.919 311.126 331.055 317.507 331.574 cv
322.261 331.96 323.766 329.52 323.766 329.52 cv
322.615 319.975 li
311.093 317.439 li
309.16 317.012 li
cp
.956863 .517647 .384314 rgb
f
309.177 316.347 mo
309.205 316.645 309.317 316.996 309.494 317.399 cv
311.934 322.848 320.522 325.115 323.269 325.361 cv
322.615 319.975 li
309.177 316.347 li
cp
0 0 0 rgb
f
343.818 354.993 mo
343.317 359.464 li
342.971 359.733 342.614 359.983 342.258 360.234 cv
342.864 354.887 li
343.616 348.162 340.272 339.829 340.234 339.742 cv
340.138 339.491 340.254 339.212 340.504 339.115 cv
340.755 339.01 341.024 339.135 341.13 339.376 cv
341.265 339.732 344.599 348.027 343.818 354.993 cv
cp
1 1 1 rgb
f
325.048 295.113 mo
325.048 295.113 330.772 308.788 328.515 316.387 cv
326.258 323.984 319.324 322.676 315.187 321.136 cv
311.05 319.596 309.159 317.015 309.159 317.015 cv
309.159 317.015 305.252 318.271 302.709 314.618 cv
300.167 310.964 301.831 306.839 304.065 305.923 cv
306.298 305.006 308.912 306.649 308.912 306.649 cv
306.905 302.67 li
306.905 302.67 315.917 282.743 325.048 295.113 cv
cp
.956863 .517647 .384314 rgb
f
324.162 312.43 mo
324.109 312.43 324.057 312.422 324.004 312.404 cv
323.742 312.316 323.601 312.033 323.688 311.771 cv
324.505 309.327 322.714 306.604 322.696 306.576 cv
322.543 306.347 322.604 306.036 322.833 305.883 cv
323.063 305.729 323.372 305.791 323.526 306.02 cv
323.612 306.146 325.61 309.173 324.637 312.088 cv
324.566 312.298 324.371 312.43 324.162 312.43 cv
cp
0 0 0 rgb
f
308.202 313.073 mo
308.065 313.073 307.93 313.018 307.831 312.908 cv
304.229 308.917 li
304.043 308.712 304.06 308.396 304.265 308.211 cv
304.469 308.026 304.786 308.042 304.971 308.247 cv
308.573 312.238 li
308.759 312.443 308.742 312.76 308.537 312.944 cv
308.441 313.03 308.321 313.073 308.202 313.073 cv
cp
f
304.319 311.939 mo
304.072 311.939 303.856 311.756 303.824 311.503 cv
303.789 311.229 303.982 310.979 304.257 310.943 cv
306.817 310.613 li
307.084 310.575 307.342 310.771 307.377 311.046 cv
307.412 311.319 307.219 311.57 306.944 311.605 cv
304.384 311.936 li
304.362 311.938 304.341 311.939 304.319 311.939 cv
cp
f
327.058 301.373 mo
327.024 301.373 326.992 301.37 326.959 301.363 cv
324.558 300.884 li
324.286 300.83 324.111 300.566 324.165 300.296 cv
324.22 300.023 324.485 299.851 324.753 299.903 cv
327.154 300.383 li
327.426 300.437 327.601 300.7 327.547 300.971 cv
327.499 301.209 327.291 301.373 327.058 301.373 cv
cp
f
316.992 302.705 mo
316.806 302.705 316.626 302.6 316.541 302.42 cv
316.422 302.17 316.528 301.872 316.777 301.754 cv
319.994 300.226 li
320.242 300.106 320.542 300.213 320.66 300.462 cv
320.779 300.712 320.673 301.01 320.424 301.128 cv
317.207 302.656 li
317.138 302.689 317.064 302.705 316.992 302.705 cv
cp
f
325.953 306.948 mo
325.734 306.948 325.533 306.804 325.472 306.583 cv
324.78 304.112 li
324.735 303.951 324.773 303.778 324.883 303.651 cv
325.659 302.749 li
325.839 302.54 326.154 302.517 326.364 302.696 cv
326.573 302.876 326.598 303.192 326.417 303.401 cv
325.815 304.101 li
326.435 306.313 li
326.509 306.579 326.354 306.855 326.088 306.93 cv
326.043 306.942 325.997 306.948 325.953 306.948 cv
cp
f
318.112 307.435 mo
317.894 307.435 317.692 307.29 317.631 307.069 cv
316.939 304.599 li
316.894 304.434 316.935 304.256 317.05 304.129 cv
318.121 302.941 li
318.307 302.737 318.622 302.722 318.827 302.905 cv
319.032 303.09 319.049 303.406 318.863 303.611 cv
317.977 304.595 li
318.594 306.8 li
318.668 307.065 318.513 307.342 318.247 307.416 cv
318.202 307.429 318.156 307.435 318.112 307.435 cv
cp
f
328.968 299.97 mo
328.968 299.97 325.199 299.218 322.557 299.316 cv
319.913 299.415 319.913 299.415 319.913 299.415 cv
318.841 295.165 li
318.854 299.802 li
318.854 299.802 316.988 300.122 315.141 301.088 cv
313.294 302.054 312.068 303.244 312.068 303.244 cv
310.316 299.668 li
311.054 304.17 li
308.912 306.649 li
305.68 303.622 li
307.75 297.348 li
307.75 297.348 312.627 290.537 313.004 290.456 cv
313.38 290.375 320.414 289.987 320.414 289.987 cv
320.414 289.987 326.466 292.353 326.612 292.552 cv
326.759 292.751 328.968 299.97 328.968 299.97 cv
cp
f
318.354 331.734 mo
315.581 331.734 312.126 330.986 308.421 328.425 cv
308.193 328.268 308.137 327.956 308.294 327.729 cv
308.45 327.5 308.762 327.444 308.989 327.603 cv
317.324 333.361 324.022 329.556 324.304 329.39 cv
324.544 329.248 324.847 329.328 324.988 329.566 cv
325.128 329.805 325.05 330.11 324.812 330.251 cv
324.769 330.276 322.226 331.734 318.354 331.734 cv
cp
1 1 1 rgb
f
310.159 367.533 mo
309.419 367.434 308.689 367.313 307.959 367.174 cv
307.179 367.033 306.409 366.873 305.649 366.693 cv
303.429 366.174 301.279 365.493 299.199 364.653 cv
297.389 363.943 295.639 363.113 293.939 362.174 cv
293.899 362.153 293.869 362.133 293.829 362.113 cv
293.629 362.003 293.429 361.894 293.239 361.773 cv
292.629 361.434 292.019 361.073 291.429 360.693 cv
290.879 360.354 290.349 359.993 289.819 359.623 cv
288.869 358.974 287.939 358.273 287.039 357.533 cv
286.929 357.453 286.829 357.373 286.719 357.283 cv
285.449 356.224 284.229 355.104 283.069 353.924 cv
282.739 353.594 282.419 353.253 282.109 352.913 cv
281.369 352.123 280.659 351.293 279.999 350.453 cv
279.949 350.394 279.899 350.333 279.849 350.273 cv
282.919 343.113 286.769 338.333 290.199 335.203 cv
291.419 334.083 292.569 333.193 293.619 332.453 cv
293.659 332.443 293.689 332.424 293.719 332.403 cv
296.459 330.523 298.489 329.804 298.909 329.674 cv
298.929 329.653 298.959 329.644 298.969 329.644 cv
298.989 329.644 310.159 367.533 310.159 367.533 cv
cp
.407843 .462745 .666667 rgb
f
321.873 315.306 mo
322.315 315.536 322.702 315.656 322.875 315.563 cv
323.012 315.489 323.144 315.411 323.267 315.331 cv
321.873 315.306 li
cp
322.733 316.589 mo
321.655 316.589 320.324 315.533 319.884 315.155 cv
319.724 315.018 319.667 314.795 319.741 314.598 cv
319.816 314.4 320.03 314.282 320.218 314.275 cv
324.664 314.356 li
324.863 314.36 325.041 314.481 325.117 314.666 cv
325.193 314.85 325.153 315.062 325.015 315.204 cv
324.986 315.233 324.307 315.929 323.348 316.444 cv
323.16 316.545 322.952 316.589 322.733 316.589 cv
cp
0 0 0 rgb
f
239.385 321.333 mo
239.385 325.474 238.845 329.493 237.825 333.313 cv
235.445 342.283 230.465 350.193 223.725 356.173 cv
223.285 356.573 222.825 356.963 222.365 357.344 cv
221.615 357.974 220.845 358.573 220.045 359.134 cv
219.065 359.854 218.055 360.523 217.015 361.153 cv
216.195 361.653 215.365 362.134 214.515 362.583 cv
214.275 362.713 214.035 362.833 213.785 362.953 cv
213.415 363.134 213.055 363.323 212.685 363.493 cv
206.645 366.354 199.885 367.953 192.765 367.953 cv
190.185 367.953 187.655 367.743 185.185 367.333 cv
183.415 367.054 181.685 366.663 179.985 366.184 cv
174.555 364.644 169.545 362.144 165.125 358.884 cv
164.955 358.764 164.785 358.644 164.625 358.514 cv
163.535 357.684 162.485 356.804 161.465 355.884 cv
159.755 354.344 158.155 352.663 156.695 350.884 cv
156.485 350.623 156.275 350.363 156.065 350.094 cv
155.785 349.733 155.505 349.373 155.245 349.003 cv
149.525 341.264 146.145 331.693 146.145 321.333 cv
146.145 295.583 167.015 274.713 192.765 274.713 cv
218.515 274.713 239.385 295.583 239.385 321.333 cv
cp
.909804 .882353 .937255 rgb
f
221.005 358.363 mo
220.685 358.623 220.365 358.884 220.045 359.134 cv
219.065 359.854 218.055 360.523 217.015 361.153 cv
216.195 361.653 215.365 362.134 214.515 362.583 cv
214.275 362.713 214.035 362.833 213.785 362.953 cv
213.415 363.134 213.055 363.323 212.685 363.493 cv
206.645 366.354 199.885 367.953 192.765 367.953 cv
190.185 367.953 187.655 367.743 185.185 367.333 cv
183.415 367.054 181.685 366.663 179.985 366.184 cv
174.555 364.644 169.545 362.144 165.125 358.884 cv
164.955 358.764 164.785 358.644 164.625 358.514 cv
163.535 357.684 162.485 356.804 161.465 355.884 cv
159.755 354.344 158.155 352.663 156.695 350.884 cv
156.485 350.623 156.275 350.363 156.065 350.094 cv
159.085 345.514 164.115 339.764 171.595 336.753 cv
173.695 335.923 175.955 335.304 178.415 334.983 cv
178.565 334.963 178.695 334.943 178.845 334.934 cv
179.065 334.903 179.285 334.884 179.505 334.863 cv
179.525 334.854 179.535 334.854 179.555 334.854 cv
179.745 334.844 179.925 334.833 180.115 334.823 cv
180.405 334.804 180.685 334.783 180.935 334.773 cv
181.545 334.724 182.165 334.673 182.755 334.653 cv
199.585 334.003 208.545 340.684 209.065 341.083 cv
209.115 341.113 209.145 341.153 209.175 341.193 cv
209.345 341.373 209.745 341.813 210.335 342.493 cv
212.535 345.033 217.225 350.863 221.005 358.363 cv
cp
.639216 .482353 .564706 rgb
f
185.865 311.896 mo
185.865 311.896 189.676 310.954 191.463 308.76 cv
193.25 306.565 193.544 301.139 193.544 301.139 cv
193.544 301.139 200.447 304.729 202.262 304.331 cv
204.076 303.932 207.632 295.804 205.237 292.293 cv
202.842 288.782 197.995 293.129 197.995 293.129 cv
197.995 293.129 197 288.113 191.7 289.283 cv
185.479 290.657 183.87 296.975 183.87 296.975 cv
183.87 296.975 183.453 290.119 179.125 293.129 cv
174.796 296.139 176.354 303.996 176.354 303.996 cv
176.354 303.996 172.892 305.498 173.585 308.76 cv
174.277 312.021 178.951 315.161 178.951 315.161 cv
185.865 311.896 li
cp
0 0 0 rgb
f
185.247 321.736 mo
184.34 332.072 li
184.34 332.072 186.009 335.201 192.227 336.205 cv
196.859 336.953 198.587 336.069 198.587 336.069 cv
198.396 330.781 li
198.203 325.624 li
187.108 322.297 li
185.247 321.736 li
cp
.956863 .517647 .384314 rgb
f
187.108 322.297 mo
187.11 322.581 187.192 322.923 187.332 323.319 cv
189.273 328.679 195.723 330.327 198.396 330.781 cv
198.203 325.624 li
187.108 322.297 li
cp
0 0 0 rgb
f
202.657 302.26 mo
202.657 302.26 207.136 315.679 204.291 322.697 cv
201.444 329.716 194.749 327.919 190.818 326.128 cv
186.886 324.336 185.245 321.738 185.245 321.738 cv
185.245 321.738 181.308 322.616 179.116 318.949 cv
176.924 315.283 178.901 311.508 181.169 310.818 cv
183.437 310.13 185.865 311.896 185.865 311.896 cv
184.227 307.964 li
184.227 307.964 194.726 289.805 202.657 302.26 cv
cp
.956863 .517647 .384314 rgb
f
185.015 317.532 mo
184.903 317.532 184.79 317.495 184.697 317.418 cv
180.169 313.675 li
179.956 313.498 179.926 313.184 180.102 312.971 cv
180.277 312.757 180.591 312.727 180.806 312.903 cv
185.333 316.646 li
185.546 316.823 185.577 317.138 185.4 317.351 cv
185.302 317.471 185.159 317.532 185.015 317.532 cv
cp
0 0 0 rgb
f
193.33 307.952 mo
193.207 307.952 193.083 307.906 192.986 307.814 cv
192.786 307.625 192.777 307.309 192.967 307.108 cv
194.605 305.379 196.549 305.881 197.347 306.386 cv
197.581 306.534 197.65 306.843 197.502 307.076 cv
197.354 307.31 197.047 307.379 196.814 307.232 cv
196.747 307.191 195.165 306.243 193.693 307.796 cv
193.595 307.899 193.462 307.952 193.33 307.952 cv
cp
f
203.673 307.43 mo
203.55 307.43 203.426 307.385 203.33 307.293 cv
202.314 306.333 201.109 306.859 201.058 306.883 cv
200.807 306.994 200.511 306.886 200.397 306.635 cv
200.283 306.385 200.39 306.09 200.64 305.975 cv
200.714 305.94 202.501 305.134 204.017 306.566 cv
204.217 306.756 204.227 307.072 204.037 307.273 cv
203.938 307.377 203.806 307.43 203.673 307.43 cv
cp
f
200.115 317.115 mo
200.052 317.115 199.988 317.104 199.926 317.078 cv
199.67 316.975 199.547 316.683 199.651 316.427 cv
201.053 312.979 199.454 311.738 199.385 311.688 cv
199.166 311.524 199.115 311.213 199.276 310.991 cv
199.438 310.77 199.744 310.718 199.966 310.873 cv
200.062 310.941 202.296 312.578 200.578 316.804 cv
200.499 316.998 200.312 317.115 200.115 317.115 cv
cp
f
203.189 312.392 mo
202.954 312.392 202.744 312.225 202.698 311.985 cv
202.236 309.561 li
202.185 309.289 202.363 309.027 202.634 308.976 cv
202.912 308.926 203.167 309.103 203.219 309.373 cv
203.681 311.798 li
203.732 312.069 203.554 312.331 203.283 312.383 cv
203.251 312.389 203.22 312.392 203.189 312.392 cv
cp
f
195.435 312.392 mo
195.2 312.392 194.99 312.225 194.944 311.985 cv
194.483 309.561 li
194.431 309.289 194.609 309.027 194.881 308.976 cv
195.152 308.926 195.415 309.103 195.465 309.373 cv
195.927 311.798 li
195.979 312.069 195.8 312.331 195.529 312.383 cv
195.498 312.389 195.466 312.392 195.435 312.392 cv
cp
f
197.988 321.013 mo
197.762 321.013 195.118 320.958 194.172 318.484 cv
194.074 318.227 194.203 317.938 194.46 317.839 cv
194.719 317.74 195.007 317.869 195.106 318.127 cv
195.829 320.019 197.94 320.032 197.989 320.013 cv
198.304 319.99 198.491 320.231 198.494 320.507 cv
198.497 320.783 198.276 321.01 198 321.013 cv
197.997 321.013 197.993 321.013 197.988 321.013 cv
cp
f
185.865 311.896 mo
185.865 311.896 189.953 311.186 191.463 307.842 cv
192.974 304.498 192.752 301.488 192.752 301.488 cv
192.752 301.488 194.816 303.75 198.396 303.372 cv
201.976 302.993 202.958 299.314 202.958 299.314 cv
199.678 295.47 li
199.678 295.47 186.199 298.313 185.865 297.895 cv
185.53 297.476 180.625 306.22 180.625 306.22 cv
185.865 311.896 li
cp
f
212.685 363.493 mo
206.645 366.354 199.885 367.953 192.765 367.953 cv
190.185 367.953 187.655 367.743 185.185 367.333 cv
183.415 367.054 181.685 366.663 179.985 366.184 cv
174.555 364.644 169.545 362.144 165.125 358.884 cv
166.985 347.653 168.945 338.443 170.465 337.403 cv
170.815 337.173 171.195 336.953 171.595 336.753 cv
173.665 335.743 176.255 335.233 178.415 334.983 cv
178.565 334.963 178.695 334.943 178.845 334.934 cv
179.065 334.903 179.285 334.884 179.505 334.863 cv
179.705 334.854 179.915 334.844 180.115 334.823 cv
180.405 334.804 180.685 334.783 180.935 334.773 cv
182.045 334.713 182.745 334.724 182.745 334.724 cv
182.745 334.724 182.745 334.703 182.755 334.653 cv
182.805 334.014 183.245 329.014 184.605 329.123 cv
186.045 329.243 189.545 331.653 193.245 331.953 cv
196.955 332.253 198.935 331.923 199.675 331.923 cv
200.425 331.923 200.575 335.884 200.575 335.884 cv
200.575 335.884 205.545 337.573 209.065 341.083 cv
209.115 341.113 209.145 341.153 209.175 341.193 cv
209.345 341.373 209.745 341.813 210.335 342.493 cv
210.785 343.063 211.175 343.653 211.505 344.293 cv
212.525 346.283 212.785 354.134 212.685 363.493 cv
cp
.639216 .482353 .564706 rgb
f
190.601 336.867 mo
187.17 336.867 182.795 335.271 182.579 335.19 cv
182.319 335.096 182.187 334.808 182.282 334.549 cv
182.378 334.289 182.666 334.156 182.924 334.253 cv
182.984 334.274 188.957 336.458 192.113 335.718 cv
192.383 335.654 192.651 335.823 192.713 336.092 cv
192.776 336.36 192.609 336.63 192.34 336.692 cv
191.812 336.815 191.221 336.867 190.601 336.867 cv
cp
1 1 1 rgb
f
180.626 317.44 mo
180.447 317.44 180.274 317.345 180.185 317.176 cv
180.054 316.933 180.146 316.63 180.39 316.499 cv
182.989 315.11 li
183.233 314.98 183.536 315.072 183.666 315.316 cv
183.796 315.56 183.704 315.862 183.46 315.993 cv
180.861 317.382 li
180.786 317.422 180.706 317.44 180.626 317.44 cv
cp
0 0 0 rgb
f
192.197 309.574 mo
191.99 309.574 191.822 309.742 191.822 309.949 cv
191.822 312.342 li
191.822 313.372 192.659 314.21 193.689 314.21 cv
195.996 314.21 li
197.025 314.21 197.863 313.372 197.863 312.342 cv
197.863 309.949 li
197.863 309.742 197.694 309.574 197.488 309.574 cv
192.197 309.574 li
cp
195.996 315.21 mo
193.689 315.21 li
192.108 315.21 190.822 313.923 190.822 312.342 cv
190.822 309.949 li
190.822 309.191 191.438 308.574 192.197 308.574 cv
197.488 308.574 li
198.246 308.574 198.863 309.191 198.863 309.949 cv
198.863 312.342 li
198.863 313.923 197.577 315.21 195.996 315.21 cv
cp
.407843 .462745 .666667 rgb
f
202.012 309.694 mo
201.845 309.694 201.71 309.829 201.71 309.995 cv
201.71 312.661 li
201.71 313.581 202.458 314.329 203.378 314.329 cv
204.948 314.329 li
205.868 314.329 206.616 313.581 206.616 312.661 cv
206.616 309.995 li
206.616 309.829 206.481 309.694 206.314 309.694 cv
202.012 309.694 li
cp
204.948 315.329 mo
203.378 315.329 li
201.907 315.329 200.71 314.132 200.71 312.661 cv
200.71 309.995 li
200.71 309.278 201.294 308.694 202.012 308.694 cv
206.314 308.694 li
207.032 308.694 207.616 309.278 207.616 309.995 cv
207.616 312.661 li
207.616 314.132 206.419 315.329 204.948 315.329 cv
cp
f
197.585 312.392 mo
197.402 312.392 197.227 312.291 197.138 312.117 cv
197.014 311.872 197.11 311.572 197.356 311.446 cv
197.438 311.405 199.396 310.423 201.398 311.239 cv
201.654 311.343 201.777 311.635 201.673 311.891 cv
201.569 312.147 201.277 312.27 201.021 312.165 cv
199.45 311.524 197.825 312.329 197.81 312.338 cv
197.737 312.374 197.661 312.392 197.585 312.392 cv
cp
f
181.914 311.179 mo
181.715 311.179 181.528 311.061 181.45 310.865 cv
181.347 310.608 181.471 310.317 181.728 310.215 cv
187.066 308.071 191.363 310.141 191.543 310.23 cv
191.791 310.353 191.892 310.652 191.77 310.899 cv
191.648 311.146 191.348 311.249 191.101 311.127 cv
191.061 311.108 187.01 309.174 182.1 311.143 cv
182.039 311.167 181.976 311.179 181.914 311.179 cv
cp
f
518.449 78.7041 mo
518.449 87.604 520.949 95.9238 525.27 103.004 cv
526.02 104.234 526.829 105.414 527.68 106.564 cv
530.81 110.744 534.609 114.384 538.939 117.324 cv
544.659 121.204 551.279 123.834 558.43 124.854 cv
560.299 125.124 562.199 125.274 564.14 125.304 cv
564.449 125.324 564.759 125.324 565.069 125.324 cv
568.829 125.324 572.499 124.874 575.999 124.034 cv
585.579 121.734 594.009 116.474 600.259 109.274 cv
601.209 108.174 602.119 107.034 602.969 105.854 cv
608.459 98.2041 611.689 88.8242 611.689 78.7041 cv
611.689 52.9541 590.819 32.084 565.069 32.084 cv
539.319 32.084 518.449 52.9541 518.449 78.7041 cv
cp
.909804 .882353 .937255 rgb
f
571.7 61.8306 mo
571.7 61.8306 584.958 57.2212 586.626 70.8945 cv
588.295 84.5679 567.42 90.2261 564.349 78.3027 cv
561.276 66.3789 571.7 61.8306 571.7 61.8306 cv
cp
0 0 0 rgb
f
527.68 106.564 mo
530.81 110.744 534.609 114.384 538.939 117.324 cv
544.659 121.204 551.279 123.834 558.43 124.854 cv
564.229 112.424 li
569.289 101.574 li
571.729 95.2339 li
574.43 88.2139 li
570.619 87.7739 li
568.379 87.5142 li
562.569 86.834 li
555.89 86.0542 li
555.89 86.0542 539.02 87.5742 529.339 103.494 cv
528.789 104.404 528.239 105.434 527.68 106.564 cv
cp
.968627 .701961 .411765 rgb
f
538.939 117.324 mo
544.659 121.204 551.279 123.834 558.43 124.854 cv
560.299 125.124 562.199 125.274 564.14 125.304 cv
564.449 125.324 564.759 125.324 565.069 125.324 cv
568.829 125.324 572.499 124.874 575.999 124.034 cv
571.729 95.2339 li
570.619 87.7739 li
570.209 84.9839 li
569.659 85.1138 li
562.569 86.834 li
555.619 88.5142 li
555.619 88.5142 541.369 96.7041 538.939 117.324 cv
cp
.466667 .447059 .827451 rgb
f
550.382 69.624 mo
550.382 69.624 546.518 65.6343 547.373 59.2197 cv
547.954 54.8711 549.83 53.4063 549.83 53.4063 cv
549.83 53.4063 546.698 47.6035 555.436 47.6641 cv
564.173 47.7256 569.452 51.8345 569.452 51.8345 cv
569.452 51.8345 573.374 49.7402 575.32 54.3301 cv
577.268 58.9194 575.712 65.8408 575.712 65.8408 cv
550.382 69.624 li
cp
0 0 0 rgb
f
569.78 76.1621 mo
569.876 86.8218 li
569.876 86.8218 567.98 89.9033 561.749 90.4658 cv
557.106 90.8848 555.614 88.5117 555.614 88.5117 cv
556.656 79.1738 li
567.895 76.5967 li
569.78 76.1621 li
cp
.956863 .517647 .384314 rgb
f
569.758 75.5122 mo
569.734 75.8032 569.626 76.1479 569.458 76.5435 cv
567.12 81.8892 558.746 84.1802 556.064 84.4443 cv
556.656 79.1738 li
569.758 75.5122 li
cp
0 0 0 rgb
f
554.063 54.8975 mo
554.063 54.8975 548.588 68.3125 550.859 75.7183 cv
553.131 83.1245 559.896 81.7847 563.926 80.2441 cv
567.956 78.7031 569.782 76.1641 569.782 76.1641 cv
569.782 76.1641 573.61 77.3589 576.064 73.7661 cv
578.518 70.1729 576.855 66.1563 574.664 65.2798 cv
572.474 64.4038 569.934 66.0322 569.934 66.0322 cv
571.859 62.125 li
571.859 62.125 562.879 42.729 554.063 54.8975 cv
cp
.956863 .517647 .384314 rgb
f
569.934 66.0322 mo
569.934 66.0322 564.266 67.3774 560.086 61.1626 cv
555.906 54.9473 556.182 52.3271 556.182 52.3271 cv
552.455 59.0166 li
552.455 59.0166 551.418 54.5015 553.137 51.542 cv
554.856 48.5825 556.764 49.1191 556.764 49.1191 cv
569.452 51.8345 li
573.108 61.8066 li
569.934 66.0322 li
cp
0 0 0 rgb
f
555.074 71.8247 mo
554.866 71.8247 554.673 71.6948 554.602 71.4873 cv
553.622 68.6416 555.553 65.6626 555.635 65.5371 cv
555.788 65.3057 556.096 65.2432 556.327 65.3945 cv
556.558 65.5459 556.622 65.856 556.471 66.0864 cv
556.453 66.1133 554.729 68.7861 555.547 71.1621 cv
555.637 71.4233 555.498 71.7075 555.237 71.7974 cv
555.183 71.8159 555.128 71.8247 555.074 71.8247 cv
cp
f
570.678 72.3159 mo
570.56 72.3159 570.441 72.2744 570.346 72.1899 cv
570.14 72.0068 570.12 71.6909 570.304 71.4844 cv
573.79 67.5522 li
573.973 67.3433 574.288 67.3267 574.496 67.5098 cv
574.702 67.6929 574.722 68.0088 574.538 68.2153 cv
571.052 72.1475 li
570.953 72.2593 570.815 72.3159 570.678 72.3159 cv
cp
f
574.463 71.1733 mo
574.442 71.1733 574.423 71.1724 574.402 71.1699 cv
571.897 70.8701 li
571.623 70.8374 571.428 70.5884 571.461 70.314 cv
571.494 70.0396 571.753 69.8506 572.017 69.877 cv
574.521 70.1768 li
574.796 70.2095 574.991 70.4585 574.958 70.7329 cv
574.928 70.9868 574.712 71.1733 574.463 71.1733 cv
cp
f
552.149 61.0444 mo
551.918 61.0444 551.71 60.8828 551.661 60.647 cv
551.604 60.3765 551.777 60.1113 552.048 60.0552 cv
554.39 59.5654 li
554.662 59.5093 554.926 59.6821 554.981 59.9521 cv
555.038 60.2227 554.865 60.4878 554.595 60.5439 cv
552.253 61.0337 li
552.218 61.041 552.184 61.0444 552.149 61.0444 cv
cp
f
561.998 62.2588 mo
561.927 62.2588 561.855 62.2441 561.787 62.2124 cv
558.645 60.7529 li
558.395 60.6367 558.286 60.3394 558.402 60.0889 cv
558.518 59.8369 558.816 59.7295 559.066 59.8457 cv
562.209 61.3052 li
562.459 61.4214 562.567 61.7188 562.451 61.9692 cv
562.367 62.1519 562.187 62.2588 561.998 62.2588 cv
cp
f
552.335 66.4912 mo
552.292 66.4912 552.248 66.4858 552.204 66.4741 cv
551.938 66.4019 551.78 66.1274 551.853 65.8608 cv
552.437 63.6987 li
551.847 63.0254 li
551.665 62.8174 551.686 62.5015 551.894 62.3198 cv
552.101 62.1387 552.417 62.1577 552.599 62.3662 cv
553.365 63.2412 li
553.476 63.3672 553.516 63.5396 553.472 63.7012 cv
552.817 66.1216 li
552.758 66.3447 552.556 66.4912 552.335 66.4912 cv
cp
f
559.061 66.9072 mo
559.018 66.9072 558.974 66.9019 558.93 66.8901 cv
558.663 66.8179 558.506 66.5435 558.578 66.2769 cv
559.16 64.1221 li
558.29 63.1733 li
558.104 62.9702 558.116 62.6538 558.32 62.4673 cv
558.523 62.2813 558.84 62.2944 559.026 62.4976 cv
560.083 63.6489 li
560.199 63.7749 560.242 63.9517 560.197 64.1172 cv
559.543 66.5376 li
559.483 66.7607 559.281 66.9072 559.061 66.9072 cv
cp
f
560.54 91.0635 mo
558.588 91.0635 556.655 90.5044 555.233 88.8359 cv
555.055 88.626 555.08 88.3105 555.29 88.1313 cv
555.499 87.9521 555.814 87.9761 555.995 88.1875 cv
559.691 92.5244 567.981 87.9282 568.065 87.8813 cv
568.302 87.7461 568.609 87.8296 568.746 88.0713 cv
568.882 88.312 568.797 88.6172 568.556 88.7524 cv
568.311 88.8906 564.387 91.0635 560.54 91.0635 cv
cp
1 1 1 rgb
f
550.264 63.3433 mo
550.222 63.3433 550.18 63.3442 550.138 63.3462 cv
549.343 63.3843 548.609 63.7798 548.072 64.4604 cv
547.518 65.1616 547.238 66.0762 547.284 67.0361 cv
547.379 68.9907 548.854 70.521 550.477 70.436 cv
551.271 70.3979 552.005 70.002 552.542 69.3213 cv
553.097 68.6206 553.376 67.7056 553.33 66.7461 cv
553.284 65.7861 552.918 64.9023 552.3 64.2578 cv
551.731 63.665 551.013 63.3433 550.264 63.3433 cv
cp
550.353 71.439 mo
548.21 71.439 546.403 69.5239 546.286 67.084 cv
546.228 65.8833 546.584 64.7314 547.287 63.8408 cv
548.007 62.9297 549.002 62.3994 550.089 62.3472 cv
551.187 62.2881 552.218 62.7271 553.021 63.5654 cv
553.808 64.3848 554.271 65.4976 554.328 66.6982 cv
554.387 67.8989 554.03 69.0508 553.327 69.9414 cv
552.607 70.8525 551.612 71.3828 550.525 71.4351 cv
550.467 71.438 550.409 71.439 550.353 71.439 cv
cp
.466667 .447059 .827451 rgb
f
560.388 63.5356 mo
560.331 63.5356 560.273 63.5371 560.216 63.54 cv
558.262 63.6338 556.748 65.3008 556.842 67.2554 cv
556.888 68.2021 557.299 69.0747 558 69.7124 cv
558.702 70.3491 559.611 70.6758 560.557 70.6299 cv
562.512 70.5366 564.025 68.8696 563.933 66.915 cv
563.841 65.0181 562.268 63.5356 560.388 63.5356 cv
cp
560.381 71.6343 mo
559.249 71.6343 558.172 71.2192 557.328 70.4526 cv
556.429 69.6353 555.901 68.5171 555.844 67.3032 cv
555.723 64.7979 557.663 62.6616 560.168 62.541 cv
562.687 62.4233 564.811 64.3613 564.931 66.8672 cv
565.051 69.373 563.109 71.5088 560.604 71.6289 cv
560.53 71.6323 560.456 71.6343 560.381 71.6343 cv
cp
f
554.095 66.9185 mo
553.943 66.9185 553.794 66.8501 553.695 66.7197 cv
553.529 66.4995 553.573 66.186 553.793 66.0195 cv
554.73 65.3105 556.374 65.7725 556.56 65.8276 cv
556.824 65.9063 556.975 66.1841 556.896 66.4487 cv
556.818 66.7134 556.539 66.8647 556.275 66.7861 cv
555.764 66.6362 554.802 66.5122 554.396 66.8174 cv
554.306 66.8857 554.2 66.9185 554.095 66.9185 cv
cp
f
564.432 67.3911 mo
564.33 67.3911 564.228 67.3604 564.139 67.2964 cv
563.915 67.1348 563.864 66.8218 564.026 66.5981 cv
565.558 64.48 571.524 64.5264 572.198 64.5376 cv
572.475 64.5425 572.694 64.7705 572.689 65.0464 cv
572.685 65.3198 572.462 65.5376 572.189 65.5376 cv
570.494 65.5112 565.878 65.7451 564.837 67.1841 cv
564.739 67.3193 564.586 67.3911 564.432 67.3911 cv
cp
f
564.229 112.424 mo
564.029 117.424 564.06 122.024 564.14 125.304 cv
564.449 125.324 564.759 125.324 565.069 125.324 cv
568.829 125.324 572.499 124.874 575.999 124.034 cv
585.579 121.734 594.009 116.474 600.259 109.274 cv
601.209 108.174 602.119 107.034 602.969 105.854 cv
586.159 85.3638 569.859 84.8042 569.859 84.8042 cv
569.789 84.9038 569.719 85.0039 569.659 85.1138 cv
569.189 85.834 568.77 86.6338 568.379 87.5142 cv
565.619 93.7241 564.569 103.674 564.229 112.424 cv
cp
.968627 .701961 .411765 rgb
f
556.527 75.3179 mo
556.164 75.3179 555.784 75.2461 555.402 75.0669 cv
555.152 74.9497 555.044 74.6519 555.161 74.4019 cv
555.279 74.1514 555.578 74.0444 555.826 74.1616 cv
557.091 74.7539 558.496 73.4336 558.51 73.4199 cv
558.709 73.2319 559.025 73.2354 559.216 73.4351 cv
559.406 73.6338 559.401 73.9492 559.202 74.1406 cv
559.141 74.2002 557.961 75.3179 556.527 75.3179 cv
cp
0 0 0 rgb
f
21.5146 321.338 mo
21.5146 328.418 23.0947 335.118 25.9145 341.128 cv
33.355 356.979 49.4648 367.958 68.1348 367.958 cv
84.1846 367.958 98.3345 359.858 106.725 347.519 cv
111.795 340.059 114.765 331.049 114.765 321.338 cv
114.765 295.588 93.8848 274.708 68.1348 274.708 cv
42.3945 274.708 21.5146 295.588 21.5146 321.338 cv
cp
.909804 .882353 .937255 rgb
f
100.354 348.065 mo
100.354 348.065 107.976 345.772 105.658 334.628 cv
103.658 325.014 91.0679 323.55 91.0679 323.55 cv
91.0679 323.55 95.0293 317.605 91.9912 310.412 cv
89.0747 303.506 85.0122 302.194 85.0122 302.194 cv
85.0122 302.194 85.3579 296.597 80.9458 292.203 cv
76.5337 287.811 70.522 292.413 70.522 292.413 cv
70.522 292.413 59.1172 289.93 52.0801 295.985 cv
45.0434 302.041 47.7685 312.465 47.7685 312.465 cv
47.7685 312.465 36.5654 316.51 33.8403 328.352 cv
31.1152 340.193 38.1768 346.552 38.1768 346.552 cv
100.354 348.065 li
cp
0 0 0 rgb
f
25.9145 341.128 mo
33.355 356.979 49.4648 367.958 68.1348 367.958 cv
84.1846 367.958 98.3345 359.858 106.725 347.519 cv
98.6348 336.748 88.5449 328.938 76.0845 327.838 cv
56.8745 326.148 44.8047 329.858 32.105 336.668 cv
30.1645 337.708 28.0649 339.229 25.9145 341.128 cv
cp
.968627 .701961 .411765 rgb
f
61.9702 321.63 mo
61.4775 329.413 li
61.4775 329.413 64.269 332.079 68.0229 332.351 cv
73.0918 332.717 75.1255 330.039 75.1255 330.039 cv
75.5615 319.789 li
61.9702 321.63 li
cp
.956863 .517647 .384314 rgb
f
61.9707 321.618 mo
61.9707 321.618 64.0747 329.17 70.3911 327.588 cv
74.9512 326.445 75.4971 320.619 75.4971 320.619 cv
61.9707 321.618 li
cp
0 0 0 rgb
f
78.9214 300.31 mo
78.9214 300.31 80.8408 314.39 75.9429 320.809 cv
71.0454 327.228 65.2671 324.946 62.7402 322.771 cv
59.332 319.838 58.812 316.001 58.812 316.001 cv
58.812 316.001 53.8657 316.705 52.4546 312.625 cv
50.9722 308.34 54.2056 305.126 56.6641 305.062 cv
59.1226 304.997 59.3833 305.458 59.3833 305.458 cv
58.9116 300.942 li
58.9116 300.942 74.7017 285.228 78.9214 300.31 cv
cp
.956863 .517647 .384314 rgb
f
76.2041 306.709 mo
76.2041 306.709 83.7949 303.952 84.0557 309.727 cv
84.3574 316.416 76.4028 316.039 76.4028 316.039 cv
76.2041 306.709 li
cp
f
58.1631 305.834 mo
58.1631 305.834 60.689 307.055 66.3682 303.366 cv
72.0474 299.677 70.7236 294.874 70.7236 294.874 cv
70.7236 294.874 77.9307 299.96 79.2822 305.896 cv
80.6333 311.831 82.4463 292.29 73.9521 292.204 cv
65.4585 292.118 52.4756 296.938 58.1631 305.834 cv
cp
0 0 0 rgb
f
79.5908 312.965 mo
79.4961 312.965 79.4009 312.938 79.3159 312.882 cv
79.0854 312.73 79.022 312.42 79.1738 312.189 cv
81.8828 308.084 li
82.0351 307.854 82.3442 307.788 82.5757 307.942 cv
82.8061 308.094 82.8696 308.404 82.7178 308.635 cv
80.0088 312.74 li
79.9126 312.886 79.7534 312.965 79.5908 312.965 cv
cp
f
58.248 311.933 mo
58.1235 311.933 57.999 311.887 57.9023 311.794 cv
54.3052 308.348 li
54.1055 308.156 54.0986 307.84 54.29 307.641 cv
54.4809 307.44 54.7978 307.435 54.9966 307.625 cv
58.5937 311.071 li
58.7934 311.263 58.8003 311.579 58.6089 311.778 cv
58.5107 311.881 58.3794 311.933 58.248 311.933 cv
cp
f
54.7285 312.337 mo
54.5674 312.337 54.4087 312.259 54.3125 312.115 cv
54.1587 311.886 54.2207 311.575 54.4502 311.421 cv
56.7715 309.868 li
56.9995 309.716 57.311 309.777 57.4648 310.006 cv
57.6186 310.235 57.5566 310.546 57.3271 310.7 cv
55.0059 312.253 li
54.9204 312.31 54.8242 312.337 54.7285 312.337 cv
cp
f
82.5405 311.852 mo
82.5039 311.851 80.3901 311.698 80.3901 311.698 cv
80.1147 311.678 79.9077 311.438 79.9277 311.163 cv
79.9477 310.889 80.186 310.682 80.4624 310.7 cv
82.5762 310.853 li
82.8516 310.873 83.0586 311.112 83.0386 311.388 cv
83.02 311.65 82.8003 311.852 82.5405 311.852 cv
cp
f
70.8452 314.763 mo
70.8091 314.763 70.7725 314.759 70.7358 314.751 cv
70.4663 314.69 70.2964 314.423 70.3569 314.153 cv
71.1343 310.669 70.0644 307.715 70.0532 307.685 cv
69.9575 307.427 70.0893 307.139 70.3476 307.042 cv
70.6079 306.948 70.8935 307.077 70.9902 307.336 cv
71.0391 307.467 72.1777 310.586 71.3325 314.372 cv
71.2808 314.604 71.0742 314.763 70.8452 314.763 cv
cp
f
67.8169 317.001 mo
68.1255 317.334 68.5229 317.619 68.9609 317.619 cv
69.375 317.618 69.7793 317.496 70.1289 317.339 cv
67.8169 317.001 li
cp
68.9609 318.619 mo
67.2978 318.619 66.3516 316.638 66.3125 316.554 cv
66.2344 316.387 66.2539 316.191 66.3638 316.044 cv
66.4731 315.896 66.6562 315.824 66.8374 315.847 cv
71.6099 316.545 li
71.8022 316.573 71.9604 316.71 72.0166 316.896 cv
72.0723 317.082 72.0151 317.284 71.8706 317.413 cv
71.8154 317.462 70.5044 318.616 68.9653 318.619 cv
68.9639 318.619 68.9624 318.619 68.9609 318.619 cv
cp
f
75.8027 303.534 mo
75.6821 303.534 75.5615 303.491 75.4653 303.403 cv
74.7187 302.721 73.292 302.694 73.2773 302.694 cv
73.0019 302.69 72.7808 302.465 72.7837 302.188 cv
72.7866 301.912 72.9639 301.688 73.2881 301.694 cv
73.3618 301.695 75.1089 301.723 76.1401 302.665 cv
76.3437 302.852 76.3579 303.168 76.1719 303.371 cv
76.0732 303.479 75.938 303.534 75.8027 303.534 cv
cp
f
64.8921 304.006 mo
64.7617 304.006 64.6313 303.955 64.5332 303.854 cv
64.3408 303.656 64.3457 303.34 64.5439 303.147 cv
65.5459 302.175 67.291 302.093 67.3652 302.09 cv
67.6445 302.094 67.873 302.293 67.8843 302.568 cv
67.896 302.845 67.6816 303.077 67.4062 303.09 cv
67.3921 303.09 65.9658 303.16 65.2402 303.864 cv
65.1431 303.959 65.0176 304.006 64.8921 304.006 cv
cp
f
68.6621 333.203 mo
63.124 333.203 60.9829 330.084 60.894 329.951 cv
60.7407 329.721 60.8032 329.411 61.0327 329.258 cv
61.2622 329.104 61.5727 329.167 61.7261 329.396 cv
61.8037 329.51 63.6851 332.264 68.727 332.203 cv
74.3613 332.177 75.4726 329.043 75.4834 329.012 cv
75.5708 328.749 75.854 328.606 76.1157 328.695 cv
76.3779 328.783 76.519 329.066 76.4316 329.328 cv
76.3794 329.485 75.0747 333.174 68.7319 333.203 cv
68.7085 333.203 68.6851 333.203 68.6621 333.203 cv
cp
.25098 .313726 .498039 rgb
f
79.2822 305.896 mo
79.2822 305.896 85.9634 297.422 80.9458 292.203 cv
75.9282 286.984 61.4775 284.379 54.6514 294.236 cv
49.8115 301.226 58.1631 305.834 58.1631 305.834 cv
67.4453 296.311 li
70.7236 294.874 li
76.2041 296.311 li
79.2822 305.896 li
cp
0 0 0 rgb
f
65.3037 308.818 mo
65.0356 308.818 64.8135 308.605 64.8047 308.335 cv
64.7236 305.931 li
64.7178 305.767 64.793 305.61 64.9248 305.513 cv
66.4668 304.365 li
66.687 304.2 67.001 304.246 67.1665 304.468 cv
67.331 304.689 67.2851 305.003 67.0635 305.168 cv
65.7314 306.159 li
65.8037 308.302 li
65.813 308.577 65.5972 308.809 65.3213 308.818 cv
65.3154 308.818 65.3096 308.818 65.3037 308.818 cv
cp
f
74.1001 308.818 mo
73.832 308.818 73.6099 308.605 73.6011 308.335 cv
73.52 305.931 li
73.5142 305.767 73.5893 305.61 73.7212 305.513 cv
75.2632 304.365 li
75.4839 304.2 75.7978 304.246 75.9629 304.468 cv
76.1274 304.689 76.0815 305.003 75.8599 305.168 cv
74.5278 306.159 li
74.6001 308.302 li
74.6094 308.577 74.3935 308.809 74.1177 308.818 cv
74.1118 308.818 74.1059 308.818 74.1001 308.818 cv
cp
f
611.339 320.619 mo
611.339 329.669 608.759 338.119 604.299 345.27 cv
602.669 347.879 600.789 350.31 598.688 352.539 cv
590.188 361.589 578.108 367.239 564.719 367.239 cv
561.219 367.239 557.809 366.85 554.528 366.119 cv
549.919 365.1 545.559 363.379 541.568 361.089 cv
536.919 358.439 532.769 354.989 529.309 350.939 cv
528.559 350.06 527.839 349.159 527.148 348.229 cv
521.448 340.499 518.089 330.949 518.089 320.619 cv
518.089 294.869 538.969 273.999 564.719 273.999 cv
590.459 273.999 611.339 294.869 611.339 320.619 cv
cp
.909804 .882353 .937255 rgb
f
580.509 349.479 mo
554.528 366.119 li
549.919 365.1 545.559 363.379 541.568 361.089 cv
536.919 358.439 532.769 354.989 529.309 350.939 cv
533.139 342.509 541.108 330.159 555.828 326.009 cv
559.089 325.089 561.969 325.18 564.488 325.979 cv
576.528 329.789 580.509 349.479 580.509 349.479 cv
cp
.639216 .482353 .564706 rgb
f
604.299 345.27 mo
602.669 347.879 600.789 350.31 598.688 352.539 cv
590.188 361.589 578.108 367.239 564.719 367.239 cv
556.289 367.239 548.389 365.009 541.568 361.089 cv
542.629 347.81 543.688 337.209 544.509 335.02 cv
546.139 330.659 557.059 327.589 564.488 325.979 cv
568.469 325.129 571.448 324.689 571.448 324.689 cv
571.448 324.689 586.108 325.359 598.009 336.859 cv
600.129 338.909 602.249 341.81 604.299 345.27 cv
cp
f
554.326 291.604 mo
554.326 291.604 549.477 297.09 552.143 303.138 cv
554.808 309.186 557.667 292.151 557.667 292.151 cv
554.326 291.604 li
cp
0 0 0 rgb
f
570.636 316.253 mo
570.82 327.135 li
570.82 327.135 568.91 330.296 562.554 330.921 cv
557.818 331.387 556.134 330.343 556.134 330.343 cv
556.701 324.82 li
557.263 319.436 li
568.714 316.712 li
570.636 316.253 li
cp
.956863 .517647 .384314 rgb
f
568.714 316.712 mo
568.691 317.01 570.466 317.945 570.297 318.351 cv
567.954 323.827 559.226 326.58 556.49 326.872 cv
557.263 319.436 li
568.714 316.712 li
cp
0 0 0 rgb
f
556.393 292.147 mo
554.898 293.363 553.854 295.037 553.235 296.861 cv
551.813 301.062 548.942 310.866 550.823 316.879 cv
553.267 324.691 560.311 323.229 564.499 321.572 cv
568.688 319.916 570.566 317.22 570.566 317.22 cv
570.566 317.22 574.572 318.456 577.096 314.642 cv
579.619 310.827 577.845 306.593 575.551 305.682 cv
573.257 304.771 570.623 306.509 570.623 306.509 cv
572.594 302.366 li
572.594 302.366 564.663 285.414 556.393 292.147 cv
cp
.956863 .517647 .384314 rgb
f
571.202 311.846 mo
571.05 311.846 570.899 311.776 570.801 311.645 cv
570.636 311.423 570.682 311.109 570.903 310.944 cv
574.878 307.982 li
575.098 307.819 575.412 307.862 575.578 308.085 cv
575.743 308.307 575.697 308.62 575.476 308.785 cv
571.501 311.747 li
571.411 311.813 571.307 311.846 571.202 311.846 cv
cp
0 0 0 rgb
f
575.67 311.709 mo
575.632 311.709 575.593 311.705 575.554 311.695 cv
572.312 310.919 li
572.043 310.854 571.877 310.585 571.941 310.316 cv
572.005 310.048 572.271 309.878 572.544 309.946 cv
575.786 310.723 li
576.055 310.787 576.221 311.057 576.156 311.325 cv
576.102 311.555 575.896 311.709 575.67 311.709 cv
cp
f
553.189 304.872 mo
553.149 304.872 553.107 304.867 553.066 304.856 cv
552.799 304.788 552.637 304.517 552.705 304.249 cv
553.344 301.742 li
553.412 301.476 553.68 301.311 553.951 301.381 cv
554.219 301.449 554.381 301.721 554.313 301.988 cv
553.674 304.495 li
553.616 304.722 553.413 304.872 553.189 304.872 cv
cp
f
560.083 305.238 mo
560.043 305.238 560.001 305.233 559.96 305.223 cv
559.692 305.154 559.53 304.883 559.599 304.615 cv
560.237 302.107 li
560.306 301.84 560.573 301.674 560.845 301.746 cv
561.112 301.814 561.274 302.086 561.206 302.354 cv
560.567 304.861 li
560.51 305.088 560.307 305.238 560.083 305.238 cv
cp
f
552.795 299.399 mo
552.543 299.399 552.326 299.21 552.299 298.953 cv
552.27 298.679 552.468 298.432 552.742 298.402 cv
554.807 298.179 li
555.077 298.149 555.328 298.347 555.357 298.622 cv
555.387 298.896 555.188 299.144 554.914 299.173 cv
552.85 299.396 li
552.831 299.398 552.813 299.399 552.795 299.399 cv
cp
f
562.16 301.058 mo
562.096 301.058 562.03 301.045 561.967 301.019 cv
559.159 299.844 li
558.905 299.737 558.785 299.444 558.892 299.189 cv
558.998 298.935 559.291 298.815 559.546 298.922 cv
562.354 300.097 li
562.607 300.203 562.728 300.496 562.621 300.751 cv
562.541 300.942 562.355 301.058 562.16 301.058 cv
cp
f
570.623 306.509 mo
570.623 306.509 569.495 311.038 568.627 310.485 cv
567.759 309.934 566.946 303.403 567.594 300.481 cv
568.241 297.559 568.713 296.089 568.713 296.089 cv
568.713 296.089 556.826 295.032 553.693 292.207 cv
550.56 289.382 557.179 287.56 563.948 288.842 cv
570.719 290.123 573.388 292.668 573.388 292.668 cv
573.388 292.668 577.629 292.035 579.214 294.623 cv
580.799 297.21 577.191 307.041 577.191 307.041 cv
577.191 307.041 576.122 304.574 570.623 306.509 cv
cp
f
547.952 311.187 mo
547.952 311.187 551.274 307.509 552.965 308.061 cv
554.655 308.612 555.27 311.084 555.27 311.084 cv
555.27 311.084 557.275 308.307 559.488 309.088 cv
561.702 309.869 566.446 310.159 566.496 310.927 cv
566.546 311.694 565.174 311.969 565.174 311.969 cv
565.174 311.969 554.005 313.259 547.952 311.187 cv
cp
f
570.623 306.509 mo
570.623 306.509 570.424 313.854 570.566 317.22 cv
570.709 320.586 561.35 325.838 554.886 322.938 cv
548.421 320.037 550.193 311.566 550.193 311.566 cv
555.955 312.098 li
555.955 312.098 557.283 311.345 558.793 311.035 cv
560.302 310.725 562.314 311.547 562.314 311.547 cv
570.623 306.509 li
cp
f
556.858 313.775 mo
556.628 313.775 556.43 313.602 556.405 313.366 cv
556.379 313.115 556.561 312.891 556.812 312.863 cv
556.831 312.861 558.786 312.635 559.499 311.209 cv
559.612 310.981 559.89 310.895 560.112 311.004 cv
560.339 311.117 560.43 311.392 560.317 311.617 cv
559.377 313.497 557.007 313.763 556.906 313.773 cv
556.891 313.774 556.875 313.775 556.858 313.775 cv
cp
f
555.064 310.313 mo
554.882 310.313 554.705 310.212 554.617 310.037 cv
552.999 306.805 555.325 303.406 555.425 303.263 cv
555.583 303.036 555.893 302.979 556.12 303.139 cv
556.347 303.296 556.402 303.607 556.245 303.834 cv
556.225 303.864 554.162 306.894 555.512 309.59 cv
555.635 309.837 555.535 310.137 555.288 310.261 cv
555.217 310.297 555.14 310.313 555.064 310.313 cv
cp
f
559.578 331.461 mo
556.388 331.461 553.921 330.84 553.702 330.783 cv
553.436 330.713 553.275 330.44 553.345 330.173 cv
553.413 329.907 553.686 329.744 553.954 329.814 cv
554.066 329.844 565.243 332.645 570.82 326.037 cv
570.999 325.826 571.314 325.801 571.524 325.978 cv
571.735 326.155 571.763 326.471 571.584 326.682 cv
568.313 330.559 563.421 331.461 559.578 331.461 cv
cp
.968627 .701961 .411765 rgb
f
553.888 313.254 mo
553.888 313.254 555.12 314.677 556.252 314.677 cv
557.385 314.677 558.38 312.746 558.38 312.746 cv
553.888 313.254 li
cp
.94902 .494118 .392157 rgb
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 24.2.0
%%For: ( ) ()
%%Title: (2204.w037.n003.303B.p1.303-temp_01.eps)
%%CreationDate: 4/15/2022 2:04 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb"-6B3Q&(qDeDcra".O%LG[m0XIX/U+$4BRP_W9,QgH_9[Tsqrh'/"b??]c!Xp,5,j`$"OPF"+mU`M'R@2/S](L*?IZ\FDZ^T<?
%bGM/5Cr8q\s7sEtR2;-@T\\?HUZ"F-2)I(Wl07!7cmX$P6+sV^C6X<n45Ztp>4'j>rhj+!mJ%LeM4])1<3)!#WEdt,>sY+LQ??B4
%<.eYT<V&:$4/3D732Op@D<M-*i+iYVWgBaAEj-)QKCW%P5&\mtc7-Fe$p#D2.a4pQM@MOcn\lW&ptu")KA`KPm^2meV,@9"J5*@S
%2G\W91k#?'#(ppR^NoT.<=$nKDRIB_8O]c>AS30?6S,)-RL!V+0,l7dks%oAa7"+/"K;?dFo4I=2Y[VdMj0>ZH(P!5!mVt!JZYbB
%$U,?3K0Csi6KW!E8Ah3qeu\_=J/E%b:<#mX$Vc7<nMdI&E/,>aHWJ.-/GRk>]o5KB_TQTo-H:88E?kS$pIapb2>&0_b<\cV3nrp>
%<dk':V:_S/K]GW.h.k:tY#dYL4.BV!F(;+F%][`I3CL.;,Ce_f_V_B4Ol*_U3ZtkjC)<;CRW?;KG.Y/!s(B\nWr]o_]k1)*C7NX[
%QgKa*\ZV(C77Ob'#O&::2K2>L-F+)YESumSZP%?@fJjEPUF'rA;u7]#H`bFZV7sOB$R=\7)R.qY$Z]!$>Es4SZAqJdr/2oC\?R,O
%rQ'*`'fqnYXq9""BmqEJ$2D!9-g*J#m+0JIIKc]!gluTO>[1GB1n\1E4$J6JblUrEPKNjjO?T@q)[?;MD>`dHpcG*L:rC)`L4Ps8
%#(C;(r+WE,h79"l@l)lZGIELUC`AksG-RtMofR'NH.^,hJ(3<GYaOZ_1OOnkYus8Oc16/HRa:"Aq)l)7(@fj_dC-$$Z%rjH7IJ*P
%jsBVVGY\5P];j0d"1mM7Ckd2nDet/Q.;\f96jeER)ak$_'CL_tg_oY!htR\D_V[<e'8qW8V!p>%N\:s&Gi>_t;dKJ_6e(Ta[ODt(
%VRT$PB1as3R8isN]/')=!&'sGa7Id>'rt:IreJ`08,S?60d@QWr_,'W?XP\.;/r$r_jqB0r/L.V6'_WN/JjHjr/Jr48,UWUA8u&;
%nd9>2,n%)),tWu:]L8V[2Ik_qg+`5Z!%je/`\[5=MJ_-:rPLOLTTW/?OLd71r%[2e^Te["3o\5&iQh3;gE;*p>tMTT,UOVZ_31t>
%=UC(N4'Fb)$k%be'#e(P5-L#]cSIBIB^ps7$9qi\2H05=n2p]#cMutb=]&>-RJ0At*hl4*=Hk&tk<@6uBlBe[MHGu^YbWciLa8+o
%8(+1i5N9,GFi4_oP9MAsO%?"2X-Ti!k(1(DY#>J!iEp:KFnnf=r[@Wds%JX67t:=VFLNe*7=Y-*j7)s00E6*!Idal,m&p8Qc14BP
%?iHD8nb_N's+B`n!e[5^r,6(tha`1lT,.EiFrkpb^R;k7?G5C6LncZqVH#/]OfCRZ4eQWBc0)AbrhZ6=DQ).m-O(/bO+X4i36a-:
%[n#E$omH,B7tU`gO&HUM"n2%Cfu9`<oL"Q"/i3rc<7%`!$spRSrl8mO4`rCnULl?p(+p5LkWbsVY-=S\e7[b"@?I^\cam7T2CZQU
%&cftE3)+>t08;R7?7]7ac:&!R<:_Y->[![;>K)?6]dQt?6q`e%.7?N*[%NgU=s:'M`C"*d+J:GJE/R/qa?h^GY(??J'>R#KG_HD&
%J3:Z'Q>d285VMJ-d.20sngXgCL2\?@`6%6['nqm?FduPq:J.1P5)j8D,:hWAGYN[7jp1^tmS%8"U),Bn#88$%MK7=T^+?$JN5KY'
%+I:(fMU%*j=sQrBcXkP@$?[e?`1ic:_NJNnncB5.2C=XHl?Gpq]U9FVSD3jEe<C[MfVNptjpB8C&[daKO,.9-*#iPlgrO,Jk%d!:
%Tp-\[CgfC@f^>JDa-dQQ*3<!.ZIgM)a5JR-:)np:iap@S$V"AJLk/<k2e9#:bR1"(ZDg>KZ]W$)7!G^pO><kL2$K&bKl!Vsbfk@c
%]Z>_]""WEKX(M*jbbMY!VI%h+_V"CU?@;H/I-uPJ3gQ14;A%1AoISJoqV.$o#ES.P,Ykn;0am4XR1&N/\K%_:oNB`dd^&EDC*!]s
%Kg8eCa4dhuo]!*&(=C%=pM+?"ENpC(`"5F?c!r9/qRbc]"ths'pTc3_,3!IX4CtaRaM8H61t3[?6:rd"+<4VefI'0<8k9>nV`VOG
%&2tRd<7dMsW7d;D3J]mr+(F&QR&@ShQLSU__*TFgP[n*]YsN1MT?Wn3l2AidTr"FcK7SCTC&rLdZOuLi'LjC2DScK+l"*0H*F$8G
%&Xrg`Toalo>?S'E:.SPCTaei2n"BD/4t]$f=Y`cNhDJT^f(-a?(F(?[l=#PtAY+jhjah+I^B9AYB(Z`4ON<e5"(je+bK=E'jBA_J
%'I@oW<G'D3^`GmCGlqb,%J<P7G!QDA/1_FsL*&&j[?L<H(h[Ds%5UYm_K7^22;6Mc'<*5h>/C&#c.kFM9#(d?L1I%K&J[Q>_^RVc
%fU1OuH=!cp`52U,/&:qrEciaJGo#BtbXafTS`<m#KVo!B*Gq6H"AE;PP*okH3301?hrr*<,uGP(AeJ5!%7t[^&:ZgL4Oc'C*5TrA
%q3P9&&E!:p9PGe.Lk&EC2W/Mi1AH9&\art7G\CPI7>o)/+3mUPk*\$CIkXsS@\+SXA#KPtJ3lU8B/GcHC58E9B5$i-ZH.NHo0j9k
%'&mlh-N"^TL^;pGi^ta]EV"KW#6^,3-Ar#QRb&hua9`4WWeUiCj5`kNFtKRGGWV86fu"&hLKYRD`f#%eQi]k\Y8+Z7=Gr()]g!^"
%lVL8_FD,9?*/J20FlDhO(>hK+?9BZndNk'!Q>frYY36>sUdYlWQ/spNSZu"mOR+-QKdC2il7oE;RY!Id"+k(/C6?Nppl8#UMZ$FJ
%.k.Iu=]/uZ:Z`k>OuoEr$].uMC)Y+C-j_.&6pAP[?;cCb_VCF;M\IP^q$daK1=>S+Xp2IYl@J<E.Uhk/esn6F)bJ(D\I&[O!#s8T
%_V&AK%Fp.HBS3:Ta-<a"A&sCSSKba+fG!92n\ia]MdFc,g")^fIm]EVMmn$qGX8e_T1[e+dJ)LTS1**::SsHJ+jA$2`+EL(=c?T$
%\V\tZP!Q*Pj9)1m/G9ROgk<ff_UL).2:\eL+b#K?:>!6^m%%:=c>_"b@c9s4[N\!L2)Gm*;j7A6W93;Hn3<=*HI:_<2[-?MiN>B$
%:^^@H$+_HV7+%M[@klCl"Z+KX6k>]u@Mg*5E1A&.=Gr\As65<-=;\GVqg>"3U%HN-@Cotg/K.3TZ;cdZ0_suCcpGhcb1gA\U,dp0
%ZUhf<240'<">(ZlLVXoGQN.\X@X2QcC?SC90J)C<35,c35+^OZ!b!^VI!L5&7CGsEMoU,?R`7]]pr"e*@`0OM"_`pRW5C0DJhmp/
%_`u&E>EB%.g=X&_P?B1V\Xr^jV+$ag_(+i>#1A#VNC+!c)Ffl$GXdiU,iU:O_>que9fXbH.E%\Kk"h3ii7q^?AB@,GhP[S\b22X&
%Lfbf.h-P2J:eHF(YD7M=8L[IW9e7V@Pim`dHB\d0B22j50scB_&Dd(l=Zqm+1JXiG/n>I)jKR.lok.%lQ]i1WPGr^;emW$(6cG-I
%Zjoqbk-@=2F%l"ubZ!A-5`13U#*I5$C(l?Z0uFkT@iU_>RlPK^Ld[0cH!`\;3p;f;@>lQJ6D4RCN)``C%$Up+*$ncOR:BS]JJ0f_
%hYK2gN,ecJ$P)e(>8RSQ2dlnH-V]jF$DsX&3#!R\lp8U]Ju45?(WFXX/R)P4M3XCM6^G2IH)-7XbH#A$VgIXb&OW#ic=2k'M,b<f
%LnTN_%&VAW43IEW5i.1BO>jH^QthrD,@2i;;'LT`-C,cn%@5?tBl1^D0If8BU93/gBG,0[6J)HuObQ&sO1LFT$5`_pcl?'eY;V%Q
%<`>igNi>I0+r^g#%?@Hp)SUrMmSK<j33L^be,pb%(Po0F/]a40;*iFZctpaW$rZ/,=ia8?$E_*;][3j#:;O0/*")`*:RFLH45j(F
%-6Q2#/nGEH?VqN*'<9!iY:6'eEcqKC:9Q+@[Z!E-Q'J>198PPsQ^H1oaal:u2"QI^@$q=7>ND'r$GuWj/H)#29(,gd63354s4JN-
%-:J=6%(UWZYNKi-@A(J9'_/1[8Z3Ue)]./#1V61[\]VS-De\`iJ\R%%Pp3&'OL,l"_;Sp$ML6\h%*=n+-Pe3),Y:/PKZkib4=B6K
%6ft2GLA4&mmn^+Ua!oqR[49EB:(*4Ge0d[CVR\+Tr$`=j:(?"X+2hIH:g)qj'\pDE:mMQY%%:%:71$IR0jp_CknYRt+heoc^JRH*
%V"Q2^<YSS,6(+"<c=GrAE6mF?`/PY0./(uAbGMfu]2Q*Xrh8$U7FX(S`8qKO3g#[k-"`UZ!j6!9N7Y?uBg;OgMQuO$Zom<$_rF^4
%0#IP2_h=5>VK3VAmS8$Y5\``nn5,@(3[C():BpE1nT8=dW[ZV_[YZFdZU?aq[^N..r8^V;.s!Wc[@K0]m0TN2BCjg5-@K*UC25&[
%OMna)liR`8.E\MT[M!(9WAI\]lu?u?YhsF9_r)dZf#>NA`-corJFQ*%<8#2(36I4kIMU\J;s?l\4&q5Xm)?miMUjMjQJ(<6mNZ`S
%-c+\[d`$AO_4q_>j*2'7D+)dCMQW?8nVon>(-3WL:K8YXTb60@j:/MV_#\ip4tkJm3\jMSNFo(lG<q3,G>'KTi7Jg7LI@?RB38P3
%I)?Z*5Eh(M$dmkP8/g4hjZJDU,['o$OY&2m*g"q3i4WbZZ+%q,kEAQb$QQT&ddPMX67c-D0m).nlcIr`RmLS?)7AccW?Psn=d?bq
%e2_hf#J;LD;VN&I,%GtO]LGNL/DQD]h7tG0*t63-?"mDU<qI_49_hfS"X')*d>!N^mdU/_as-*>:D)&O&Xt`53"2QCRtGm#WSje"
%&Opl<&A2F`Ga-<0ZqJr=5q0dH*#9bKqJi6jip:+WOBcOQ&U156Rn>g]PY-<`LQW()8UtP'N>:ESiV%N1\&=tB#4uL;3#:Y^QkFF2
%,dt81TDI]$!u0SO$H,2%ABDe\8PZY5#l/18D<kQ8kp14LQpN%QNU3q<_fD\HJ?6CBS8kg^$WB(.W$CqDgH]",OI9jN-cY41SjU&'
%$PeLg.gb$b(RHqs-4ER%3J%sem?ohJ(O;G<i'K>F:aM,;mu>`BL)fUuL=W4=:Ik9UA3I(25fAd*,]BbjLLA%2;DK0pdmAbHS]U(s
%+\[mBg41O35jff4n5R7^Cd4*AQHnd6JO=f4<!I\<;@^k/FN4TBJ3\rjKWS(3G,R_XUn;7ZPp<_OgLDEf@)qmuT>_WQ?Up%_2;(jC
%ViAeO*oirI^^G@g@VX,6OTIK,Yn@*f?[r=G=WrP'GNIm?BN>]e,K&t%3q_HpTZ.<LTO3;.^Z;9haJktG6Um=TTnU=[gi&&eji%lh
%=rd_NnT;R1nT0p^(\$L@4LiC\d?GAT:<^<sQVhauV=U:;UqBGi^ejY1s15J@:Rk"Z3@ppl>\/J>d@p2k'6)<=)V+)sd_^*)a;O[-
%^DtSc.W<*&Hs"7<5@0KC*TD96%@]\Zd*CDEV/8iEEbair]MWq!M&;@$@L!]/<+B%A*DY#V(M@rV\kiOu%8D3=Vl81Bn>ET^l6V?V
%bbog$q,R&G6q(s(7Tm#:aGFpe1/aKuL=8OTiTquQ1*uK>"cB-Enup,].RB@5.4O^6RDNC.So&EVh-XCECe*TT;J_`s=ZrLn'umKE
%\mlC%\ed=c.8$''90Qo_']f[fZ+.G$^T`&N;L(OUUG,u9Q+M&DLj:%ba"9]WDg\$:$YOQM\Xb4G:jZ&cJheu')(*X--aItcrillf
%*)m`8\$`J(m7G.7[)Y]tU98)=bnR"1F?HG!E]qt\Hl`'n/;*dW%u6Z2<ADbB7_O`k4iiuc7L^G@_+,RAJVa8*UY<5>T13b_ZbrHb
%D>o<_p)q08D?Dq!lM/`FJ,XAQ5BBWpX'PL>Zdn7t\*E.9s8:c%[bNhM;C=c0dqDa1"m+7jfiNF)OIE)&Q;U4)^BA&^qlif7Y;@&5
%)6d69>="-2Ktd1[rCt_T&=b[_[:fPpDUcE+eOD>Q0Xj\1idTF]qlLQ\&.Z3Uq$s%l5c89dC`%9N-5n[R[@9Ds)MQo;NIO<JfLLdq
%_ImUep!cIA!aN6I[N!s@rpW"GbO*GT43;kq^KRaE[/B&tV3K-1]'[\j;56ttk8No:8AY(6oF^f0Gu@c@ja!\/%U,jLDP\"7o/(2V
%I)ms`Gj..!*47oA"5W\9fP_TNMJ.DtA6U)BP7W<BQn@Y^CaSprS7Xc4&S6^AdJHd#Ns(O%/53-[:bT;qiV@=I/m9<N-!L&hg0(1S
%C"K*@`ZY/-X&CHIK>X>K:2l+GA1O8*Wfus=/(&+-o%eJe;+"rMG5fJs>Pk>U2-2laD@,q,+58mm\gB6eol2%SE@RU$>#jiXV/DbE
%(S^"nVr5)ENbNe7<gTXur8HVVB!G8$i:EBfiTnuC]R.8s^"Xq?oX[jJiH(95lfTiAXek1[WE&9RiA.XH<B9Ag!oVU=BUEYEr;JUN
%b=]1t$L6,-UfOq>?\BN\YKfqN:%7,SY%]["WKfgf[!pEWkdt3hb#Xipjl3Re9tRuDj(>LseaW)lU!oZJ+SM2qmC8]#Ds2c*":4_.
%^+V%$1$qK-gpp+/P&,>LaCMbTZdn37J#_Cd;Pfl`+)H%+a<]`fcNH6**,QCm;l_kbs+E%C>N_s<`(mdaFup.:6+^>q@M;bZHXg_Y
%ZYi:rb\ma*<q*41e4W@Y['0FV+X_0JXPU)HPrep=+GkN-2ngr8lA`\V"`g6i;/9)l]N69`DEY,j$TV1h/d.?6i-+b&f<':OKE!m2
%eo+abm6O-ZF;nPk(#M^^&[ltMqK;Ycj++DbIEC)LUY@7%S"._N_'fm^pP7)&$]H7VBEg%1;P+)j6r!,Q?`6fLVUA$;Fnn\2TO@cm
%"frDio@2J>Q(+RiP>j/3.VDLS\Oe80$9%FjV/cm",\*:b-*S8N9Q$(M\au*toW@O>.d]e[2h"57P0<gMnX8HYP?]_K>$sOm>V6mT
%j-/TcK'u"unBrsKIQWF'X(Cf$ZCPMs4R@IYXP1A5#**3-P9;5dGKPWtH\Lku:D>h0S)8-l6a`(A)qNeW'X6hGg[0l*cWr2VUE)9P
%cHk62kD&(_:_bH-Z&.Rl7N7+.cDc2PhC4k(*Z&,>,?5US/]V@QHen#=5)q+!`S_f`-^Ntc3IY4>T8E5#cC`W4'cG]m^5u!,FJ[f1
%Sbo8AYiI0!W2KI/Ym:$1J!GOKTQ/efhqIk'fr,/K,Ut\(jk^PBNaKLtDg2+@i>6VSdtD5!mcV?U7_]QIjjuZXNd<H;7Qgp`&n1<C
%F5XeJA*c-(p!.`d$J4=Q[u<\RWnYtF:4f("#^Yp+6BD%N7q)sfHq5sEjVUDo:p"j'_9iKu!YTahX6[X33$-^cP]=49r6^.L3RT)A
%Q&u1S@k>jmaLdUj[VbHA.\4adcq/i5mlHbs<Lb>_FsS2iEu`4Gpb!Kjj&4jl$!J,G;Y#B/3tIMsIruKi;a-CD5"!TQ^Z1.[rF)7.
%au:6h>Up)/-.k!lrI[e#1hu*P\-[,!f]SV7eF^bX9Tc,73U1peB+d=?ht"sUDA#%6)W#Car"kB#h$Z.&9%?_CiBN>[f:>C3H&5T-
%-8=*tR"d`!B?u`';DKt:UZPZ*`bT%rITPJAPUFMlH9I))1`jS$fS<Ch)rjl$B1X*%\1"hP`3#*bA+9lN^Q.,[nO\CPjGi]jg&BlX
%[XWBDJ2)%+@t$_[fla2Y`mOT-6"]2;=X&bdqBoYL[#X#O&ddWuSb,dGqgHI1Rp[`nJ*GSN61lq1dd?EnG%Lrig_YDE$+=R9No+62
%HhK@O9"S7!9*'LVbDtI":R@7fFWMWko+:?AX8+GSJg1>,&R9'"oj;IlV;Ch7G(f*kP"\/!*9kOW9Hraa5!$;sP=U_DI7mBa(a&X@
%!1AtYDb1ui*QPcb&ilRKXS&?cD:Wjl3F7M;EXN5`\h@)b/+p\RE+TunLsf$CajJR>e,)H]JPsH`$RagX,]:T)YPl/R)[QZ:/@\6H
%LU,`aTlQaom,<5d>"s00ZoZW)s1Hm\-,G5&h%q+=*,qg<,V!`f*tGE'ZIT.:TNnYXpKAn@s01a9@HCR?pcfF*5K%L]^QgM,j-KFn
%;S>q'_PL/0>O1-b>,6pLZ,ZO,=nqY^/^]_'s/d"uJ;`)Q&*Y?3&nFHq\QO)'-W*@4HniVg;+_Ab,g$5gY.Z*)I?!&cPU,6Io&b1;
%(1k.e$PLDYA)_gSr%(J)+e;%nK$;:TZU>RSoZs90BcXr),SGe+PHu[$ZRD$D.!Ms*&*YW;&nFJgjZMn9./L^:/4uYXB1sN7EBf@Z
%H:V[GOruROp?eQF77lQf`^K.mj=\\:SuG;WBOep&n\.+=dIFgT-cYV0L[efk?X:X!Y2DV%?^TY1/^XG:Vgl5E30*tg8KE(]DO,Q]
%2b6_^R@2^8hm.%k`3(C/_8NKNm+TC\NJ1ZmBE;WVY"cd@;)W1j$L,L/9s!()XP+q%RfmL?X#@4t&&kQfGD&`kn1fi@1i<UjnDEYC
%Nn"?l7#gW;7a=D]&s-Lq7M@ZEOdU^>=$(u<fWY2d<;3HmcdR[=R&6^VX9>I!R.poC%f4/uNiE!+P?a\6#.M(KRs9G+mAPuom4Gf(
%ioKBj&\>QM("=/R?CNZe=1:l+$Q5/o67VYKE*fMNs'<N*BJfn,;b1HC@r:ZB2*Ie>#q_uXn68Q%cPjHN^ME=)l2dI,TA954Ij96q
%n1;sg=HC_[rFG,NHkcTF8D*C9_#G4bL2j<;&#3_=8r[#\d0B'Nf1kc-l!n32m_##Gndh*8Zu2YQ/U$L_a*^Z6YOlMpXh[<8I4[`B
%m-6WZj*4t,;9%S+]s8\!b^7QU'&[`b&Zm)oN;IcIM;sqbG:7\,r$1Z4r)TY8=UR8^h#6\&R$#pi,f4^N*fcF(a,Pm:qUff0J0n(g
%4eD$?NrT+I6b!qQZN!#1I6NbkhZruE*L$HZa-6JZao:a>s7]m2s%E>0GCYCUQI'hOp3\67^6:_;ae%s3chIDg*b2tJ>HXKgGE^gb
%5;m*r5s7pdST!"$TW';)C7rUq@@*?g,B)`X>W(.$[a$$M5>6CLGYdoCQ9SE4UhKG.*c^@(l8q?tK5.gaj*!hjQ&Efq1fuBhNP#RZ
%lL0h]09)D^cmR^h41Z046p`m_P>021P;:ge9_L0`AF.(_/m:P;?\=^k=9E(a(QGikPt!XpXL3ZN>,132YMB2MeB]K7ZTiWp:4a[,
%:ka*"lSPlTpQiJ%$#oHb<GL@8F^I/],A*t;4dTji'h[5i0n?jeZRH&Qhm[/B2jRq1D?_C@*Nb+iP^ra0lOaXQEsL%j^Id0M=8J`L
%D>_k9J07_BEj3a#+dg'KW7Bau/j%]s;L"TD?7(Am8`=5YGaT7PrmrP]i51C'ZZ+kl<ahs+1+Bk0$8;Ep^.\keG:C2[?c_kP:FSsE
%8?e1CRIEm"80_2%H>!fmhhauN?U'ua2DL)TTN^UHqitqi4l^2[P!#L&\S#A.E#A7p-Bb"p*.<&%d(\#i_-SmZ6ui3CQV?28F.D%&
%2"?Ti>F5V7\7:+GnfBQ30Ka?8UT?ES2Wm&[qsAUsXlJt'ioKg0a8_R_^,2^r0-+Bqji3?GrRF!iBUKpo;u$_Pe!`DE4t80qllTkY
%S=d9C%PGL2PS5fbCfDk"[pYN*EtCJ>"TK?V*"mXa/2b!l*<,kmlMK*,4]7\t@h.ui`aW2_HFIEme2[%9pBnoq.?b0W*&9A,ct70^
%d*!Qbae>rtIJL=$8&D6p8XT4H;GM>d::@e7m.hf0>eI.B$!<B:7(gPG0c:Tq@eG3tFc=^=^?eE3@se?[8KD<*<QTXhFc7S*9^3IY
%3l\*:MfI_@UlI2'9UXBb`hAF_mn!@2=75j?N[6j\IHFFZC;JPUPZfEM"Y+/64".OhDr%'m8eRWd[D+BMP$FPUn(.2)*WLJ\a/\0Z
%mgH*?dPpa)Wd<^0;sBOLWtG&i#-co\V4*3+4g"/\\au*t6;lWV<0B@o_YnAk/0+Y<K^KmVqi.&tTA25E*Bs4IcVP5Z2?)294fGu<
%&d9?>X[XlK-IhD]0M1cY1S$uJ,N$",iL8Pe1q>.$Id]mt>T<<Z$U7/;elfHh5'!0OJe.%9O@6)'W'@LE\K9fbC@$R&Pj6u`^t75h
%I?QC&Hk(Nm0(AMEVmOLDOHtP[,C\](#mq4?^fLbOnj.+ABFf;_+i3]6Z.i0$d+.p:D)opl;2`38piM\B%J\oZbiP#@n4>MsalXr'
%gb;<fA94N`['@j;&qld=Ci2(+Qt18JQ-CVbH!j=0\HJ9oP.=F^k5OerW_#618`qGbga&Hf=/L&i,b5mhF=n0S`[@=(dqFt!>(.*b
%2=e<5ZMjj0\R\5nm!S5P?,r&rg#Z(4Y6:iZ(uHh5i#[9:gab,%2PG->%0-p_.ZF9/)3]tB8'Q;WR0te<kD4,`mp."S99g'\OZ-8&
%<Ch7u$(KJOWaE>@9/3BmoLkIpcdbEppNG_42+`L#[_$00.O'ISWC7?Oq7#Sq`;B^7XP^Y<BB8C+8aYB1+FQJ_D7mV:0CcM_Nf?n/
%E*n/a3o?mb2j>\HW;Cqs(O!p8h/q/kFb3ORm;D7F0*R+W5?Y):dsQi1O&[GS>!8u0:0MipB`,A6o^Hr;\$2OAnkICgN`1F_KKa,"
%]RcX3g8(AKmh-C:@r:[/*K:2V`rB&<FVF/,Ke;a$+-NuqHkFkVL/3L1H.;4l]??98k!I.qDG*\Fb@p<=hsNN`&`#g6'IH$:Y!-u=
%mh/TW\+*8#;%F;9'SB[\3+>mG]gKq!fOY[09nK+S(_f\RU-HAR6`IteTP3D<U5*pYqG(96q3YhnllJSgTYA5@!L\KAZ.mfOD;oeJ
%U\hnO6%!fth3N9r%d%HbE8@W`4ZF;QLI:XGL!b)lJ+55SrS2#=WcTk/6)&:+pg(oqZAOi6g9/B43DQ+)h.:B]*(M5E)0P+ea8BK/
%*Fs25TD6E'esh/YD]He)o&Rsua$8d5R/H`[Wu+Kd\Fhb?E=@LBo!PP0nuLUo=8Ddf<BfHI)`&P<ABZ\Rg4\>M)\*"1UEQi:0O02K
%9u]M6oTU^&)tkb7gl<u"9Oe!#_u%=G0#>N:=:';$D!*.U*,RM%5bIFjfXGBR0Mae(G@^&'jMtet+2ZhHb6]r>OhY/\@@#9[plYq7
%lQT8f*nJTV^LPR/@*e!G):?NDqFjZ:NOh8Dn;uAV(^*"D=&tAn4FK-r4t\I1liV!5bM2W]<NNPK;Z5l6H(]04'^ka/8]WS$Prt1$
%YR*Z&T-Q#=osDGGCJsNM9*\s@7NR_SAXo!NHK\hH3>&Up(,PpJ)me>5*Y+kX#9S4TCAIPrH'3)D(dXQ[/@ZPq^gaZ45<:OiFcX-<
%e!&5#V"F0r>bNB\fkU3K=FtP:E:.Haa/-:"DFZ8XdL,F;,tKiF/R:HoW0bCT6R%nOT[V^dI31qPlX#l'4;V7%lL@[Lo7+AHqTS'I
%p8_Ko]gpuS!t38;)eVGdfBTdt;`fHa^Be#B]iH$%Gh\!&r\X(FX-F(dHa;m5UJY<Jhqc`BOH3HY;Am"f5b`H_IfZrmeqY)I\&&;0
%Atob1?dn3dp>;KL^W2sX>Fe-oH+FI]po<3G;5\W:Pk,t^*dfYWT0RLA5tjg^%kG&"2$b.8WBL0UNWe<jDgd9Y^or],HB*M(4_$RF
%m[<]6!uS]?1u5MYg$rnp];QB3Dh$cYQgj8j^jZ84;ELigT<qSn5OdV4WWUICL;hMrE"q!8m!;3](g=DtBA]lsSPHtVm%<*FjmsQ(
%@"`^$7E&].'Vb-k(K.I2KE(l,IL1IDd<`Z4n&D;C(po&YK1L'IhinLFIJWI&BC2ct`M*:G\4Pn:?8mLAFJ2Rsef]Gjp`5HRRF;lS
%5hWu_4Uqr%1%.'^j6M+"1_.4@s([oc1s:#2J*-AmV`f)^5?i&uIeR(6[9GdP1r^&Dc%*^^[!U\j4fR_.`[7BW[8FLBDS:FR<hc$H
%*XMtq.WtY)^"^k@6<fP>_k=>/fH`^=hY^.V`IC[J)rmZ\dq#8Q@*'dYAgH@-]aFl[Ki5D9C"3-V=VqGrmq2Ds^F.&7gYPNMs/LmX
%[XF+Fd"d2o-C<6^L#*g+IN7X&]q1"Ub3edBU[R&05u$(`9'P<%E>-d8Q%QlUhLKUO0D_M6`4kO2rc,7R,6PK@IOg#,^(cnL&q)A"
%rM-ilKQjnshk^MS*"eEQa62#@eNE_bhuf^?CG]qGkH*'^#\lF\n*IG3(Ur!XBeb727OEp6lc:AYqSMXILa'XFNPmkm6,tWGGkD:W
%j8ISfR4cZ$8KsR\[I.&F>Vuf0.#TIX_>D/&gZkSpO1,Iq=2E4VrJqlAG]uf/\63[=q:1+jfr_^5Tud5I#O$3f]ktqJ/4lH"QC%/H
%S[4(..];Lan<BM*MqVo<6aL".Sl.PF.d]^Umf^umTQIY=h/UpSDH/Xo(-_&U\nG*dWHRB)cmL;qdjkLmgS/X128=Ri^Gru3;2T24
%O^Tq$Q=2:i2#X^0'H$$RW+EMBan4>_G-fSQGamM]A\4L&lG.=^Jl[PY,u!9(:IpU_Klr5VBc].FFju=M&C^s\j/&2n1M?fWCY``I
%7Q/)5\+BKshC)Ye\fI0Md;:5L.DAWlBAi_hcjj7:K@Ecf:FEPIY&sTJ9"!)Ed]_D[CP5'U@V+E"J+q]Q&Ha5rUf#%(-=e4SAuZ,9
%kQH#N#u0#C`C_MOMVu?qK(`cs>bYKg+92`:G)#2pG1c,(RQuhd]1<&/f=((u0=q-OOP4V06\<<ljJ39tbpKO(SU,oq(QdAJ*jhB<
%au'AM7kQHtj`+%1WUl2e^r:&b*i(h^q*(?8e0NG'W3<fsZ6ZguHk3603/Q*Ock:ep[8B[[D7e83>_R&ShV+!tp?S8A$>0$46d#r/
%h%*\6[90?t4kKnDE_?%Bj.B(WHZ*SVL:F/K]J),c'0j6RQ/*p5X&[-C',Uap$D1X;Rei!=@8MC2GG+hVUZ>KRk1\<m\EON."'L9-
%<hZF.r:;.,X)[FjQ2uu_1-^/nJmX_gU2s;e2Fr<Znh'\q4DH@JCa`F*`i"'B;ROpUFiUf/5@D>\?p3mC8W!1TOj5M-#G-I*!9`Im
%Ze`MiZe=om'ip_P1_7a._bQtpg8^KJZ3ZpWjE7HL.RShSb+r'])kGj3A*>$2hh.J;[8R)/ZI4-.Zdl(E;)o#@b;LnX2;9Sh[;6fZ
%LT*C6,ql6<cpO(CA!$i5E^SUW%m*(fd]LJ>bGU%XPD@WC@cq2-L5l[".uTi2\a=?5LNU?<ect3:jo:-#^O78Yb"_3Kj*n#bLa4NO
%WKR>(@k9t_N@8,>lH$VIUV3.m<]6(@kU838Nn$?(S+W$[(=?BJLrNX4dPj&7qqBo:5]/<d^&a'fD%:nDl"rbje8Zd,I9+'?c8+=Y
%0p3JpW;Z+JF,-^^,$;@#bk>&5Gm8r3\olLL*\3&+W*_>);9c<<H_LFN/au`AG0lml$HYb:Gf;.P1.":cI+^L6Wh24J0tTNGm_?f(
%iC%C(Wk>^3(!A8m$c+jI:emS[9GLahbMoEjinYbeaMdqcL643U/*q1UW<)NFS1CZ6\$ZG;gE1m_)j[_iO+r$CpQfuh4mafPcF>f/
%hMTk/`(b&2PF;*'Z9g,^kEY=LdTd:9Q&E4<,d84QM/o2`[&cSBEeBIJ,aA+@JJ<pe)TU-U$ki\Al%!;_=MR#>LNlPa#.DNDH^8;U
%`-'_O)\,4DgIT8#TI72-m5%1,;nlX(H>pB#ZZs8tZ^d-F@Da%K[99XuoNR;hh=]p5hSYC?)61,#[@U3@YXpFAU9mDQ16dW(l2XOU
%Cncks(q-^>9!t;6@*_n(5Q.%Cg><[+-XN]!a9Ro"lLMGm>FK`+m,<2/XW$%)r(+Gd^"4ef7ZJEWo'>s<%*LpSTiNWKD;SkB\7N-U
%\q.0e1c'!:SC(EKKgtTu5cJ[\>GQgN'%AXd=(3SJTeb"FB,W@\P]&EW+CM$8*W/D4.i^Lq!Lng0)E@>OOq$`G'i5$WoCRPh-?aiV
%*&l[6&5F%0d#_qm2P[/p_hQde/$Y*\]sj$sr?fX^<i(+h+H#NT[l;.6NdI<h2$lDGK<!f;;)O)<ctm@KQTdf&_+jiE?IZ.SV!HTg
%^Y^jhkVJT,e;9ZKJ0o0on[KP2R[UL8\CI$E>Hk<%8gj2l).<uN%^lQ<NY,LN;dI#b;QJ3X5n_K/SP6S?Mq+\UcEL&b>GG6cYbEVR
%?&M1sDdBaoMMd0%fAhE?r60)eDrPrI:`T1pBWnmbmi$(Z*KT:p+P=#`iV6h2;1Vh4q4OkH\7[4*gYK40D/IGGB'[)AATc"3or,mQ
%BLCgSG35lXl,(\K<Y$g1/8*e9M\+[pDeT@%2u:Hs4<cC`8)<lWFKnP`Yd)$=&pp6JCpgDrPn)O#B!i>=XfQ<X],2B'(k!V^^bs1Y
%mcPo=JE'W[2p!AQBJ`AA>As^De@]V)IbcnYq^-2YMfLaJcJuC[.\3#Xe&&@A2]B]8gN:%TV+dP;4me#>7aLS[G#2k:W9QN.C!WfN
%4__MCX5J%B-*/cros3?Tkf5UD@TBUK9_EDC%XZUs`B^W`\[Y1LkK15<K%]S)c*3A3W2`8Z0Yb$W>(rW&VZ?58F?7+_p%DbT:=J[_
%f8[Yih@"8(kg-W-jpo^]VRMPmh/p7$7SD'r0+OSWmQL#`Q/^*0?gcd_mU^B]F1_86f<9:BiCb>b?C[KWVrqD^_6C)M]s7;^q?PKF
%`Uh[H/KJ.[C>mpBXRk\N$86!t_lkM51\X#aj;#pG@KYrlaes%bn7$9qhJR]iD8!lsC\0Mt\80F[m2e2MH='jp[j??iF^H(^GVMF:
%K0RJhqd7\.e\Y74HN_f6c=O;BiQWRTRQB)k\_8q!e`0s%^6,V+O&ka%/_)=]%[Pl=@TfU)Mts%=%Gr5egZ=DJlegjpKb(p\.jlsq
%>4e,cnR-4B<Jqb0oB2a;rj(G9c-)*Q,AjIUUsR@uN9t897W)d_5C<%)4]C.W/IJ0Fr25O\8#m^=kAr:g$Eq%\B;-<ldt$D6"&%>3
%oVEsP)*=S^kejFoj[;?.okV#3W:erS?WJfGUZH^g`C>/6[rPVU?W'";meDPSN@[1UQRlCSHI'CZViP"HS`qT!p!P8iYrfa.!ig=F
%4p1__U)Hh0,)c.iiKLBrBYb/b:%%]51Y;E3S'a09n(o-s&'E41EuQXY-EUrFF7JYh;ITOhl,IQ"mG_aGU\uK_[9A%Wr7ehU/gaHC
%Y^7d:3-'r\jk6\QfimF1>C9?(g9^0JV3?;gl&4)gNLaqbq6su_B5(kf\8*%E\trcK<j#cC8h[;j>)oCVrT.efnF?*r^2d)j7lm0o
%a7W+LBKpPrhObU*cW>>*?ELk$?S\2+#Q;/N4ZdF`m2(*gBA2B`p=6e>F5Z65V;/BNqEn\l]JTr3jf6Y-7]pLNS2nkeqqT9$8mD/?
%Q1kS"Aa8q]R!ZH-4m]%!QZ=&)Ho%h4QC"3+kK^C$Eb;=j^AQA,jE>^tq\^nEqMU%&=*f0Y?VXBa>+M67^\F6m(Z(N%]WHQBrTn)#
%=#qWF[]oO@._W(`p02i_eQX;-BC8)"WP.nqnD/2+^>WhAlo3,<V<@6"$Pu$27NkRRVPe#jXer!<(O"8g`6qe7`W7Z_ICa'b(<imq
%S*B`]eIUnuNPe53n^Uei^%?V#Q[X>Qq'<ZOET:gqF1/`C?Fd!s9l%08f4hqc"DMAWo-eHtO6s;3qrD>BIQ[QhmHCIM[/56k8:*es
%7=+VdrAhPlU*m7p:M8QEl1O_9Hg,/j:G:/BlhXL?\%5[4k<DY4VDi*kO4)#GDpQlcAssgj>C4WZoW.(k2SJM(S>LM&/M3dmBC2hn
%la(CRICQ[pVN8-oa6AfUf;\Ds`oE'NqpVI036fLQa%lL&lfuO_QQtg9qX!;$0O9.^I$?fJYA^<l)h'/_264D]f2gdW9/lQ"S*=jf
%2rE&Sa5Y';HHYbP9fI,T;mX%!fr=ej\&VE?q.JF2EdQrlPd]VU9c<e&%AoQ!^952?Ed-^/Vq+o7+/d]Qr$PFh>OT:#jY%,SVi%*R
%R8[=^[]39\+(+A/m?Mn>WIsL%qUBNJjCmhL"p9:t<i;fi&(@FTB/Q(QHu2MM<K:L<g2ur8<--sQ_J)&Pa7f/T@I)>5XSM4'HD,BQ
%ApX:"IPIrDn(_Vmel\AaCOUX,ad9F,l/r:YhbP&3?g^Y'37Ni7gMa6d:@E[[D,)1$IC_Q>DL,`/qNKO$ReHLSeoYkN=I]:>?@@NA
%VX"K_bN\_:p>XKLhQufDF-#o/O-VtJ?9Zfg?@@64V2oDQ]T8uJ*j*1lVB=n-qV7h^7X"UTcI*ZtdD=l:dmn=3X.,/6Y+4iCnlM_R
%4?DAFFnt7d9=t)"g"FTnUt<1R@@EV;\%CBN9AR.>1]"7]T<UK2V3r^CZg0D-mJLp8oCDS9bg*8e$T!Q5k5!65WQs7dcdf(71ZbeT
%HfjYYQi3?7H)W]k0)Oetgf=1CChC-,S2Hk:[Fs)YrPS!n8p28QRGG5G?HqoN]rKC"bs$S;qu69NfrVAWbh7oiqCl,,]ZJB@QP\N&
%c*lL\cRfAPDs,?.:RSc$f4uJkEj$DDgt(=jH#EZBqQm^kQ20RtkO.HWgq!B$Bs+nXFZS-bHN">TiS=:YoR,fVHTQ.mp?MS)YAS!%
%UU^#@IKs]Mr)*E3G5gMl^GK;Hg"`1&jtqG!PC#0p0UE/>$S2%Lr<6h\H[Xl+kB:HGo37p%Yb/HU0>)_$J$\X@Oaa]7=[0c;(;<dS
%CN66@D.t^\qdFfur`&[$q!<][[J7U`'J-tiD>9%X)StUUZ`=%FnZ)0E_d]N`qI+)HiSr=LE#Y]JCG2R1Q3q!+o;19`L$I*US[Y^I
%J#YZ<oQA4!/9Rg"*15mYr98=kYpaMW5(9fmq!`O'?*$0F/%)8s^\bBV4>)%:2BLJqY21^*eW6l!QY4m9QCZRfluI:DgRI;+eapfO
%M=o7urpoU(cLOuti,ZATnQsBijZ`$Am+J^[k4rR%VocS4R=CD\fm`K?j1dX(Of?'r=')8*)GaD"%h?lch"%h[P4--[]X#$#0im-Q
%^\k_Gib5HAg])Yuc-L$pBZBT7Q1iGmMqZA"rj6ih;0\k,]f%FD%MS.a>P$T'NNV_&XQWFj(G>A4?e`th)ii:koR'$0^Xta_1Z'Zb
%+eHt2M=nkX<P6J(IOEu)Ai<(<3-<*JmHHW@Tl=*mCieQnOgi%E)uECuV=DZSo\B5QIGpVnDtZ#T`a%chQcu@'S6>IF];6tJmGan$
%)8(=G2VZ6H[^C4bfWi(JcBP`)cd,_6.shY)C&(*%^-,eEm)?s!1Y^Hp]Wd=)PsbH4i:,5[X3Of6Dr/*/BCVa245N<7L`UI*o;f@G
%ah#!&b,r[Xdk7E%g"C`45'c[ml+Y='9_\M^g9+Y*p&(jL^%YcV,'^Naj^q;WhWp0E-f13J&SSoUjRMMEjk]7Qe`'OHbh'2GeT\i@
%F1$&\ZiJRV4aL+FXI8n/i``$0f3UNgI+hmW^NhiKf($.,:UKq3lcJbrf?0<UbL4rThu1(SjP0M-02Iq,]urWG?S!imh=WEo:JXb-
%]mAC[Bc65t2d`uDT,,^9Xm`u-gfcpj^Om`7hQ/PHT.M_ZYF_lb[QZk/CMrT*o8AY;cWX'#HbQep\ahlK(j""6k@`5hbI+B_2Z<I#
%<S$Y(<3dJ)G8Jpk(N7U*?g%@1gt\*oY;u&o\!DBke69E/\]sADZW11\C%@\J73eE>g["[Q:?Q3fr+tu#nE=_u>]BC[gP(u@R7uSg
%S',WAq.8`.@qBhsZB92E(H.:<VR%5,`S.r`gmbM7inDPO=547fNf.OsSb?ZAFlDS^[HrA!gfi@LBf83#P]et"/M4>9B\offMo'r/
%lG_N$NV+*q`TkFnj.f]A>M4^aY?T$h9)5TmhIc*86<ENf>S!]u?61.nIX69b'!/j:httcLp%84GP?3ifG[NWaSaC^3oksZkWPI\,
%[h%Z-MqaRG+27.okin;%oh$jOF*(Y!4(!&El.mZKic6tnDg^2c@nlF[et.7?lt(?tCO:c]Rb7KkeU>+)D<#AK?X3HVqchB1G5"co
%T0'7*T?b'Ph-smZoq"*,"4OnH?a:IXk#_8aK4i2*kMX9aH$3$=4aq[d'$MC=DQXtL*IcjLBHF"J4t[kd8'dbHmB=h(*F3d4c]/f7
%-e$,H&$K#ph]G%3IG?ke]/m2\5LiPQ0%Y;Bc=])M^0/MtRP<!Um)AejS+l?pe=5%bqSlb:`M]nXpQjsnhHjISPhn!?H/uUgHoaH<
%pZ[<Lhl$Fqq>8^cm:YmK*j7KYf/=DQ5Nq:t`=K/2MpEKfT?l(Q/j(_^5NZT.mlu7`CT`.ZJ'-!P1nW?B=3j&N^HUHPe2XHhT2"47
%rk+SHJ,["</0:EqNfQ+o\)qhr[.O'4l-"[hebtZ7lW7FWJ*<-p7pBUJrFaGPhY?Q3miVD^Xo6jaCBsb6B.)f)rNk)7fg3a9m@:sK
%V8Kb@U""=pjd5AT(LP@h93SB$48H)lQnL<IfRN`](KC!A#Ns*bDl*'=2fH=k=6Inh$UYb8(OLqDV\bGAV_=%]osN!AQ.j>kor?QB
%Qld-q.^+n75?-p[gDH<,[J*<u?Oo@Re\3pp[[pfNZdnWs8KmD)[D+WulB@4ZDY7::%r,$]C[8Ck:C_0Jc_C3?4u_rTeMlX_O7gqY
%p9aABa`JFS?Pm]"QY5V[RR5buDXJU<IVC^+dP#$tDsis7le@m\J#\bl1-t5Ok0lofFOAcX0?fr5s)1'CnO8]$b3c-,JIW*0#-FBB
%=ghaU%ss>0nim%QnFMa&9Eob0/)+kEI]N2W8)NQuS]:CrrSk1)>i=NB7sk*e2>tg3dSg2<+1A3"/ldE@XjlfUoFB]6\AKJk@0IJn
%k'j"Kb3'i9UftGV8W#=m2l`.I8iOEJLW'Q>@Act@PV-1">#8o1W:L+6KCtEI##H[;@q<I:UHk<]hrI/#Q(X[UTPMkP%Vm%)UqWO;
%VA^NZ(HYaR9$jpNN-H#+SQ(1_M3kJqo=4n@X2Bs)0Dhl@[^r03M+pu1:$lC2>lp!aIOds3/q]DD$r=9`%[+AnqJdD&;f*Uf46>'m
%aGC)cVo4m#c#;WtHk-HU&tUDpUlO1d0`5g0^Rg"+2S,k7#\9r4:BesF=p>L`iE,<D8tGjU@RBQD"VZXne,c%<Vh"r8JlIG!RJEh^
%ci&=P8S5`j"KCLX]5>1g";\XM0@4-gBJ?#\c3J1M_Q"R<d=Nk8<4@=1pN:#L;,Y@D(qJ.r1_Yal?LFY$>IR-CNIB:XCi8$5MT2bV
%>.L51TPN:'[48RJ6,#cEF7Dlj9geCH(Vs.Z=`Y6&=QV.,X2M%u\oGV_2;LYn#WD_HZ<KDkqj"0J;cr`fh-0eRr&2'YVpL4h7UA=M
%1O^237MC("4Te\72X6h8Pg5btH-==tgG$`>>IL^boihR_`WOr($9orE5BnO>>*0"66.Pn.^9-qk9e!:5./):bU8>+jb;\_JgQ!pT
%/r5NtTkYRdSeSk,RfW>V7iZC^1Xa`93P00%]3eq&`",5kCh-q:a:H<:i$QJWj(4;3^Vf#s5+]URHt#(<,M"`0T'UHViHp8udD$k(
%(qO>p`XR$)Ym;K]f]F98f%%V(e4t7!r`4ReY-']e\R$SKO)uXSmI8.SDA!Ht(N.bri1'UTjJJa`$Ou,uhT4).;'',EH"1c_3pOA3
%a"t&7NGssWDXn?sc`T:%PPc#e]?QkXD'N'N8.$#JL(CNP:=aHd$kZe,]Fl5Q'\B-&6hG8Hc:R$pCoPrEo/k_+cQEX*DDJnf<"2p#
%]2:Np/T+%b:E8hVBtpP>l>.+,$m]Km%E2/WK=i-eBD\20'@(B7hSYKuF4e8!<!%`!eTN<=C37AK9^V:eeZVkqk?31B?b>E6Sj(q,
%p\HeiRsmML0S`0aIrGf.*1Tm8@Prn_5=$$qSHm'`-F=^rXplOLll*ROqqG`P"uolbIq#n.O\5,>I(Hu.%t?ZI8f)A;=;JQS&A!;`
%TDtCYf(`7=gN?s>cth:i)u*8#C5Q5f6>P_:FpcKT_^D*rTr3-N+'fu`p;_[^YD__f2K-*l0_$HAi@PddT0j&@"k<%6_gq+kJDQ"I
%Hf(gBkLX1t&"*)AX/j#JaJ1D7mV58e2TWkrV;D\^='n4a>n'sl4W>51SI"O!EHQE)?GY*pT]#TIbs3GHYB@S,!fq`e6]BQ%?.Ds)
%[8m5:)HZ?2h`sDb<.DBDEQcM19V@%`+5kTcn,\TPaaUD\Bc0R2eofUM(j!IjbuquUBIeOi9#&tN]@4p0ho&m:dk!u'1$ih<=76$c
%[""G*CAc]f/Ud"n`)@Ka%K/bqGc,q7hh<t:NSh[7qlUC,n\3oOC[Gn$mPT+,Csqh<;`ckOOF$eY/7+Z:?tf0fRdIYIjCoK;1L/O&
%Tq0U@a$@8'nMJSBn30e&'o%DaHA7&A)U5%[Ri09;^r/6N`\T2tFtWp.7`Nt1Yb_?IFFq"?98@,j/i'k#LaOsL!([DXJnA^"oJ3k7
%bqp@U!"`GB16+pKOjQ;n6$('I:`d1L<"#D&7h,-M-UBe$K^/W"lRJ"!X1gW#ho\c(bJ%$0f@2+fZkUTeGfdIADC9s^33B6^jU!GI
%feBJoAosdQ!Zc+sk3m/!!rWkP1_9_U=pdTK_eKc#Ni'FoR2CHf4V6gj3>k0c9jYR\161^7A:t-ue'48#nN[D5E<MqP.\MM!2k>m@
%@dRk<0hhgk<(C>oU_q=89K(+Rc&2i+$Y60/_9C,24/9oX_TTGUESX%$!@#S9b`$0h6us*]n75$kWWX5&RXgfCL?Kb"5RLqpjLGNs
%Q8u7GOYLOK*f)?k"K5Kb[W65HKK)4g3qcH*b@(=:,%K!tL1#[%hCATKN$3mO_'4S1isb3QM'@P@'Ui"SZ8EG''-JVYgMg#T*<Dpt
%.[umeR]+&_N[fuKD*"-IYpp:L<GeI3Ind-;UfX]89!HF^\>/B[g>`1l7bq<`90G\`Z82tB!(<)GWU34pT^96`:b]l$!e=uEZj4c$
%Hp%kgJ$!.m7d0iG+:`Fip+NXrYZ/N(`X<3.KDeJO+8\SOUX:G2Tf>:j8&B@O'UVKe!]6G6h(Y:8hj(U4YDI127o$oN2$bFm/Qe14
%\]@=^b;cY5Vj;0BJUk,WKb4`."<ujjG3V-p.i8?:#+.]$\g[ja[YlK]6+]B+%ap$0'i<C<=nP5'[7l5ch,:\4Ir$%Vo1V4L)4Z\m
%6*.C$U]b=<VbfR1JYj7-O9nk$oTff@Ba?K7NlN'8kmlEm#L,"6A>+hF2M"P,#u4r\HnQ_H4bN6S0b*mh@%`pJAYrjGgXBSA+H6]d
%+t]dd9%=lD^Njc0\nsItCR]CUC^IE8K1=0sPmKcB%fQGabldZB&-NoMMmadNgZIE)W,AB)>.S45aCGAe(U-=$_Kn'I*?stUF<%h!
%+P2a]#eZhK(<Bq$E#@dF=!P$\g/%/Hd!hdSK*&5a%QIDmC_B-_!!''<)C34\R1YGcNEe0ti1k:2#Q:J*oE;Gi/D$^)FUS\#Eh,NQ
%8C[O'H;f:k7nA"Xg$b_,r>=&jL;F-+LmV-1::LMCG>T@\!-+2mKFp,H"SK[VR%P5<0#SO:CSOdqW'X$N6^XhR!p>a\pn"J\qa(\s
%\u%_uLD7_9*Mb9S,f^'nQbgg(%T3YP8!*XN*$(ctJd&H6b=R_f].)*:YVP^>6C3pRASb(nJ\d^6&7uO[J5)JlD86C.M'0(1*@[=-
%)\t-S3Z8d$eC&k!i30p[Qo)>Y#4jq0Hij\ilsKt\OR[=4P?/1WR?!g\8p8;H\3L@j*Cog>:b#S9UY4Q3>sM%Be4XJ*0McV^)-dC3
%.88ZI'l-_ce%s0@"F`8UD1H6Umn!M.6^J?s*M!<U!N*j^X6!aEA4A6Q\/8?\!.oq>fmSr4!bgqF/c6"^K'C()PF2GVL!DB.Bi>eE
%q2Ru6F`\*-h]$,*4inBT`?;$Cb3OYl!5LM?6QlG``PQ^_itaBu"!iuoaF;S>3SGgA"T](K5RDOCY3"C0hF$$&mnK!Cda9G-W/kB@
%0#<3RHIt]27>s2.e@Igfr(V?"jD,].H8&9.g&M?&eqd]^At%"\[iAK[OMoVi.`&DQeh-IC_NkIR9K2V?8-.<Da+NE@K#n5bL?ok(
%G14C/-nf"$6@S,)!gsP*K(kk7aYr@u/.A_)NrZ>%R?X@1"pkRr9+L5&1c!-=UJ%q,(mdrR0[4Yu3/*G.C^4H"G]m$U&O=-]>d]D,
%*N)@[ao4+m^s:RRWWNGN_BkcR%'j7cJiT3c,7=KZGi61GJ?G.;O@pfu*98B)"N"fHh9\"NlHhq\a$D4eo,p@HE5Wa7(MA>E(`S$q
%@Xqm&e-df\c_MMA>Au59JomFf4M6<+FIQ`!QhA1geD/uiR(sU-A_J's1/K-._<:rWTAV9Jk.20-$^(\YAOGf5H\'>V>QCu;*ZBW/
%!pCO,\VM%+Nnd:V(^)/h#DNZ+koj^nec.U5%1E\N&jV#>WQ$XNM$SiuQq%dG;(Spb!LE+-^ic%Fi"'&r'?D@o6QM.'C':hsb_</l
%]b7I^#(\U#Dds]WL%,CqK[p^/@\apTf9#ds*gDe`!M$&Q"(Yo(#F#`"VS`E'MLp.W(gl!mn!9+@gL;#q7:`cX+U\>[6qa1rZ((>-
%mT5R,eE!;H-bq-pI4C1AnI[$T2Id%c/s.nGWTG+d=*UooVU7cX?E4#/D$:`kSfS9M;Hk:n1*RP8@!+B<IM^HS"E6$XNZh/hE:I1o
%1DgpmL]VCGTumG\7SeP%CT-tclB=pB#Sq7`d$^%.@">P^7Y9/]%Kh!T"K8jRq8ospKM)C"fk+'jCr7TBKP8AiLm\CM9Zr;Ijk24!
%q%Ua'1;&'$S7[8>.9)`kGb#U2%uf-aW3A-4JcUC>O%"SM6PD`YdSKu8e;N*A`aI_I./l[I-'8Ct"_]#[e!Sp^k"sT*6dNOJd)QbN
%aY5k$\Z8XM((I$k9%e)AQ%96XSiT:jEch_0#c<msmMPhPU#moX6=Yl);gbMt/P1hE7LXVHf_p=[c2N<l#TLYeoZagS.Kemr)+Hn^
%;l4%qNcs,C=+Htr/52->!XKecX:G`#`Ml'=.SA]O\jE\ff75nqdi?CT@fja81_>U_OF[L'H]EGY!"M3A,r1iS2_Y5eB\qj<&C^s'
%^Ij1g5p-GSKEDSe(dse/!7.od3\V.JfIA'3\u6$>ha#Xq*C>S^7E+50(e.LI8piJ"B>cG4MthGu"2_Ys).9J3];uFh!dhLJ<Z:3S
%r>#8'YRQ=t'UrN#LfopSEF]o$M_JZXc/V.)ASS[GK,Oc,a-Q7ci-9htFG^.)TW;#IatkGC_[S:r#ol]Zm,h^faDOLm&qoZV"*b1e
%9+48u%V5Vp*lQQ57s4q9mgtH+"q"p`HLD^krjX#Q`5AfXH:=\YaZ?U895l%/q[%_H"tkX(*B5oB<=+l<*`!!%(]hWApg+dm2*tRK
%!*Bs>Yh>1l*&H^WZV>IE@*^r1NmMCs8p,1@^^a&7A^ni!#1tJTYjD_)]V^O,5notpltRr!iLn21Ul.!:bS14s-5S.oZjteQSH7[?
%8PC89(QRZ5%*L1S#!T3^Q^DA.5fYV[9EbK/b?@$)Dm13#f\f*O@CdEq@=[EJ>(QJQb-k\$EBuatD!1k:=HIJqR=$K)p/%8>Vl'mG
%%%VtN=KEkP"</qZ*l1s*9JZV*8dkcS,dL*2'%V522GF6/+Jc_?/&cN[GTq8-jGa0Ra&CA@jJWPsiuhQVWSi^q_1fDU,>lg$=>/[H
%a4VpX7j6j2.^@s$OsZ9IdWU`!GZ\87,QJ-`lYKo;(DcIKajH3Y'`B-S,&Ue2"+-.BE7kcU%aF*3FTmS2TK4=\29O>>ORl"C2U_p6
%DhS2?MG^aQm*(X3j'*4tE330oNf#F)O6D<CK*oj90c0u-!@`OaDZqsT,sV`=#o"__ZliBr&BL`MeR18?6%5eJCNALtR@5SjlemgT
%/e.&Q`NZ!@i^bJL*4T7=7kMdHUs@\MV%1t=0\hnd<6aN59UX4@TQ.oH0Z=%@jId)QI\U)@jP(sM0gpAe&JKHd9R1,RmNCK&0o<Pr
%+hKmp@k\2j)Bp<BfsXGI:`Wf%j\Ejh&r(CK=g.@g%?f=!=;+'mU0n?eAIsUtb*pNu0ha8`ZFgdl?r\JpJ.TntLBU<io3GNBX;K-M
%R#$D48Ep8t_OV"QMT>k#M5/a"Md,<4-5j`j3[SVV,t70a?)h!VR"KN`RM(;ZZY0?CGZj5e=i4s7OK!)+o]kA3,Ai`KR(Y56U]E6]
%oE5B>13CeY_,onW6ZK*6O"^ZDPj90,*6q[EEukU];GX.qJ;.<j#9VqR[NUuRQrFBra<n`MMpjRd&81ZhVo'Gba>?93_r:C<2<2X=
%Vc\PTG#7l%[#DnW<S(Ush@c[@/d4SVAXdLp_46rC>?*cs?ogo8%GCqM)#A]_Csr;!-J]O6>*bnfNTmYp/'!D'E0fVEBaP4MKQ(E/
%bV3q&#ugN&\JM.9Y"T3G?DdHTG7q?dF!j[nF.BnZH7[o.1GGO]&.:T\5]&(!02,_h>LLu4hi4)*H+Z<p`idg.DM0>@e_$/n!-]DS
%$I>uFJ8?Y<7ZM?s7=2$5>HG^T&FRJ]YQdTFpP[3/LkC<46C'WNPKYb[nES)S1^eTNeQN@B#@XK<:kdMs*#a%UKHPe>#0b&M"bnUU
%\J3&nB\BX#$'!>W'7fAk=Kb*O!Pks_+i@ZNZ60[B$M=Hn+Tgc\dnjJ_>_Ur.#dD\RZ<"M<90nqro`qRNiD(p*5UC7M)!H`h(n4St
%!J8V1+CqmYOc-V:&%>39W.Mp[EdHr2:"`+i,fCE3d;b:&UhE!Gs*0E>@\o#BZ5lT*d`9ukFqTN0NGO`3>PdDE!*;Gd84?56NG7"o
%VCa8YYp-^AKuX>3'OpUUiE@C\/>k<9Bi3rJHPMd!_dA03=%rU1L\Fq7#+4UMfJ@6;>pq0@DT6un>-;dQ@qqZVZ'FYn$\O5f!1/"/
%0/+$i\;k@hS@TZBXO)90WY%X5(fbG#0`dbLa&H!l\3\+]"HV$CL."YsD(MJF`[.M9`ek&U9D'6bW-H3=$\/&`,9VN)KT8R31otdC
%e)N]8^3E<Ro*d1#(jOEV6O9nq@gK*>4CNj=)@T$>@l$YB>T*qlQGF-U,)E4,Z%+mpG+h2B/_j%8P9OCi\KciLGRDAEYjtBt'G^%L
%@9,]8d@B3TQED!a<nTnIC:J"g]!<PqZta2Ug^FCK&2Y?'M9/<pOY`GNJ<PO$*+H5cCFfVKN$a:?Wf<Ip^gep8+JcWT5"cFr+m9!E
%_%#'0Kh)6$*<t)9'h2;R2!Oq?>,pW)N^*qQ2'X(M%4f/M3&[As"%F/cWZE*P'A+ogmV!d(Tp^U][feEW:*A/B+A"k@M50Km`"BLh
%SMG=L*"(^NKF!O1LtA<P[QJ"5MB)&D+`T=@\OU]"+ajBC!mV>Zj&,.KM&4U'"O&2Q1d!l8^s\-2%=96LjO@$-Kh(chL#KQsJm`0I
%N:Tn4E2i&@H^f`c&e6dl<XDP`)D3EjmHd4*n"ND^%rss`U$7kTnj*6dpV/T(RhaY_9aC"q.5YgsTsR341QIW7CCIVU'Q*tiJ?9VZ
%/V/#3H\ET*,-1q@2DhL3lVLIb6iq$M!E=J=!Y$H,e<!)F:a1]<Q9dm[T^:D\K[d5-$4534L)Lq+PO0-G#h-=Dml"&E/!0rL<0:`?
%Qk6eNJZ$m0FF]Bq5%+)2DV2l`GbOKF*G!M_/C>Z1TOP(EMTZ3+GV0<Y42`(*As,OfTs0Ddig4Jl$j#]O3p?ZZT@>-;Jr0U[n:1Lu
%7OR_N1]t45<*ua'Ta`e_DT7n"BP>FR+R-&.8]+"/Rl-$CLk:^;2'f%%7/MX(WJBN_:_[\<M"3?f/mSL\f#.#0b+BA***tjqZ[)M@
%6^GN`9i%LcVPF*foqTuKa.eu44&I8Fed\<OYWg-mlP98BC$>Q$6U%ju*HNGm8((N]9*oRd`$2AcdU<GG(PY>cZ&f&-"FaOQK6.=P
%@<ZUW2P7f?$pKIW:p@bQT:,s2lF,WbScuY@ab@O)Qm:Vngd0TTmKW'-,10(8]?85)gmk'l>'Oq&Hg($=4E@:GIZACHoSK(;"u`!J
%GLQ0bg=.C4l<=O*,6o>WHe,.oFO1"R)Cd^tCg5@kUZ`j8iW7b,h-jM^W@f)P4J=cgIJLL[miaCM^X,,+lYJ%pDr<V^A/h,[`[ZV7
%H'lpIA5b@L.'MYH%\us4HSGP597jQ_SYJB8p(@e@erVMJ^!pn_5Q]8G8:ub'e&%>XKl4,#U?WaL&r=e.Bch>*Q5@WHa?WZ""!B-j
%krP:th"ek+beQ^`YW>4=P\S*jk-0V,F(eE3A7ufXo2-?`QZ]BL!*&@hct[NtS,-$Wr0)aD'DKlT8rlI+\35VM`52scYi0i:!Ke6F
%m#C2t7T\5k`u#5O.KalHCk@88`]ZPN(>A)M@+/XM@Lf8V1Z0ZFTgh55p'qKOK1D$r+m^@9Jn.unnUU%'@)8-a-;&,p%L4#i:DjY0
%/oaR_PCe!ifJ5:=7,Bd"lHrbdo^Et35/1K0oE)=(E9A'*Hb/<B"G*WkeQP,=@7$,nG`i_B2C$&80ThDq@OQ#2MJCRZWM+=t$0FK2
%juGcj5Zk$A2(BO_SDA.sbfPg;Or5.HCA>"Ka/u;Me.@d>)9N;hI"CIF_&>ePNhPHD4P7S<$_HOV=F1%3GJEs<"BZ)],KeuuGEW1h
%@fc*n1nkJI*Z$9lZ,'s3i`6Q?ZoFZ88g-e`f@`J=/Q3JjLEe^GAH]h/[KIIq$4!7/mL<"FJrr/^KLVi\TS'<UK5g":CDDT+LL#TY
%,8nN+6]W@ml5TB<iP$ob777]9bHgF!fp6GFjaM<Y]Ua[W3-[.5`!7u<:$/"T-+RL55s0prSAjDR0,b!o#h!RAGc7tPYrpn@6bB<*
%"a.&*8g$d535F#4GR*naaLYhMJAjS6.;Y^$JdlQVU-Z$R"CRbh"!"nWW;$U?CnM,7)kSTV?F#hXi\;.`)$208ketkZ@\erO6VBFd
%4NK@8prWQo\KtLNa1b`tq&N\9$XDNuTa5]2Yb;Q.V5/_7J":?&/74E"m=7HQKjYBZ8/8DH6Ua?.MM?pPHpSZ1,A;SHcp2VgLZ;'d
%*hLk!lI]KZ&EF\>V*LnP+OAD>g"2CeD:*uW*-opi(-r@-JkR`i;cc$?KHM4X-l!]c\1$;?3=cA.GZKQ27NuNAmuUPtbniO=lD*U9
%Y/hh/Y/Ltu*KOX;+]QI/&rIec&.2sX%YH#>[-PX)HHQ"L]]Xlh@=06!a%^W,3r!e0)&h+gJY@o^A-eoB$4nC<6WZ1g@+25f@G/)f
%S`R+UBp+aYVp$VSF,NTO)%Y'T7I->X#ZZ*MUSl;S#a,<O.OZ,K%?J[T#Sb?iOKeOk#5.(uPE#hM_]X>960:`n@eEUkO#)eiZ-?ha
%(CtE5(s#4767>86FC(P(G`L=mU8:?o`M\]$=Wf(&J.WYcD4M$<Gl0tNiIG#GJbTNP"DRFo16#tO`o.Cac0Aae#f8J1mk`lm6($^S
%0efkkd.'Ei@8!OH\=pfH%R;@)dn%4,OUqa>e!43U6NTE3C.EM"KldciU#T_jPnu9b?JX]01Th:XE`Ud:U7_smlikd,_i#WS9qlQQ
%dT$[TjiE0/5+5s/PP1m,8+p9_r,D`k2.\H1H#qc-Y&VbI\]dJK71__["OOtC"?EV3([Pic#_C(4?mq>*.:9qt>[*@Vi5RBpF@B#7
%RPOTA;3224.E$-D%@\WUj`1uK8h!'+$X7a23/c-?Z6Id3cY=#E:)!0mSGR'r8>Mrj\m\ZkB+GOYa@TVP4GPC[5U]PGjE/;%hB`S1
%BYgR)?>Nn>Nt)&u/"OL'2OZBj1bi.B>Y.)JRL,/m8eHK54+G-L30%ltY%;C[X\=8e,rU9WG`meldF)Q'7aIJ6a:Y^2A:GBHZotr]
%DUA=n3`j`4m9$q.eTJF!j4FdWa,3+i;5H+cJnL`2L_NPsWZerP"BcWnRYf'%3@d&QX:KnV4Bn>Bkpep5N4G`5=$m:f/!5C!`fO-j
%Z6^ZKd,pCQhnT[<T"r7=M)C#*pi%*<H#`I%KIh;N>sXRIfR^ZeH.g_j,aDg&*4-Q=,?<K[13dK!k,%HX8uB^q)Y>_T,Uqu/<+hoh
%ZEKp)NoA+cNY#a[20ZG%6>&j"1i:E6SVu\-'U;Z(Ki!(J)56CVBkgt_Ur*1@r]K:^bK#g_PNQ&Vb+;=gK0osAKNa*b\BdFpPIc/*
%$ph<H>mZCu70sufDA!>.S)-PFgl=6$=fQ(=n\gG,H8*7BCkc+q<fOX?hCtb$:K=kJs+U@*]#RY!F*W[:f;V)oPqcRqa$!@bnm`"_
%9N,6.7=hi$&A7P5U+s#<QGj6/"7Hpj41_9bJrIddg(K.nf8tD!&BaYS)30#tDQDSOQZHDbg/RBl(rC=+5.^JCkg.EPSgbr.XQ,Ke
%[S$HL3m=dX#Vj2.<$7$M/3NpJGf>5Ue:Ip8<%U.'_K1mf,`'^6@cFWt:BB-M=VM8e^pG(q"*?t)h;bLP5c#bo;5A45nl"QV0S[Ue
%pmu#TD2HV:bG8=^MN%1S4@,?Zj!GV2+s!;bZL)U+NC4F/A<?mHEDsT4BYCeOT,ni+mdUl+ru$1h7N?15J[O]r/>:NMJSsh3/--i]
%kd=$17i'uK+p:*tJIOJ!!lQ4>/m_-.NA;bsbKp=c-2W;Oii@56$8JYUQbKs6K62(;'#aO[#c\>JDXRa5#W5k%W%J-<OQf=J?VZ4r
%>>ormb\SQS&K4e[\r\@o\q]Qh=UO5X&u=*;HfbYK9jVfA.Z_V?h3@(h=N_7<dtnV``.N7'WMaCPX/,q+18<a\i<6Z+aUl]o&BBqS
%X`/ZSf0L59.#<FViFt;X5qFl<mW9j"&KN"*>_C)@Tc7>QK[;0q4]+ZS[#klD/!@%XSmVi]QmOLXF(@d'jJd[HiF[I/$pk@/On+6H
%U$@FE2C]hhcbjCe'uVgD_A?r1`3mIB+roL(*@:4f@S)@q>\=A`NgaD^D;ekY#cUK$0m&-U><trP45u".X+3+2+-/j:$KAW*;)@5-
%G1k7PB>jE.fZXe;7/+_5@4@#sKcN$P!D-3p8$TrGbTMEqL4TuI5l=oC9*,6<AMZap]IX+-FuU2-AX+:drBCQ%/iV5g"ej+K>Uu>l
%_!2LbeP[T.)Q[k[-1;U9Ll3J?Rdt&RKQpCu>VfnL?L>PQ'PC.k(Dh^2"VI>2WhIXmM2si?1Ihs!ZD6M1LahDD7S!lMD&5AG'1*[u
%+\&sk1))$\CdSSC,QVt/%Y=[iai1"X.>Vl`V<Sn+9;%r<>"D"CkfaUe<"NVenJN$&"Nk>n%3]a?&^I?)$D5lU(Ii#Qn`8e9#U(0.
%FVu#_>cA_R)C,O@CaeeH,bZ?f0Kc:O.u4f<-T(i/7,m7W$+b_M9uH/S>QkFH'VXU?/?AOk7bEi&gX/B3fV.@cRPKVpHiaIIi//(t
%1PQ^SKocq>Ksl;s77(ZDBBa$+E:M@$d1aVFd,\fd_Ao*i]%'0'I-`I?!]mWT(k?9_O?DE<j=)4.[,o4OLId!jVaRg9EPuWWCaH,=
%)ID(UKGo_8KpRm`l&aU2?:%+>#8%J"+X:LY0uOLT#h@<0eI!D;_.MUg/`f'!CkcQS%/lNW<BQ*fPgcGn1&=J8*%P`Y@4=X\N?qYL
%<0s,;2ohcS!LXLn$\h2FNnK@:%Xr)HTaHd_/$<<7%\&1HV$Z*gNK#uR[mURSq]5_GDi$l<Bei'pD.0\J.)g(\'R0rc7gj6l'Z+6u
%nL]k+dFksp@^e`4#`$OonI:QcdEk&K6=e#9;AVb';!7"!h<:_,*UbH)j4Y)39!PuP6XUTjL1:[L1(t_%]^*g&Ghd(;GNn?EhOd3u
%+iodIl/@V7Qj7#0.tA)9hi=B:`o+p]_2n:,/lqM(.s-C'-[BfnY%0d=CKS7?d*lCU%0L!tG0<$rg_Vb;6%r4Xr6U#A"pngd5X=;T
%j4NS/n4kjsZ2(ohi9G78H\]T(Y4rBOms=VReUM^Kk<Oi1j1ndY&YAW+@<eOR%YO<B3L4O,#fBUU^CY(B3COIO+CoWbBdl\@aP>nA
%d(Zm)<#4M+Q4lSq8'C+IjN4o'("8uA1?`<]WH;\!#;$.%*+E"SNR(E?2/(,:bhZ*r35g%O)V>'PN&V<9lTp^u@/9D9^L3[d(udr<
%qO0^:1uPfsHFMj.E6qGlo;@4YGL/4Z@6bHOn3KQ/(^ph4)$WEc_=1qg9$-[7V1$2(@)+Q0(ZjoGnG_ok0Z4lc`:A;08RK7k(t9#5
%IX)8=qa8;Q0QJl$bYsli(mGL7Y'oglGO,im#=ITg,3o0CHS@E$LuIq>_tSr_KB^0:f"gOi?uduhJ.0Ou#1JuK.8O;_Pc'bG5Cj`=
%AG,%nSAb)uCr=]4+kba\OuP"T*1Cg>Vko$FlTg2oV[Rc'&aiG\#BK)l\aI;`].Z;hbi85YrXU@Qr<7b'\j;np%YNks_%K.CV1Lc=
%(,YlG*Wrg44;Cj#9.5F(QG.)BGO.!:$l4!jl9BPD*;,YTL6[qu.Sb7=<V70*#)cOb26K%V`s,1FrT1>9W`l"2ZG,>QO:'g*;I4fc
%*-;(R,J?mNrtj&rYo*3ELrHmM?6^KB$jM<=`=l5]Kg=(e+Fr70)i(@+[Kf?pN?RM54FXfm;@j,beXba1mD(E.>8^j67q7>rp9Pbm
%\uRprg9R.1#A?7p<!'+N"qJZ#Jd`E6"VanF&n4B7.J*lPK7d$G_@X@=`D`+:91u(-d2grD"BpU<a$\:l\=U?">;["m*sPdT,iogt
%H^4+;[c/u8MRZ'89EB:2rA/8dn\(re&5rH+NY35!Z-b9Kp4U(X92]*6H^@&Aj.p(-Oc\`!5o`%@(q^EmYpT\&/r5/7B`rB1FRfs5
%3NlF-h%?s0,]!X[Q(_!>bp\dPHgl_c&E1cl(mm*OBJm&_.g\\WAW/TS,L4fSYR,i4C2j.I\j,gL!'^*liHZdk/W%<Q"(;[j41I[4
%&'lIklI/,tJraHk[=Yj^s4Mac*BB-j>P&<k5B+79DYX)`Xu#/21sf`-=i2ILIt(rkbVQT*7#>GO;X^`*1qL'TSe9pWF*"[qq@lhP
%KEDH6P4o:AjEWWLC:L*1q]OgfgsQ!=DD6S[e'l)l6t4tf4[V(+n3_7cHi[QWkri@dna@#1VZhh*^CPbbmJVg'>L_YdJY<)<2.:Gn
%CDiITproe(.o1$'L*1N=$Kmr3(mL1k]iF4\?Nt@Ij7Y7LQi*SgT73iO?bP3$hmPa7-B1S+^IBP5W\3mO'f*cP08)/h_[!V"_clU8
%@tGTe8O/%%n^SL&>UWU4'V$L+kqNR@ck(0'9RHjB\)AZ&6jh\4&&VKQ@G.jFSa1s57"_QCOed9eq.V7LXlF5rm`u.LY$s\gEpel;
%]'A)`V3WceF`^p*&&oC#eUg3q&N:gq5UZjfAuA"HX^oNQK(-]a9N]og.ZqPmK<Y=+/bhE_dQ_S2I)eXm3G>aEE4[Tc(1;c#']@,o
%^(s&LYEA(N,#F#TIu2[b!#nI?[:2k7>mNi'1g$WrJcm?De-:PN1FUuu@f[.X"U#&Y"JI?`e2JLeF>j(T^8@!`C@fhj%e^IbeQ!LW
%bL7K+$1s%rdp:qLbh&4!iuk#\nbtZVeJ@BiJC.]AYchoXBUso:I.(a,H'C_lnA3WdIK9X9*Y:H?,XfhMA#hl5IKj=BN<G2ci%QBH
%T'+3+kX#o,Dtr@/I'C+@Jcm'@%0&d9P485[#upKVlpWkLH\tr[U>pLJ"*Z1m.G4E"0oKFLRG0;tb_q>i@0-_hR8eHg[YMgJ4/H!'
%H$n[2V%G+h\-&HWd(?*VD>-cu\e3i5Rl3`PdrNs?*&:(,,R".g3#)98X>Dh<)Zc=uGPd=g&>qh\9utR&;F$L)Bd[:<Cs\mCl&'d(
%cK5Bg6afGGoN2QmTc(qg$72L+;ghDrh?"[!J:TOOg'0^-ae.j%!LRK_)4DGIM=kk@p'\6P;lpP8a?l')d@5WTAAY?+.iSiRA]%GD
%V/3jA<P3e=S1O[#e.lp0OGo;%CQdedb@:Y3otXWjpqOPLPIjbN\.MKbM'7XT%Xits(/&gAckg&q7r<m;4&\RL;m6>(Gu:J)Gn%8%
%BV8<-6:N=F[@,/J=$G=oX3UK*a?U7=RK')]0*Fm$pOdLBZoGj%Ag+@sRnV79jOlO`OX`p3fM]tT>K@l]Ug^Tb1$m.%,Q;i4_;X2t
%rguDEK$3-0:R0\Q7dj-Y.:.es-D\n\iKc=75t<ao9\1[F"Ue_d$J^]Erh=J*mRSY-U!.?SDg.U@m'qeC`M)2%r[f"o-i"n\'I7G0
%XJ*ccOB$J*?It9A!]S=lcoZdhT#ei6JcetE7X@:XeW4Y=ko7/"^6S(WI,X;2NY*YMVp:sU!s0pa&-Dtl2K0pNr=r47SAXSaiJIa+
%KG>K>,B'G?;3#)H`N98i"N]8XS"N46g9mgqo:[AFFUq^k=O9=D6r$u03G2Y!.*4kgPZpOR&<1_KLc=)KQ;?8V-X&V8Pa_MA$(Efq
%%$1"cPZBX!45hZu_6olu"'NjJ^2KPYNVMAB"t\9_H$`9H(7IXV-=q]D16_(n$9!05[Nic&^thlTg3C!cnc<K3,2GJKOji&06\l,f
%A_44r\L2"^j>EHSkTDTN+!@-C+REmkiV\+e`p/E9Uk>sk<P9>V=H+%sm9\*p<2`>0[,%!H/9rF.[,O@H;4nX&,i7`IG's1p&WUCZ
%bPV!YCrN#VK4.Hi_6t*KMH.B18]$%!5^!Af-Sg.PetnRnU<$ca,Z$?NjuV35+d'pN]HPps_fk$uKZ+4e\MSQi@ir?Yefb.A,k5"^
%#CC%SE$cO-=TFjoRjh&TW]NbkaGQ>j8@\YN-4=rWmbd$s;<Wp@/9N4g^d-Qp?FRs.n'+n"Fl[/]5fu^(l<OOof=)O7#9uI8EYfQ&
%k@_@gibZ4FJ-=o'8IA^iO:\^sOHsb;(ZiSLj;+lN3:h8(e%^3g?b]?=JEr?1hhQOULEm153,bGh6_(V]^Z"S`^Z5ZUi>Ql`L,4QJ
%ae[qs67EZY&O^_7jBd8o_0r@Fmb@?&rp;r88^-,78RMo+,r+tV)JF`eCq3St_S#,tpV9U\eDBEJ_XAq$Qe=!=hT5n&L0U7Ua*DMX
%hXl)BNlY:1*Gr`AU*qmWO?*e$[k1]/lquU0lQV3T]i8B#)PO(?O;"Q\&?:2m'`ImfmOt5N<O;/,i,J(0)a,j5%bq6<-j+RUj5TH*
%X4:RDDQbb`Q8$\`I,r_V<F3&pD_LroT4[!:U#9d#AdM_QF'1A1M.6#[dW7F[I-DBk!f^CdV?)?517#.[^9\C4-0\lF8TmeDS9OnQ
%ML'-aj3Q'4WE`")AH\9@^&d\4<=sUT\cboc&q>E%fImgPbWBD:o=BBrI^NJ!kMIU,fP*oS"[7F7WY+J<_NA3HA`h>T6t_*6KGu.^
%YaCr:>8aS'$)VOW\`e.&B7&/Jpr=]r@IICpF[pi0!6>[Sifi'Tn=k)>kThNI\@_,lc/G&HPj*JPQk"*#!(rE'SZBid_?a#@8I,&b
%'&_8]r.nf]c7AWRF[Q)FfVYP%Z&CQMq^Fqa8^8QPBLH>V?7^ui?9Wi'eMhq72"*_sr>X:X,`DasUQuM_:==MM+:l7b/16uc"2S:3
%-mAIi_R7d2%fQ#$UjuAQ`sGu]K?*:5[S,]7Wt/p=[tPP^%X#%"\!:erCeQ=K't5/15T5cu_Z:ClY-8Q+?A!9)VNP!"2$B%-%W57q
%CK+H\HB$\6:O)4j4b3P,8+>)!42#=I(TmYm-8M;0=.YKO\YqUFmQf"c;iL0kLYVat%_VJt",Qqe!0CA^rJ:]So_$k/E"t:eBAE?I
%0&\PRqK!CPAI5p@[T17[q9Y`j(MC;E:EhmXod;9`qUhEZ_Oe5trk&>OrHSW;)^,cDcI^O*YF>?hgY[A@M,e4(-_t7hn%Z7ChEXL$
%i#Gc@Zp<\U9If+[.b"fnC5_/UcpGB?JG=8]e5eq&/67A,Tj7iDXu$;*r\!KAeVV-l`I\@\&nJlk:ecQ8h/dip"uOd6HTeh]&RQ(h
%AuLVY37Z:GlnubC,Kqadfi]+X21jh7&^/]+>0YB)9U=$S;A2<t#'Bgo#c/M;BX1[W*U)PS_A*Cb63em21&,ftO;"uI22FLs6k%=*
%Gt8"dbCPtQH:l^*h[9JO5[->rNIX&N"N4>&"Z54cOo)5k-+TQYNMD7o`15(RH[JtI8&ETS=ZeIh5Ngd_=NNeZgdbc6;2^$`-_=Q#
%E!nLD>a63pXgg.f\Hri(D<1dPo<f;]7gu@1:YhUEpTt[.(!hRgIo+Zi<k\R00j.oH5!\<V[!=h`)\qFmkN>Cl7aAhS.6B\CC'Fb$
%L]Nb7$OG1P%hRSXf9gNT+KVg=c@oPqTJ,i^oVe8;U52"%BL1':pmm>?-"pJWO0VsN1U82cL9/G82*+U=#)%!(#Vjf]6bJGXS"g-C
%]cSYI4nh437pqH"4m$.2.hL"/1G^Q8=Zj*)8iP=lQkY9Q]^tEn&nQ@r:q*#b!nV:jRjFQD2.sih1F+hSdWuVoP:b@d\IA-G:p!SR
%7;"B2('S^(R0-p9'T*LA3k=7\F2sX*'G,D.%7m+BHe)+Fk!FX2^W63+.gqBDllq[X:lfcp8T2Y\3:-j;fgejliC!<^bL=L"A8,R:
%TdCUs#aT_oQre':P2DARM"o$kaWom*UG#'umsLK*JTu#PO2]D9(-hJ<lh_\)q0NGAhUjl\IsgS'B+bq39.ccu][UT/Z2EK2cG_A4
%k_8_6i0F-*V%c3>#N[!/kJCC!W`J6p,777`mfcZ\B.;AO\7=,Ch:l5,Z0f2+%UUcMTDlu%1.BM4Ba\h]3_qCg-#8#,XbH1:r9IA9
%e0=gNiDHsqr,!4M-S7;dKdBO42;N>ca>i*-bg47+m]hN>5AQ]p%EWUT]"^q9\2M,B#cB.5][EZ6Qp$fmhf^@bQG7)CA\CR@`JE`(
%Rtkml2l>IS3AZ*(6n\s+a&*K$AoK[nUZK%#mF\f,nar]dA(/"cDd#4\/OCE^42uhh/NjSeN.VN237oqq=I8&Ua#Jmd*!\RF!UFbG
%lkft^q?lFA"nUQI[:@\&6aURpfX)&Es4i]kpU4f'fX1,ZD-B"Z/OJ7"G&1>ZGFBL?RhcAAS^>#`n[Ug:R@BK^M/3@$6>iZ[PRjrZ
%l*n3(Ir*efI8Y@icTS8/''N5!Oqi_f2@[XOXg;\\X#d-u*=l>6<AgtIh&0!E`6Ek2S;080`Gt)]??3+UDf'R]fVhA7=XE=d=es[(
%-P\`[54s$OC?Rj5#HW*`_L6a:PJ<PSn:(#lT[p4&jJ$<;id<Gk&EV0K9R9_RgkCpC*,Rg`(W7nUc),;MDj>*?EA=<G!3._X#qR-\
%.O<2FUQr,U8dqpX:6(H%RpgTtg3K;L8b]d'4!VV88`UVQn"8H_kH>*GK$O,eR<PR&rZ4Q*n*m-dC4YQ`BQSF]?Hj!G8u?&MQFotc
%dRhAG:AL[Sj>.E_R10D725ncRPVgG]]^D5dDs3YiW*]7M=[S*(A@@u[gG.Se[d`[;&fdj\'DEgZs$H,B(HEWG@o=*F[l/)i0bK+j
%D&(YdjH=!93jul,&/F`/Tcuh-TJ2.XE)".8M9p5]9ldhNj-f$*q.(Bhb!UfNmMB#uM+lIHb/942a:Y\tn^\dl.[e#@P+G[RL`f7#
%QEM_TeM?q5Meoc1U<6+^!Br)M_Em"";5.9L2M-"S`$6\qFYeJ(>5E.kKYD*u_Ra*a#FOEt:"mA(dt"KY!.cE[AnTpFn4^2?I60+:
%+P]dlPKq[V4=;kT#q<c%'dAfNK]Hd3pb@5Inq)q.bh"A>Ql'S;?WhIXbIiuC;AIjkcsj1a#nnj:,u!)P?:tE_9#:W8'15:B's0P+
%Q@u%]MVi5ldC8_JXchD-8(_OFOB]\g=dd.Nep'S#Bgj4t3K4ag4*fBo`6=*=(XDcWr7DnUIISIA7R&&u1h&fmWK.uh#!nEi!l8H%
%3&Ht%NH$WGUtK!$Zj!!P>\\^#Gk=<-`1r/CRM`S__he('ENr_2Gd')f<##9=JjpAI;G%gIUkQtl_LiFG7PReH<a^q\G]=r&/+&fl
%@*/!@BjN!2%;>#:,,!1%.`2h<cY<n$(ZX6nY"aRB_gVDE2WO[Y'_8*4Ul`X>73.*;Q9&n+&GaBPg^H=R);&)cE,869Jt4]*.r:eA
%7=N6"D+[!rBuLN"@^/hN^n*p\ap8^M,Db>+m:H%Ih=s\g6a(GL-":;K1r->+-+PQ?2^GonMlK@/"ph*=a&lMG.j$9X/;Oe=Eo.En
%-r5;Q4LF%YpCWDr%*QIpbY>MVB$P,r"&Pqubu$X%&68%"lg4R!.7l4_CQtAS\p_Pg3AgO+o3.p1q&j3!$JZHZk'^:Lbo:eWkRq4:
%`(qO@$HVUk2.sVB\pHApSkfR:-Qjmj!^FpC)D%"eMODK[CqkWi/af':L1p)XmMkZOHO/4R9T#.]K"@mWjtts\+C0V4JF-Gt1d*<8
%-q-7t@dDOHYDP7;A?]VQ[j+QIa>NBrQmCaN!4a.!X+Y6/TCm)UdMpP*?EJX;:0%]2GaM;mie_Mf$s1"U\$i+r]\ENMT2<)1fIt@m
%7*I>h!u!sBSp.i%e[eOl3,e0rH"b4lT1Y3Xi*q4)T]pO9Lp&`c/lF<P=cpWfM?]JYb!)l#N<7md@55jZr;Hdf#NlQl5pjQgf9V'i
%BAp_-f_;e[j[o2`)Zo`q8B5IV);Tt-o$=lO>M700</Usd)ti;1r`FuXc=TMper4pt!#s$Q-_<9q4W#2=c,u>8^0[I#]rW@]^Xgi-
%iaj3Y?r>*$ckpVM!-C0D696%>&!urS`1_\<`fFEqrj*4f@Ib)96pGH,mS`I<Bp,UcY0EBU@-.O)WQ[/ZH=n2Zs42"=`;NM25V8N?
%Sg!>t540q=>=F#Ocr6NbD?@HFp6BII(a?#_S#)S'KW,\hD088Xm3K<KP[u$"d7RA31[4WqFAuuBQ)5?La?\ZZ0r&LQZMIfsaK($A
%qJ;)]q>h`[-50Gtb#0?o*`VBAR:TsqV/+n,qe!#!e7-Rda5/7/EL>W)P6LQ6`Kg]SPAC9LSiuIaWDTj4'4;TQl7!P0eu:>"rb&>.
%'e55)[^@,kIa>5t4*[$sXG?pj4RCq]PT^Q56:PoVl_Zi+1P4g!-<k,0:*+p)!X4,`a</35PT07XnHadm%m$Ad6bFan/X"m6D0F*+
%dJ)cc`Pm/o5mKsis-E>XYl^7O>#H@=L$.@MAT]_'&jVjD/$"o1;_k0`E#3Mr3g7Wr7h$Z5)6lGqoUTA"<iMh2/u7mZQrUgd7Prf5
%iVWpr!;$ZqoZ09i2%TMR,,VrWJ=dg=+!2H]ICMre"Bc)rMbXDT\H.8ObrcC.KL?<c!cKk(*j296^o4jD)NYI3dP3;5XYKKa*?f7I
%3@k;&OsDW70sV!J6HKs*![#MV>Fk5jE3/k(XqF>=6$O_rU;BjbeDGNbGr`s;^)h$]g@`,NK;&"rR0^m<O-J^Il+MFb7D:cEB`W6e
%A!f(d2m=9AmqG+g74hpE9j%8u%BNiA3bbBDb-38s,Vto+3Fms=F;OJEj<IRu+BCnB;Eo(;1mstg^p'IIIm.LrS`__Re?QfQ?Yhab
%"Bg3SEpVnD0%,g4YuL*O<9o>)eC,[4K5/]<V>FZ<F@Hm3pR)d<">4m(?`[Ns"YHR0^uX4/>PP:\DLLDrjljb)2>:*#\)PE%$Q:J1
%32[n)15.rg3&(hL>n6$hWSdC#X)<?sV%BBem'$LpQ9FC2)8D3e8]8md)$hLX8<'tWU>n>p184FRp;ZBDSNO/9k0Rh2c*mP9=r]b6
%8Xt_W,#(3E-?-9rUf"&t#`fTp%kU@IFA1IkDuWPBLY%]Q)%`@476Z*]2/4e7.5PkK2LMFUF6(l"rpu3-k;Q`_Xed^"TBNYKYDr4f
%`TVX<m,&t#qW;1)NZK8A(1gT?Qs:?i5[nE9Tl^aT9k8-]^sG^$Pn8,\-.=k_?0!:=rY:s')4HeWba[l%K<YV:)8X;O06Yl>@fuOJ
%GIKTb&9Eth((sP*ET/lhl8!!,]5`B\UWH/6P,4oiKai/fnG&DYc%&,g_mQS,+'b,HZV+U04[/mqIne97K+Xap)Y"?m@h@iBJLZth
%_Fb,*(V+[Yqn[BK5_/QRd,]fE<d+aii[u(ep@MtOI%0-o:P^2A:L"WC's)&iSDU*O5e'X2^?'3XW3ln^HU8:t>e<@sr$YDnJsuqC
%<"V,\R1OY+Sb,l[e7A]GdB/#Q1^1_L2,sNq0PI5!4p@X&_LabYCpR4)@Ap9p1o>ZWR0cPVCN@8@"!XEC'"2rkBOo52'<MMA;6V%=
%"dBKRU@+8o(?rjd57V<II0N73-6Z8s&fPL^]JJ.GTb@b$=$[n["i[OX?>q>ippr'd9=7+HZpqkD08Q#V$me8[#Y/02TEa-FE?^T)
%7'0KT3<sC?-.#N`>!0F2(L3MY628LN8)Q9o>qcrR*mj>T98Y/_GNqq_X:5E7P>F]&[%Wf8cH<gaW9PQ^iYBu7",,h]aK%N@"RFr+
%0?E</P!m<&pj9>lY5GsPDj)QfJ_Vpe"dM&oH=ON=rM\+bD#HI-9-%<PfiFk=;+G+@7GSZKM)gI=bXhPR>o^lki>`N+YJtWF.6r\9
%%K'us`Ge+j75^<AN9>ZT[Wib8,LqKKl^;\m`<n><rS,M`+^G1(G:%3S3T)U9rAIT<Ah*YDb,AL#R\'sog`9&?ln>#RCTE)>5:Wo\
%/q3R,]P:a`A)fhE$h,<(TXUchr7i6,llV'crD<`+0,lp;NQ)oY0,lp;N=5EbO^m&e`+:16Z6B,$b=7M'K*Af%jB+;K,stcmU+UhE
%6?*,o5suFP"g9r(JtDg!VS;>AlK=Q2/BFf_A*O`eeB]lBFdqQn+/nIFlB`:ug\(j-VZ&qg:&T<&5$(ZIa4,<=:&Q&1*sFOpF%h!I
%RekF+drdP@92'aLCl7BHe0i26+8q\'DMeq_e42f!r>\b.d'P@-VS;A2lK=Q2/D-`@3V<i<(LL+umG(8Db^sdWqOJ;;>0+D0h#pqH
%L[3V5mG&CE81qNoZ&u@p!h>\4k`*I;bsE#E_3+S?P^bQKr4OH/lTtOJcQN6d#!'C6kgj-W)FgM)bV:pmhcX[s*e,[E)\g1oN%>^6
%,T\;>g]XeclBArk\f_'&h(\9@e.qeqgdli_\iE!:?KdtJ!!"A_NdWp\jZtLCQW%0Qf1t/))>l-%`!J7sIEBJd7mM\IJjea@hKe<X
%nC&F5E4Kj^\TqAPCNZOG,[2tg<PefZ]A`h6Jj!/*!d^iT[t49sMO-__2C8DOUndMMK&k=\%37&$Cs%j"@sj0V2OU]"TXUqR36b<(
%pfl;U`DU7%<SQT-1Kf=,m:nnch/('k?d,flaPb_REnt<MN_n@O@.[$A2AsBpqZ*<4a%*R88Tab)5[)P:/Xb/8F)VdelQj;h-YTMs
%BU6suDD2`Kk'5^h?OaGmNsIs^$u\uU0ta0Y3uMJ6@jWgV/gBPrFsOp*/CYs.S%WL>G0"%jU.I*F)+kHsM(i_noO^u+6YIM9ir@U+
%RsCW\)3Jm?_IgJT_(>_C,\P@Lc/i_WRko2=o(:D#n,IanR0u.#IiHtr2a6Q\.&\c>P(:%q+PCR59*&"BMKn_.!anVo#BpfWPHPn#
%@KW[%(+:^mD`%C@[l+(jgr/)7ipg`Rijn!#C7nIY'nM?TM\loa6:_PXM!J:-R(h:.=$!:OMAd-?A@p2P^lpsL(:[b_@>GNM2bW--
%ZR1c)Y@3GF0ONk,r[Elb8L@i.Yqi<g>ta]qEbjbXoRIKor^E;db2TOulGEILY?HmTA0*n.TLcnq0B%Xf]K%/g17R3:VUG5tSQ?i1
%gN(J`)\<XE^i*(WAK]23Mr12r2NqNYpCD1!mI(4iriD7Q>r*'/(I>!c`n[g5cJJF=.`-hbZ:\(a7Djp<!<dJ1=Y%r)WKP*e8!:>W
%g?]S;QK%k\h'\mC"paK:%G_<3,;Q%1lQ<F<a9()?/CbL53hcX]!R\n1="QoG[6jX@(hft=k:a#\Q;8hk&-Z2WGA>Tb(:G!PdXsi,
%h9HN<*+:(BmK-5-\\;aW(N'$*"pm;7o*RZW>Rrq)XfJllP\i@uSTu+7Wu;='`66(LdDfmDs'Pom&"q@qgP>P92L7+B.Us9e1f$SV
%k%_R>G1t3VX-&&(2CHej_oRH.'/Jg&Y1&t80o5A+#%(LZ*Xp=>eeL+_hJTUS@J!VgAF/gDRp>X:!i]l&m9nTiHEEQf9XT6!<%ltt
%h7JZj>pH:ZXs5+%:"ECZ6Ud82$@G+HAm$.F*;0+!T!F;8C/#Ncj#TsK.a&C2Vcbr+s'0H!iT=d5T^8iAC-jYX*_LDD%?:BO9Z11o
%Y-Bc_>EYt].9nM.M#Bf/_9iN;I%=eq3R+Kq!>hI6KRA=@W9.cm)''-T\nm_U1Y[/nO[e-d(oLqb-`T1rh6;i;q7Sj2]<EQmW>=k_
%ND?nP1c>&6_nYE/T5g58U2^<]9Nt/:E<b=u*D"@5-,7U1c8J!H24*<'oi\o5)1^*Nlj?2lq[jMc,?0#3"n'"U-7!poRM"@HL8s?I
%B<X1/YMl*\VGmOt7K&&V40B)sY'0+J(5r_g$m$a[7us[V='&BKZnA`0XcCabI-P%lQ#Y0S6_B7F>epc-2D:3r5G,/@+mQ.C2!s@9
%b"bc@j+/3iOJH>,>5^nY]`0Ic7>EFW>(kWm)f9<FU$T*c]P\Ic@"c\lhGo<t?Zb<FXp^/LD(NCH%"!As:2.m`e&ZmSi41Bi><dJH
%Y-&WYF\/&6gIr"!o6t;C7pMb"QtcE5*a1^KE]0)A#AT+\O%87?hF9cmV$3[HfFl)4h9.;;K!ucpb@_s=$scnW2.b3hV1;Hb9QLAE
%90nKIA&n#!rJ[>jM`-(43Bq!S\DGgG?+hY%#\Y.P*p%sK8&<oG-Hbld!:iA]12$j4p,Pgg;unff.bkE>ILq[e1StlU8*F+m@Skk,
%M?GWYcsFt2PnA=EGc;]Z\@S\.h*$pJ1A0iRRq<+q]oN&u!Q=ir&96"9-)2EbF(3B@._]/\;#([PN3$1NO\&aKcV`(l6+S%KGKjR^
%,PmmFl5h!0jE#FnCH/afVk.&7/.WcnW[H\RZ%2j7q=Or8[:c1MYBps[fhmk$on9]JTE0#!Hh+UPQWa,ug=iYb<Y59enVEKLO#]d5
%-N1\*TRpjbc[)'!*\U"/PL\?L!DlnQPL,ls!7$Esg<WD`*m`Gh>6Z%n3II?t36m[h4r$$L5U[9@kj*d6-YHcL*A(33<GS:iqo3s0
%W^"O:34u*<m7GS'0(KapA^L^q&ge]goQmn6-Ip&gP]A2;borZK=fN_q(?Kr6,YXJ@-\Oi<1X5#bG_YAmBMrMGi`Z<KPHU#K=7lo%
%h\Vp1CD\:h"TDlFb9f;7mNA4QoYilo?,#h!0p:^X[dI:G?!.^KroL7OqXUu=cJL\miBuP33tPmN60$3tSp?*[c?p#B?j>\>.lqWL
%AA[F^^.6:WE:;]jpYj%\lt_o$d\Kij&C2Sd(uqHr3//X";Ep=2-t9S(Y@<<EI5[ba$8I7?0FU5!2e>p<eHZ!eI.#@&60U5=D\%qg
%RuNX=*`V@OfjurZ:0.O%[N&$F/PMBP2_Z0tC%K#eDWYW^AuJRC8hCr&lf"p![r_3MlFEhW?Zsg=R*tE^bl=]<+ceVD`N:ro+c(kZ
%jUThO2k7i@:M";[T`A!cS+\N:E#DC3Pbq&=3TL:HlHFupl_eX0V"LBW%Z`CS\L3"$)'"X$bK$W=qXPM-$7\G0P7,.KL;/Z(YS2G0
%1EoS5T*Ud>XYUl8"Da;hGjQPHIdDaeO[[n2<<T_AC?(_aOCQ:cJhk2G^2Zi_A$:Xk2#PL\o,Q^RLIoYKj6@0"ri1>EaL_>fQa!ZG
%\XjhcFX";0M.!J"UW'j12Zg9K^I(7e564nC!j_(ta=7d`2,?K'"'BLWkt&2hs/5:,E;c(o0b0&[\p9q;`^bM9MX\;("p[M)QPJQs
%d__UE;,U%oMpY'@Olr)sUL*$dZZ-9p]3L*T8<Hrk\@on&703)j&?:Z8[3K6K3!`/e'PCl<[)-<M5'/b8oOG9b`N@%uZ@si@Z*>Y>
%YlhsKfI=';aFpN".-5ufT=JQ]('7fE%VI1W=Y8'E80,8Fhq;!cBNbZc8=/H/WESu/f[(/gbd`[8GlJc3s2!_+d4QSaUI.hN6!*\"
%6<2g?pD3uF"9/]H\%9`Dm#[7\!EOYNDpdPU'M")U'HKtpCt44$CPpHAf?[ag#4`L`L4/0mf+uV.]*8P@,(-a^oH:#:$Nqhg+QXa!
%D$3uB5Cpt-=#"["`pgcQfB[]bKY?Gk,R*CjEWcG9*_2$b^T)m"A-QLKL0dJ/#Q=c^6q7lp)OL3_jUO9a"qSD@8BI6HkT\d["a0$A
%4S7lh4F14]5jr;rr7i5)p!3n*HT`LCrtc-#aoi8/HIp!s6`4\hZ>H7+O/0&`>pG+^W=9I_hkYIL+iZ:Y7I!n-^A%.'lUpp!!K1aV
%lJ>U-A04=nL82=YFY$:5)7P%/BJH-;B,imIOFGRhItAn)UI>N+CG(9EGOd^/.^,_%%V%K6*!0\bP+EsdLN>536#XEo=3i5GpogO[
%8!DHZCN@)A;P*oTD(3H:%LaRdRNH%ZB4Xm-(Wuek(79%t)7oP3%TYPn(n`]=>X>:T:tu`\I5(n(fI!'4NJpISm/Pt5Q+]1,LuA\c
%"=E4=7-bUDQjl??Y!aMr"2b"c9nr8`jq_mVK(j1058)ne#GJg5%^8l0)\#OZ-/Q+DO.)6kX8:(KnW6+W)ooj1-1"g3]OC&PF^98h
%n+[BA`U!:.D+1'0>EbEj`l8qI;'d0\h<^=D!lk";XFSE].7cF":3]8ilqC>k_$LKGP!1DA2;esPWDn7kY4+`^m`#Ri2jSEpi>H-\
%:2&Xu9:dcnZ.>^\'gABbg_eXA8@Si1jkI`M#\'#W55+U"(9ER1akl.j;/X(3"o6Pgla?Qer'TU*631]"GU^Z#BX-QVpKmALYqdr^
%?;<%t?"<;3`HXNrs7Nd&3<H!"_Fs>_YlDIU\Tcr:_+WLYQ@]V"9,8>-c:`EQqmsd3;RkrFJoiP+7_`X)<8BASIhjY\r*n((,1DL9
%EJWmK14%PI%0i"+bm7Sl+_(S+r"lJ_&sF?G/@]:->$`q.R<q&t-h%p%aoohj3^Iu2N`P#(_WM7L;F%2qHhRb_OahfNPCLma\6cMT
%6V?E$"b'l5@$I1I,-r-gS^_2gkh4F[Cr"6Eib4>+g.q'tC8`^uSmuQi$p"BGQkFKPF5H$V!^#>T<Gk><)D5IjU`ZqF<!iSti[iu3
%dB<c0EBP1\rf&<R^M,<o#F6Qo+?sZ5(T=.7'iCL3R@D3@P<;!TIh*@`bZ4ie0N&g!oWX`g3tfihK8a2odE<Y]6^KKEM%Dd=:VY^]
%Y?p``X[dhJhK0b9G\)_"r[d4GQ7rsEks>j91TV/"<<n'c;"4CW*Le%M*uTueG)#OqUq+K,goCdA=bekOoPO6\eiaI[L2]5V\PZt_
%%7sKAXCnM70Wa:9]L//JaeMW!7E.u0pDDJm`-$:T@[EliKijkX\J_N<@Mp9!D9&ej@<9Be@9&!RSn6\22#=MrIT=4kP(cZse3]!&
%]T/3N5j6MUe3:OmY[7j+r#:ZrDa!6sBWYq7>YU*ocp>\`k[:sc_f>/Lf0EYVMhJL[-ZSe^TMEB8Pb;^\?Y.[2`Ts/<KM@W8_Q$m&
%f0U$r0%l54ZC>jJm@n12npLs38*^ZsfNc&FIqq+cTYA$MdB?lP\^cnRZ1/G<j07+qp`L&u05l=7=*IEX&7;X16c\@STDoW8=#Aft
%KH$NeVY#CJe?@@ABg&[K!Ld#nUe+b!2YC./!/1G_+8jnVb&n!8"1!5/d[O%FO[RIKH4[soW[7J<T=8MS4Y:R1Gqnd!e+`6sr&eA;
%Cqu*6+B[STYtciG]J%@/Wl&gsoaK_lpe%0--+r_LN(8N17;,f`_e(XW5Z5LO+[f%%Fq.4Odt2pWYG`B9dI;u%2,bA)bjJM]ffMF9
%Mkq@LT$0gWoEJrC%Ae*>oHr[2kSa^,=t-V"SIstPRN]SjOA-;Q&k^EcgM:m+`a--naqFk!Shpn#;'=HjrBo&U!KfCaOYR@2!7]/1
%_%&3::4=2a'1Uhke[.71,5LHP*mp:=kR'47ef8*V[p@8c.%bDsMFR`8C@^'O3]3lKes6C!>sl;=dJ*+:k/;>_SL8V"e-BWu6O>%L
%1@4OI\lB4qia_`:Y*cKAqJ0_]IL)eQOC"qSi"pK1$-=KDS[hM)4:_/oI+t;-T.ILR=GT60N4&gcZW_fNP1`U$To=g3)QpMX'Wf7S
%$$:1%%lR'GZa/g]2"'g'aW:tCMPYtU"rKB_\X1=ZL3d[`pHO$@ZWT&g"6gnNj`nKB8f*B6gSd%^O.4";&NGu_=0?Ab5DIE-+Gs1p
%@u?#56u#f9%T3rs)S't5nq(Y%8E,0cSg&?VnX?lb-n>HJfL?e^>0BpT\biq-eTg7mN+h%j>$+?0cb95@7Ce<fM3"Ul-T+2.bD&@c
%A'cTu=U/"bN."?98YPaYX^3jL]D!6YD"Z/VABnh=+uVP3Tem`'N6>TOWD:JDf.=<2S8!#-9KNHgZo)9oGTf@c,"Na$om/X0Y&m#-
%pa,((4)Q-=c#s;5/>7T/XmXA5ZHc?r7`Y1fj";W%fs-1K;77U^eL2G>J<o8@&Q]LsEgG.b::"YJ<9eYH``*g]/^s"Q0,j/];1HT-
%l[=&b^CKlnVH_Ahh4YfTNZm_G1*WOLKoWO/j,eKM%,uHps5H_[l&_!'8OSOHWrp2O*oUUa+R]::]LR4lc&Fug[83CE<T2\gmH0YV
%SsPU@j\t`/I"AhD]V"5Yi8mW$-LnXo(V+3>=>PE,f&>]jMS%.X-q--D!,^REC8f6?CO69r7pK%+.\TQuOI5/P'_.Y*jEl:CSg/if
%PG`>dD0Oh+U>OgWB_]H(O4_A)-dZ,d5TlJ:Z\1#D#j(icm>s.uXU'"9U6Z$0RTMh'/PX%8a&W>m4mB4\O(HBGincl`(]-dI-jWp4
%.N1X.39hq,Us`XBHpa(@\BihuI`&]?_h.iI#FjJ.lW#;F+jJZj]gBN\]f^K$FUlh,!UCn`bX2(OTinKGSIe1XL]k<e2V_g=MeATP
%8:<.@gU4B4k"_WC#H5m*?ZaDJY'^2r0bJG@IgBQWSom_/[b$N0,SI74&BPM5cLu*FU4U*d`KP5M98;eZnLuc=0f:s6pTB6ApuTsr
%0%G(tMehl,ertfGUgtQ``em[WF>?9SW/&_9-ba!O#,K7=4F&N09j<"86Dl>Y**.GilJ=7Nc.[b0!(_+EW1(@mJejcE-bATZZ2nXL
%jp"O<C[O`"],&6S<1DmZ.%Q8PX%">GfjFEu*uP,Ei^rI]p*"_"2)d?7Qqjk+K`H>c(VAE,]p%C*i:S#QT"AoEX!hS*R_he:8+8eY
%\E2\t,'>PW92jF_5&Lb.Y3Rd9\m,oPhrr6Z]nJj&K5A72GqkekPA5.Y3mL1T@82D6.>q%(<rPFcc:=]a[2(-C2Y=BpTi5197-u6=
%e?iLOWMJ:1NV&@o96J/t3i./>dE#8=/OpLPSTntMO\':4'u[H5l&c\n83Boe7\kYq`!<(STDI)"8A*m2$2H`f+MXh05g@9=!I',d
%>^@/FH+!ti8<97XJn0_`O9S1o?;R6ANPG1ms(5FbU3[_%BG$Q+`+G)H0falJ>f;kq<osk<65oshotSV#FMS_adWHaS&co"<)0pIn
%7$D!(J?K_"M-p?]SXst*es1V$krcBF0F3nJ^5.'-2hgco$`e.ajr;<G.ZaFuFoBp:C'7/gG<hG53!i`,U?\Q0CXGlhin0"[:c@P"
%qeg:SpJ(Y>1V^V,rIc$;$G.>>%hGb,pZNBP8`feT*KQK$>Z\2n,sn8t2cCg*mUp!7&G-JKD!")t<,a1;J6^X\igF<4*%6Kg&WmH0
%aMkN6":^Ql%`4<*GsK_q1[>FqZ48p#n60J&TO&&gG+bh-@;;_VTj'XHTL#.F3HSOSKKu"F\*3A-#ZT9n2-RpHGabgem$J?%euRiU
%p(%(7`;NaBnW9`2'X_]=+A%fPKmrI0V?fNE\K;4=C3%>?OZelGm=(>'VFQ10^3ptJ#,8(U[?i'UJ:s(Z["p'-;&:r?H>Wmp2@AFp
%j$r]/TK1^`$ED3o5$N=*o^CurQubE+#pF8;"]WcgU!ls]-+J[;<qgMf\`tB$LS;UX$L`XS&5hb(g70r;#''p"OB*O'C#lQPZAE)L
%PQ%fEb-K%Z&B!ZOFCQZ1Tf3=r%4d$,&09X(pRVs/U7j#!(-L(:r7i7_pQ(!)I[eh$35?bmC$fGrc1KmS3_iUH5Yu/CV$8DI(l)^F
%Y0'oc#U!9u'Y3qoWe)*l-bkPfq\m9&CT2tTH&-43*8Jq`dnMJPMm%oW4TVMIS3<c0kOEoN,i"+.3A(E;FlWW=Q*9e8e#$?Sk%BAN
%Cq0'QHpjY++128X#%S3nIBt*2HK4UZr%-G[pO+54a(6V7)PORV=QaFKSYN^K?NrGM%skbqAK'X'BuT'rTu$_Cm<ehFmJFe:+-K8N
%)DoV\+56T%[BZi(-hE<p>XqL_Bf2$%Tl%f*JkK;^9iE\kA<-VTkPgG'0N3_+`*6&];a\i4hj:BgI(=-Fo13O2lP^nLcQInc^UXmS
%>ZNW&hWR-7AnK2Z-!<Ob^pD2KBnVpmkP[,%/JmE?+:-E7Eep$5=5t*VK[eh*'C75L>_J-cKS0?E=-B9]fH5Om&fRte`b&Q/DWf^(
%E(2$YMDokWo"PhgP-;8Es,c(:Y)Hn0I$FjDRV?SmS3)rtc4OW5XaNpL2^D+.P2j!<%-0-@FpLWV'YZ#YoS'i2.tT]`ror0@r\&0M
%+&f(43f2iE%,h>,S.lU61D#"\%U%p043'1qhen^L!foFtQ`MT7erB>I8Mpn\[7H&q4L)!7P]`b<k2i/0`c(<#J.&,UYR"TJ[M)Fa
%\dn!`<C+8tZ@:RRo:aE;(u)Q$FdtNkGi*8$=AF,)dS>7V/kQjad3Ap^;gns?foi'3eF$ioOM/W%]3(N%9SYYX:@tPXIj_bgVi?f,
%'[p>8pmE#,?3*PUc3R;T2@$c_eZ;03;0^]1;I_$@Q4k#][VVt!n'3+g]aWf^p(ihD#[:$;e]uN(q]rPcB2+UWKRcO15s*Jnd/pZS
%YYM9/Tj<DbS'dlV^'uJdg'kl6$(BP.h(,t]:!DarP,I!EM5fiTX-2oDefJ#[7>nmh^R#.;%>Q5>d*H-SVL/J+q"kOhiuGOJ&L;o(
%=+BQTE=%UEGCQ\I`-FJ<mS+'"3j,<aJeB8#/Q84<ok73h3i9RQc<4n#X7h@)CY"M&_&,]OF1i"b]=^h!j^I*B#mLF[+VU?NC`HRP
%+[RJ!<%e%qa"V1:`^!6t]3CR0^U;V8-@PV`K2>Z#^5hPkY7QX496Y#<#mE[5<DSBm13qgb+#LI<DZ*&EY2O2SV0Gt3"Ypl^BUJH@
%6lf6-/TIo(kbtI3B^[r6n>l6.Hr5Ncmnoj[G/LjZAAB9c3!Cu)WW,N_^)^$4($=h<JeVh52iQi@!IA0gV<3)qRZ:EP2NbtujKI?M
%C)XgRh^rqcZTjBH**(7bKYp>d[Y..tdH3)CkM?"WU]=>WJo1RFk9.I9`[*K>5da!em'.j!CjJ9#0%QM6?JR6dOSV6tH*'R\E4"oe
%5)n@"To*-V-ds=/]"*m0d/nmc-Qld\0lWkWWm[1[8nC-)Y1FL,?pI%-8*H$nZCSQhWTcdc=%D5FE]S5=&/qpu1Ihh+@^]?g\OCnf
%D]#Us&6R@jN[VSoXSNP=AJQmV1?Q`AEdh]r(EN/IA)Q.4ihd#<moa>T4^t(#V`DGQd[a*'JJ>cAZ:$dA0M4#J-,_*-`9P8nP,ST2
%1:%UV4c?H(@$i87B[0M!XBqdG-8Z"Im5B,G97qh`fb^gtOr]ekDpcc4oY.]3LBAWF.6X]"#*P+5rnMdtA9hm^=,n-9?"2H@7P-VQ
%(V=NOPqKN'd5;nj*H@e)`i1J"4#O?JWmtco2uK]tqAB[WRe]>ips@,;]'iK+a>Hbt7aq:,MW=u;p_?PM%2SNE<L(0s5.C'8=[bl*
%T2]@";U8*o8fq[*UP8WfkWJKi81(&rArF9F.NbNtkMmo(>'CM"o-^DFV'Zq(`OM&lBWC?hLO-86)=LI!M!YW,oVm0XI[_Yc8?9m^
%d8DWdo_l7;f_ZtHDQfm-gGe/smnl?12Igh]:IO+DlN*9u@kZZ^3o`m-fJst_ck-.0]pUKs>L-TUiUr*l9m9frQLH8shUmr#2l->^
%::JL6=@Zf2I);Eka89#nIoVsrl:P+ie'h_>)'Yjj#]t;YJS/o@b:KnQ0BrT2GaZ*T%*Fn3/q$58dqPm"Xnr%GD2.m+o$6h"^'hY+
%`W\XVTN*XG>MBGe&(1s\>Me!G?!Y<rF,"UW1bi^npf_RL4_:;Ih;+D$#@7c<P(2O;)7#rYr**g[SRU5)gu@;^H!0SJ\V/M:G+hL)
%4>RHsk1:EOZ:iDe@mQ`VGlsE^P1)hihnD;6bF:*U3sg*qIY.OT8XRbQ`4-L`Vp@\&$T_sqJ/l[&Ln_lX)"eJ;DQt'2FXGHP#%K\L
%jVl>t16NNkGjpVCd*]k`-3Vtj*2ZpOCXr44i*3(F\q[]h)L]?Pht//S)[/%qWloG,]>lW0%)&73Nj-j8IlL<5)ITc8<E5k`Y#;=>
%Ttt`[gcd_#HQ9XD4jcKmP]oPK)1JTF/[G>snoq2!IC$]PT0F%R_?1lLEOcL"h@MMM-X[@AKfD<@)G<t[gN<4jppDL<=l\1%4n.>Q
%P(Q4Xa]_9UKSUY[ZOe?/%ONkPCQmiU9M[N+]NDQE@'/2L$!BS"7&g"k'cLEAj/%Jk1s]_$nB>rA(VK5TA#8CGSn2.Yi7`kL^f`qg
%gFC4-E@jL+G=!)S6UhEJ];l'3\RFef!87"YfdKIo+!CjuP>=Is=Li/V8^pN4JqR^3^$.-IWdj>QGK'4Nb2rF`n@JG;F[lQ_pprJX
%CQrB2:%I",A4)2h?V30=b.-bHk)Gk*J%sZAImhuaa1LSYoED,_Ip2IJlb9qpK/nTh6/CU79,,)0aaZ_7m(6=lFL[?"df$3j6)S\S
%RWg/'-IW8N)D#_[e!X&'`FT'cJ."-+$BTC!d;mV!,udI&M#!e7BRoXai8[B8!WG/sI?(4W>5'm6!0nE*o@8nT3d2W3E#!k'h3Enf
%ZQQQ`C^NT^6*5]cGuGs#$_f05aj27n!BF&T/q8[4J?0q^UbmPC>e@XbXN+B?;o>HandLVV#`(=*Dr@o`2]4ZDj0_IXgo0]m4\p*M
%8cflOl7s;0DO_?_Km)YPDReBddb^7d'R&,-2efV0:hDh5&MZml$<niDHeB&;>#f%W7.W^RldcpboplC\oEo6R,jAl`pGut%/1i!E
%0ls;["8-p,%*bkia_+pNX!"JF5ug[r$c:lEhcm+K,(Xo#\(h_Rdua3a1W=JO3!_^iijq,EULE`!C@X5kOo!ERZW>UWTqdUY3CkYV
%,SMsASem&4o,r^*BpHj+%G&eoE<Uq<Hu9EkdurP4o%O^*R`).oQGnr:ZIcoTELFUi0%dE8OWpBnRel6SR#"6CFQ+)S1TQ8H9j>)O
%=5!]J'X@u5OWJVKDEghq.6Kt`=9EXj'A?aJYun6%=$a2BTb<fu!I_D$7G[:'@(L\ts',o#qYn%H,.r=1)MW&T.t4X&65.L:0%DL?
%c<Sd1-tb2ePLaFuId[VLAjE=`h%oj,`<24Bc_T_jhLeWf4k\-YV7+`:kB=]*hrZ7f'P_WeELpC[pG/YQIun\>e8<l8>u?JXMflA&
%`dqkI/CLZ3Y.lpO4ZCA+.BIH_NR,QQL-$'j$\hgkLhkgF8G=*G\=i"-+MJ2UI%V6t=3Q(^Mm2V/*<J\T6N'U$U*a:(*c"M:<4<7D
%G+ch;hSsW!6p9kE]3e6XaDF%P%6uB\VLV;2&Hg6eh:VS\crC=HnZ4i^6a9sK\KDZc/cI@jb/HEP4Y6oEM?8ZXP*'c:(:ILS0UBK8
%ja\<j!VL-hEFoK;6n[\ab=e$'cocGT\^e+Y+f(X;$[S1LNK*+)ehKsKRHo1l"M1=84jXTc+/h]c@FatN:^@atC6Z6(ij]miG"_0%
%dE[h5>Hoi[6Up9W")?SP],W3<*UR*Aou*P1ccr/-.7YL'7-Vbcem^7ji)M+->VN(^%h:tS.RahZe-4%<$C!V&TW(3[]'3e)c[`Oc
%I9,0I$BF(sf%n>XPmuhRW^]&pGH&WCY"=9$^)_r"iqJUt6P+9egf@5n=(eDkKro!gSfcDdK&i,lp20[1W4<8K(G7Af/RLusmVTiF
%!G(I/:pG_V5uf0G)r>n-[uMC?ef61E#ZA8-0^u+>n@"#SnlZUfrLqlg0T;WMD*S#^B\i,Jpis[VHiD%cqniWjP74Z4ThtMqh0p;A
%X^0#_O#XdA+,AAcD?!+dRboT`Z68T+EAE5lKj=(aLr]qmMtS=5NFG@0Zb2GQQ>2,<;&[;*_bhHJ:T!\-Y3b)c-+hH-P0,=fTtQc(
%!_&m90D"MuKT^fQ7i+t*!JZ_^,QS.0-4l&CpjSBVjuTPff&ljEQi>T$]C\>"oPa*EhC\J)),'=^AEY2t*UeKp:A^ie<.BXX6HoRu
%R>QPcQq6hqg\#eGd%D:k#W=3\4mY[nON%9[18j+D''FCJN((/eo@H.#jFk=&@(K@f=+Vj)gSEG/_@0[5_5M32+Qkb,\JRfZlrJPR
%X7i[OO)Z0;7O/V=;e#@?LEohtZDcIbOQN*>;("qs:"e(fHHl;d`5GF[539m#8ou/;]WGQY"e";/'B:r<9F&H:5TKhb.[;H!N`&o9
%k"#fc+D;7<EO(-,]`/R2"E@5'>:W,4*0t_;&/rCl3iI/$<*L7T[6B2p5*YW*2U#]2?/ZNQ]ATE[_1$(pDJpGLE`.W%`O&ZCVpg_&
%jc'fNC+f,hqgDfj5gOqR!L1lDJH?3X?DR+9R/Y-aoN-C%d`m]7]IMT#Ml)hNl$n@6kd.o^53cSWb5F))ItK\Xbb*q?\bY3i)g10.
%-(nNBL:5rrd?^Np9]q-Q\_G29a8NG>Ze!C&SHfb]bsP$f&(SCMpr477n;]4LWe7oX=:13B#)Rm=q6qZ8[!T8a^:(@tTF@aaLND*?
%ofRbH!&L^ETjqSmfo-Y]^O;:CC3[Y.ZK%*h*1PA[8&\Y8")Q8?bR-r_P/e?cpapX1)C#(bRgla`W=TM*G=6/,Mm2cr.*Yd6XMF*6
%RZQ#"\b<OiD*X=LHkC,iMNhlsOK9N2,qTA7J)qb21qn`3pA9f4f3e/d/`_c`#VLm4@XO_/_3C<+'%,!\Wr%U"m[7gK@,@hWA?.9i
%Bl70k:?HlCRJ";!T>%/,s3cZ#O^X6r9q:#mS#fY)s1r`cMImc$%1HOH[O)Zk^ik<:r^HgJ.JEfj"7rgM26PFp1PX7c$:J9f_nEI(
%ZNPJ@]P(rY2Csn/r^&=:D7W#:)8%!R8EusCa'd<lY_m!Z_&]op8V7bgj_d-nFs)fnX`@8`_:8ONZj;TZl^K?_+=9hrN,KEM`\Fhq
%$\N?[gjlH/M!(*CJkYiOi#tK>a/`8=C5bp,=ZVTcde*HaO9%-RQU:<HVOk;*!HoG+!X#(q&Tg:K"p'jf,"u2!>_@5#2u+R!/6,UX
%WWc[1>=li738k([Y.B'F9ouH.,-^\OU49/KcZ.U^r\ZH*DVG&)jN98Gmtf0mK%6:*@NbV]`S<s#c$L@>>),KLq-mJ6au$137Z,):
%7Z'?`MD6ILTn=m/dj[0FG#b%i6-;M&R"fbQpMrc+."*4rhmjNr%0-`-,<"?*77ES.E8U;K*VA1h^(d>/-6GFac@2#61K:al#UD,f
%C='4/EV@*%W3rEGV`>?NY*Q4gdj1\%)8M,)K6+'97P#tB`+A#[CKcP8>D,@k@J>kj_oMV><ZGd&dqf&:;[Q'jEtmt]=9FE0TqC&H
%N`-P+RWo-_=0Zj/cBOJ&-i[!Xi]LK2F#0<j+N!`LW^GHcHC)2Wg'8K*cj&au\6k!HP)j_ql+ORHp3l:^p[2]'V1F$s08aE\:\=p,
%hS:tQ]=s#[0d(cs[-2)/`PfiVYj:$g(UBW7IE@hs]`b>R]AAXq=q<B/q?<2-V0Ctpmk/EEk"%!DBSlE`hh)u[OMaa<WpOCOSC3%@
%UO7,UCGURmK4a2MGVG`["^r0f$0e>Elrt/5I[gK*Y6!<1,Ip7EX<IH2"4u?6JtK:Q8-Sn37=o(2**O3mFQ2r2?=Jc6qm`cne,n(&
%_suj%lL(1?5B3="P#]**&3TaCfC?n0V`sbN\!l.1[[t.eLS)!9P&#V:0X`fKj`-g`/q]tW0'ZX'FG:/0!6Cs)"2h=Y=bdJ=2!>`5
%?X%=MAlEA2%^eB^=lTO@8XYQ@kEt>^.>B:b&AZ^_LV@0kWOX&*nB?inJRq.$!3a01GNiUL\SSbT$&1h@3?(,mP`6'T%'1cVP19Oe
%LMWX5NT?srEcb0Q@L\n#4q8PuX2KB!/o(kB1bO]#s"?E$P9L=:a:0%'glkMObg751aoS-Ii\REhq\Lgf#4Tct>6brL&38D,kU)b9
%#YBsoLLJR*;*[)TMQ@n#AF/C8]n/rq(_YU2adgc<2%gPJ\=Xuh1Vi-II\@dhpL'O[96MPH!H5o8;?V=QE,"A!2=8F:GjMF(hcP+.
%]k"ssnp;-S-s7E1=*ec/P?F\b;`?3:HC@;S]pk.u"31Up'3Ubc)fflb2IL7]H;\`-'h`u"4:kbq\hp]c\R'o73/%]b9Y$7jl]-j#
%+i*$*/2g2LNaau;E'L:?U0gH0nX_?.f>jV^!<\\k(*6GY6+7Bk4gr.11K<d-fK6-;Wq1k:97S0%D<H4^[s?l(PV8sgOGBG&C1%"m
%p\$O7)s-CYWFT@.JY:<iM:Bt5j@k6NZ]bG.1G#e#.@(:SOA[oCR@uF)iCADiX17Y)q:K+M^BNcj\lFW%l'&uD6Bk\=8X*MUiZN=+
%Ub:QS>U*T#j9]F\&Xg^?KJFu]#me]0qL)9Zdo<$>j@#s<dNFn(33-"031`^_1We6h"qTBlE"/G6eB1,S9V*l\qjbqaG!2\p!aJ/]
%RQC3;c2Q?W)?]fQs&!R8km(:W;9rG)QnXS"3UUUKd^&*fW&:R3$Iem'S9]u77p%L=MZ]4EL&N!G/c:B,1U-Hb`rgg\Yrk7bKA8-[
%oma`^./fe,Zpg-X\u4e6Sct!0+[@ej0ElDN$=j_d[(W,7KPu1b>uW"4"r2p#YOJ-V(Ah:NVCZ8V(em7r,YJ/;ruCs_<,GA@l3$l,
%6F$mX!3V=&A83/8<ZOfOYb?2I^q]e=Qj78eJ:s$0&%M>)nNeEI;kHe;-Jts??HqHP0aX6#L;]pDep2)MG<^[GkCl[sqei,U]9^&F
%=^[7_rdpOnO\BLlI:\G.RmcWPqUKQg?,K/h1`;O#q;^tm!oZ'8,\N8+AmA2OEE/-gKljj-QV"6`4UU<dn#G^K+JomB%62@b=b&mj
%,[g[uEM"^Lml.Y-MicGtQ['V=Fm[[A32_T.l2R3o4g7&gPWX6K30.qO#C=L?OSN68m9uT:[AGnjC#a@I6TdVSM3CjAGu:E]qf\Ou
%-_969Jib#Z=*r"e4qZKqKHBhQp1;fB`WcFOb%G"b-].nu/)d-7Il#Xa,#)D=^:Pn!l^$=d9Mu&((s)nf+8e5@f:C*baE?E+m-WFF
%MrGT^5+8194+i\8?N7)*'Jae=:sqAKarc<sM8f&n1B4Zl?6&L58`58Q<.+M$Qk/UY(_j[K*7@A9'Q*cZ/,mVsqi8HYC@SC8QJn+m
%Z^.N!^"SK[7GH.uKN$OalU^fKIj3k75EYI8gq,blB<WSk<1uk4FGT83U+,_LqL/?G'>6AS!AoLASnQ:`U[lkuU[l_MQ2a7$rpB;5
%d$[L.R#][D23In:B;VagSfH1@j]/JX*==i9G_d8Uf`aZ7JIn3TLEK.4.He;$>.kLO#A@R4"C)1rLS:sSWb*U_g/=SS-Z7H+'gs*9
%5kJk1W\`pl5t<>`YpajVY%;:)*MC55VmjQtXdQ1.0:2e]eHODN3)qoVcN.3HpDP=R&s+g=SZ,'m&@9IZ`Qph&bB;cd5'8g=$G((C
%:m8BjTW$V`9#/"ug)2pF/D*_h"n?_f.Ref::q)0kmB%K:[gdHlff+R1hS(r&$=S\\TZI@UD+1o2L8D)DG)j#ROJ3+>Wur/o6.oP(
%H+sF'dD$go)$`kgQqgqe::/6_/YR92!#h5[4TLh`(De#BL'tO0)LQog``9?+!74mN/^jmp.@?lJ3hq.*58TX\N#@d=Lf-6sApQ(;
%k3;9S_eIDLN>5-.E,"7^?%#AgS*BPH\hX-?cm&_@171K:Kj_]5CtpNK@+*O@"j_4.qmk>E`ZMHB^?$Wt5T2:R;?ZMno!1QH:0a1=
%ZZ&+fg_'u4V*c%T;&YtaH'hWI+;UUnQlq6'$`ZjRFAWJ_J;@,9gNL9M[DMFYa>38h6;70nM85fF`5k8s[`6RlM9:HG?2S(t5]"\h
%jhAD'3PV<pS\^@ohhSi*]-EU\BS>3h;hO[E'D]W>rq*sFH4NH0EA$i,V30e';"aAgP(%>H><=4IGF`o2--0Zi<E&q+/asfeqg'oC
%rb!n^VS*Olph)80i'G,LEBN"%)=Xh"asVUoRgZ]k>2jU&kM8[A1`D[SEC88]B,W$$27`t#?9?]D/[^%r$PBS3IBoU?8b_?*d:X;X
%jU;YR2[M'6i;hB=k)91ZD[afRiiW(VC%0i8IK"$,f_EEoP@9"8/B0r4pALIS57GRjUL=6&Uht(K=<1HReF$P#4ermBP0oD4N4"o-
%5$e)K4PB2mA`/i>aPf[s.m&B@.P_%52um/gP114:h%YiZX5K(C-D2<fF_jbA/uFCs&AWs%:uS0Sr'p$@ZcObCq=$Vd.X7"n@D$kE
%5;-WTRgfC"qp'/<OT=NmEo%O-R\;;N[JNh;:npE_Q75[h8\)H&;&g35n_3o0`W+L]=&KF*$ZKn$qM2RsMHHr4)4-gM7`c"AXF5E\
%jaU'!,_Kt,D^3p*``G;B/_S(2*Lq_37MbkHY%4^_#Lp>l13"0^e]*=a9F>"R$FuTHnSVn(6EJCB4F_UNh4ME`h>cI]rdiIWAQtT5
%aI1)`7tW%Ibi7]MR>D*F(&Do4ZMLt\CLlJF:-@1\dB*p1-UW_6P[UP,%U(9=Mf<9sD=-U+UlJ&BU;JA1\2SWTQt#j!aq^d$$=oMh
%[:-b_rb[p`%al:bUt[qjR3K.Q2X^n;l:m5=TF&+X^n`GqLKa?*I[049>D#hb+M&Ss6LmO&3@h?%=qMog(D6g0FCDGT&=ei>)t#5e
%W4m#uhpZE;=i9=4VBI2o`*Eo8lnMu^2"tgZ>is9[NWdp9$-ar*pSBS"cX*!Y0Ue]=^_Y5KOt$k0b5AeRbr%^N]D!R,\?-fe3i4uP
%9\ga:K1D:`7YTo*M6*D%P#jG0FA7Y9!6QPn0j[pD\Pm@d,hT0:c`LrYo9;YmNi$Nh_%372oTRW5O]`;=!E?'U+AQ^cC=`->'4>%0
%l:3[affTYE%/i::Tf)t(=.<$\!Y6Hn;IIRQZdI"m#TEF2DEe>V*dR88AtOf-<,$#28Z2jP*@p88ptPHs6c#OF7b="FN-GTUMTEYS
%O0>U6]O>a#j.f2]#N/4tMEB;fi5',^#S4@0,'"%,+mm(aVO1MIkb9C@4nTU#oqFn4^!koZD&dp:(D\pZl9;Kl7_-lBq%ljppAo$B
%R4Gq%Q^=Vbe"H1C@3KJ&Z%>"2a<qG.Eu./VACZCX"%VTD\G3J7@8/]41V(a,+uK.rnV"GPGCV![@\!tcqcJsW'Xrn:EC%Y"Ie?t2
%9eVr6bu18i7n;ZI;CWK88WI8.D^5'n(!9W65]q,D6:;f5n:7gO[Es:m!FnA^j9'F[n>K=iUdUuLVLQu`mlh0&Ft<nF4ctBg/@>/c
%ma+EQbO/0$p*ZMK,PFVQ2%#k[A/Pq9bVa;E%E]O3+UL3\S,q0qlomt;+dM1les<b6ZpgZHc&SSpGrC=/rN$Yu)8j-W4V'e`_H,l?
%d.S*@nUrY4ogco%"2$/SN2I.M(+7;.?d!N$e5?>]_&JC58<'gNoK&#n%_E=N?C?siVlA_q[)'3Cb61[^A[AHX"])J>kb%TV#r9@[
%Zu5F!m9*g&-Q!#OV_+I!*Ku:RR.9(ZmD.=[et;V:;YD7dMgQT)*8$k9?^alS2&bkhB=4[8JnKaBF6&Up]4RB@]h&iDJ_BB][]JFV
%qq;Z%OF"b>?BNZLA0-e33\"+M,@P@uWWOj*g0>5OUfdQV]dage+4\7!9>dNI%Q@snPn/M@L&>0GG_>loiYMTmg33,@[8(d-G0A4!
%qdE#1C%$<7HPQfXW6GG'U&^9,+WP[rRJkb6C"kR6H5KJH1;^g;Qh5?!b8T$O[j9B]+&XLJ<Li;<#rP6!>`/M=RS,2$fEYM2)]7$7
%^<EQY:TO-!1nSe>][1ucK,N67B^Nq[RqqQLUfbEr7eWR]0q!,2.h#2>Q7^^QOUk)U$?_OmM-9uSd<TIaQh\C3[50'DU`.!Mir"m_
%%`/:q6VdH!ac!l[s)e?+girloaCg'*;sl`3O<PA='i$r/nnXl,X(Sc@;HL`+`mQ3;bTF:/oMJBK78W&:'(b.q*8R_t\(_tZk3BKm
%E5:Tog6*65-/iT*Xh*,f515XMmcH2c<XD]6c/E*\EZ4k?/<pX45LWZX-si)BeugBg5HTTr*&Sa$$+5""L.C@p=<Tg2=YVLC9.gEs
%?;ke%3BJ7pU>Gjr34Q%L9d2P;co=P@dj^?Kp[5rZm]]k<9<sT4Ur<@H+S>;abagITRLbQ`6tWh1^lA:/QWn2V38eFt.#9sLA-X6'
%^3R?:jh[Vl-pd:\(U%hd=[m#@8(sUpPI?Oo4<"=T<@.^ereGYAMDgL)Ao+iqP2^[L+rH'&d!%.ae0t^r_1Gau$Y"VD]]2Rr`tEoe
%ff*+(o:L2cq'sB$D;a`4bYsdN!t>4bmnd9R>f1(Y\h*:nW(W]a1Z.mG:hKM*V#h0W%XT\]\Psd3F*"[CpTjR*e/'+*kc?%u3CeJ=
%"+eG@j9b&DBGP]2SGHr'16Du5pGi)I;I$<TX]&]n;/#WD8@098IuY=(dm7NW\:GP.9/48=d`_@Z_4OFJ'"fe;5`+@HDTKr]LJk*G
%9f^LS?3=q+2"1[.q@\)?Rm/Tt?["6K>,`1.$!0t?_\>bA@:toI6]"tAiHmgePu7NVXpX;FhI*0p+#QkS^=Yacd`"&U-!:5Y'p,uQ
%LVN!^aSekdXSMRabIL^CIh(GtKPo,Lm'V)-]6E&8?C(JL)1!0S9V,j@ULi;34(X@"h3M-eO_6MbO/7EUk*=%aD;fp#I*@*il0cd%
%XB`pO"J&FW;>)b=ASHpT"nXhJS9ZXu#anj9Bm$C![Eso(f>b8M@jGK5e'3;?&-k^ID&-qXR;^R+9:r]dn\CD$p3(X0.aZRF[6pV*
%?BRT=As\SVUY%t<NN,'qeo$5L#2SS7AOuUs0I4!J:DgQRp1T!#EfcqT._BHg=5EK&,N'q;%ouNkOM6Mol:^])#DB,`7LDJMkir9C
%'34Q>ng&?->^M/NK,%(#dS+bpILguGV$LP>Te?%%64gfs[ZM5%0Sic"jU))CP3RX_\.Z[;:Cu;6IP(bheEr&Fj[10EV&.@OSgh=0
%T<:guaqE>$B`uT%76iF.1oI&#!nu+GTg0t>iQ),YMsLF2<DkDN7r&mi"Sk12oemqSK5Uea7EPZ$+gPMtT[11sn-bh>TQp*M0n&P4
%9JFpW,I5th4D5\FXf/_Z-7o+/eB[2di_VI[c$h9#)dDsimOSXW1dQ(ej10837$mB%kMcPk"kjn'Ni3>3K4/G=\1BL#lE2%/BXl1D
%F"'l@S.Ur+O;Q0B).9XM?.:?`NJs,-#II\S#Jso#8E>-e2D*pd?I,3-c]\.e>E68!h@Bg)CBkn"#:$K!>anl)i5VG<+1O>)rlVi"
%jRU1OXmcPC1"h\@hoQa^XTlKmHMNBS\HYh@O%Om8@C%nYUurh*Oug7SZ.O$V'i<r/']m4.`mX?%lYLA--)<f1@)\0LmMlP>3V+$b
%p>j0JUV4(Drp*>h8,,"&"CDD[A#DS`n(p=i$!Rgf$scsmOo6D*XAt8&Xj\'7q);%NLarWV'%<f<'`HQ0padJW!AW4[Da!c;7d@C1
%N;;lu*WPSV#Oq%FkU=dC>j;of1lus?njiBjWg#X\,QgALGHq<Wmh8A<+BOF:p-q+D@8WI(#hY)QB-&!9%6p0scs55NmsI?+_+iW.
%*JXO-eVeIh#>"##%uj,V7F"+nin`c[-9#:KN1IWQh/F1V-HToD"trN)%04<in\X)#d)ap%TW]L0k&n:#rTs@R;aZ/&GS`X-[ir*U
%/9%=rRI1F]A]N\51OZ9m`m0TmJ1Z[u&`iQ_,*tltNuYtd[%9"/EA56rL>:O5b?2J^\MJrB?RC>a:gccYAgG;ei5[`RTM7Lr5J?a@
%^DEi#/)U"YM?S>%;3!r@=P*UKE*<j)#NFd<.V^;n8WU/*(H3Pl,k2diRGJ:O+J[U*AX%=0H>N&JDe\[T\7pF<#,pa+*c+[U:/!a=
%$4k%<=bb\_?_H#%pN/om+9O/Ee&f]C7/%'B9+XXVi%[O52<iZM>3g='J.U-MiSNOG"tM-00Nb58Mho0I\AQ.:'>b&aG#a`r<qsA<
%koo0u%]%2Xk/pRPPOiE1Soe]d7-"o@N1Pt!6D%_\W!HPB>>QX_7Nb)CBu8i5dmW8AXmeEBW!,:6TOufhoW(IZ]m-0agMD6,l'uS"
%[I)rom<-TZc;Psq"E5mhMgQ(PAUZZg-?uC8#7IO%kE=AXF<i3d'AUN5HqQ=g`.h[)2&/,?:M^7pd4-lpUa1lsG@47\Z<(j[-PCYH
%'Wah6#2Qp.GpdV,Q*p5SC]>kokDip5q]ieZl0rQlFHcL;c@9-h"Gi`HbDapd^HbtT;;C./JC_]\eMeN'5,sSb^nl0N_*6eVll>@'
%O9!f5A..>d$[3bt)Z[;jG?8EF#9j1k)271(q]i2/I-tB27L#:-/rq3>R(5:jgecKIDJa3N",mb_Aa@j'(h;p?$t-r>i#3+YN2_,Z
%k?s,n&Q^;1d;IZ;+',J*U1tIo9!f'N+FsY4i7.P'+X8"Ops9QgMNo>..2Ku-ZS`<>(DKGh7VnbhQWT<OEhlE*ZW>OTfV%D+7%KJ'
%3Ya#j_2HkgD_4kTl9O3>2bKN2KIPFbb/d0o#oblKWSlo/mp0.p,.6?oh[!78lhK4=OZ!j$XVn2EWi*H0oQ$Hbh.W!3\o:jYDJIu&
%HMoO-#?1eEdt^:GY7`N5#-N^>ePAOS_72SANT+ll9qqWcA-glHo7A2*I7E,dB(C,)Dnd&6FfhC5&D5+2q^-e4lcDN')'0J8IC!=>
%#9cq&Nn#.0!Y'n.qk4guVbcIU_hO&#4gN-Yre<B1HB$^l>hY-Og$h/T'p01+lI+68Ee4FcHV-nt8N`f@L<(=tV`F@iblqXBE2mO*
%f4l96R5QR<EAS(bSjCRa1t/_ua-@u,-\2$XF#^T?/f\1E^&#I@h]nkA_+"%WB=QRm]'')YJ)-=F=a)&/pYE@X5Z/MmZ)KV#bW$A"
%PoH9=YM8!5q_*EUi;E$AlF"\.q$0%-:T?MIEGH($oZ8!S#uPo-(_*I`M0=Z\.5eLb/k`6,3U;dIgpnKQ=:rB$&B$j,c=NM5I^T?j
%J-%Bse8KL,%QDp1n_>,2f`&E<O#(QA?0(GX]'6@$m7!#\Y\/H?iuD_-'J;B9@X4EP/hXnKGe'APp!I,hK)a-n]u3k]KGMGmp\!AE
%F56l-/2P_40of\IOB)aOMr8?/3sdkaB,1p](ZD++`2["<R6Ct.*9^_RAM4J1M>O/C@>dBi#[rl2!m?-7eqOPPFfO*<g]e\""fojI
%E50cJ+kJ&.Z>.nT1_0e5Pd53\]?bH&ktO7A67dA&b]qT&qhrrf$jFLgjS$cUm]Ig#ghOKD!qrq\,iCKLp$f?ppA61cfb<frqm$q'
%q9[_Ii5c7M?3K?.-0o.6VAY%=Uj)S4#U?Mgr`BgCiQ_"^PkL8'`DmmOO'Al>bVLsABZU`WLLPoI:Dq!;4G8lY':U-2mp7!n"MVL(
%A*o)2bbDb^p,$?c,he/q%3bie't6"]5WkDSW"80C$V]LL;kAm6kW&iS@kb=P&A.h:H#1=kcUn1QY\>c>'W39D)CY\BXbY1),0n#l
%[%)q_kC_^b4@BuHn\5"L7<]6_OEcNjCN*HLUEN6f(:@:-1RR=Bb&5s5WX1iF@@ClX9FPM5@PaOeQ(QIaMhsj+-BJu68U[Kr<)T4F
%nu/#sl7dJr@8[57[-lE-AWpX;B5(&L*l/ZeXn12$miN;GH]=94PfRna6?<&mJ..=bEeiFF\hB6U+5T)D#SOq_a48)#gIK)IKt^BF
%;r_p6TU`q-]cun\nIRht1&?jMO_I!n#4<u]Ju"Td,G/.eFT03s[=)(aboOGb8bj./$noQ!Nbe(!JSYW[`kQ_[)(uY%'B@2s/Q(%2
%A%V#?S&Zk's7J!ugg:lPk-Mmo`XPn="F#J+_3(5?&*bF]f]ap.f^GDR4>2:@\RL*0H-ke35QGOkkc#MH`Ae@a=S@R&S;<XJca^8R
%Y!\r[G3BVQ.4Bf^h9/jiBm;IF,WUo#*3DS9)\276=<"q5<St-]3X(5&>YcQ"VXr_$07&<;1YQ?f4LX1o#idRLC4Erm\LYPloA]6o
%W0mN42\aqcl22ag$]s.:9I*>[n?"RmRc/b1qF,q/FDuEmQGfj*'BPP7!']K8fdXh+K%t:cXPQ'oGn(!DfijiSFMq#3-:MqU1]G!,
%UJ(.Rb(9`DMnW$([&=6j)UIk%.X7gbQ^H^DXC*/;EjkeZOuVCWeN?j_$U3f9ON1EPJ<Xp0Rh(2<2`JL(aFj<b^?m#Skkt_eF;.Y.
%Mg;T?\e*>:#;T>J3Nk\]K.d&cBK26&'"XrSb7fm/\q4[B8(\Li)jU\1gET3:[*gZ6o+BT2>NQu[*[h74bSJ(R-q.HqdApm)9V0&#
%YAS+SR.r2o3QQdh,EKc=%0KM;nuIPd&$OmXBN/FXq@f+bT*.nD#EK.'gG/E!U]aeSZ$))hNVIo]j77/1oF\j8/6jk;Y9=/EA2O44
%q`f8Qq[\AB+MnHbGk/;sm+MaW>LaKjrNan/k6qtt,It8>LgBkcZ<6AAdFMO@ZBK(,!rtN!1;N;,,6]k)ja!^d?<fnIO/64;4HCTp
%5H'5H!iRH@L1TC!\<c.>CRCrl,$o.:bN4pt0O'n!>TR22+E\Ss5cR;YDA^B%gu\b'QDs15WRkYm^p-3VW\+N0P#%jCOXN^:e)H[W
%%qTgS<dr^>Ir8pCG>&jM'lbm,Nm^!'X"jO1(#heb&?aafoe**:Nto-!<G_V!':Z_aLWb;-TGOt7YTfN-5M*^+*Hf3-+6^*<Tceq%
%#r.sq:cm$ENY'R;GD9IN\7".oQ!u03n6DB6*7)m-@#9ZS2AB-`Jpc#oW2ZmqQV#._8^#IETK2#p+G%bJYT!^RmI<7?c%.W&#*@RH
%:j(T?.lA'<>JVE1"5TLOX4]B\FO%4dOooGThAIY;TQB_8Vtn+GT^P<I(10M)c$j<(KLWd9>]:[](IPl+h7fV$Epc^,+VEJ>_?hXs
%8TT+kY5J.,,(XLA1Q43++I!gI(Cm9l>^+,RUkDCjL!5)h!cg<PX\'ua1cS0sGGnDF6_&9t[,BlUe+F7tJ+s2&^DG9VriuPRCt1*s
%=/[5W3Rl=N]\mn@JOD@Y5cC1LH,3F`@m^]]n!lt-'2\DTaS"sECU%9(i<#qrMD(I'@F[l(W#6*oTq[TXMNjbj:T5CXTa;eEGr]5Q
%nnLmt(s;#AHH[VQ+;r]ROXT_[]'RX5_3QL7@kNl,4UNOd]eq8P[g7\R-(kkK$hD@O4i^p2n<D5^nqM`"l?`=9(\^e[aEWWj`XXH-
%iM^B_U-f9%6I$.7iXRB$6]Fsgo-g;P$J'aM.@"go7u;hf$\74mZ51DG6C<;#Di)WVGr&:"3IjM(_eE6^H-Lp:?&e$51Z?!dQ;*FI
%k<=Y>TQl`Dg:9JdA"M5Ho-*?LW5u;5?"=D7onpWjF`CE,(<&F>E(6U/:^JQ#=EZ^-nBT*Gf%Y:Wb-9e`9/Zog%J_faA;Ba"l7opI
%cj!B5q/M_tbiW,gMt9uc'nUQGOh?BkI9\eU4Z5>g3Q98Wo='6#hqs?ka+B7NLqO3iG!Qh"VA:CHr6@Q3m#G>Y!I:UEWWAYgA_u^t
%(;He&3VReOk\'kL50bcd4>u?1a`[=FU1?.ueCXb#%Q'pJMW`F^a+p`5C<c'ER:cai*nP]#&j$Q%-W"dKf\Y[5H%<cW6/@0&g3*q^
%B]h,_"8B#`+38eBISoU%:$:]rYcg7*ZT4'uYJ\<W=QrFM$r!]qP[W\i68*=pX5FMkb]Ugn0P+.9p^gAs(=fqW[J]!Z>PT.(',2@6
%N1qG[(bWY.Ac;f3?t]rad0TS;V2[,*La@I#kWC%4"b*o&X6Al&r@?_9.EjL?nZEn.!FO^]RbnKM#7"Z6RtR`T@Fm^CA(U]ifD]:3
%raXRZA(U]smFl\`5_QB3"[NNoiPGS(gU7"hglpn_S%&XE<WM3(L'((C:lt]hBV'CMnlKP3e&S"JO`"kl]pEQ@_o-VCX;`F@EP^?>
%<!0_^%Jpc(C+0ReY)bXk(uhPU(D;*[Z<`c.)s0IZ,(CEO`<jp8C3i-.TR'4Q]lU$5LC/?4eM9qVk%VqRhPaXNXR53K^hZ"a`e\/%
%[j@MOYP6qX\ki@`]1&i'#$\pQ>8cU%Pbh#EH!E>e6YX_ldX%(%K2idph"CtPlJr*Pe?>&<NAIB';-4e$`hdpV?<)2>okQQXO;805
%?:Io6+ghp.\[K/FGA:-e_Jd*O=47<iSTZ$Tr[J682nJ7ClskG2`'j_cUoO>MJ;#^S!!a?r!*/:o!8<MZjP%<5;G1"dJppb$DJDOZ
%+%4YBUgNs1qdi5.0=m!k?\GG#`dabQ?G5<I5_&\9Ns#lt`AAhWP6_eI(0JZh7Vcj3/K1M>->>B?2&lSr%7nCZ,I$GU7!Tt[>c$_W
%%B/8unX,$oU/-*\e\%FN=MAe=JSE+4-l`c$/S>EjXU(@i"?8Y&Di&_!gpsC,<WPMmecC@j*'(jA,-&3K:q3k&IV2HFM5eE<o(<Y]
%18Da<<)\VTof@U=-o-ZAAJ6S8!bV?!\k0Y_7IZM-\O-%>d2=lUnV$D%c2L.Zl+11C96^,$8+bdX>0hq$C:+)DC]%Zd<*h%oEZiRH
%p0bmg)U?Q.j,KFK;L1ZhNYElnY%tsBesN99F/\T>VBYeUk.q_uj?4.Bb(0\R?aQ#."sLm)]B9!fKs[5o;lMDVUkp_u@qC7#dE@&J
%Rp;=G'8#-3jW!i)X?$nFrMp:ne6.lj.STTP#B!,':f.fLs)kr&2.>ZdYR#X&=q(5HTtVu(hL.<)0YN)?;Oj>OX'H$OmK#'6#BrNJ
%P>pgs%;h1O-!.cra<G;3C!XBFrN+$pcA!i6!_G'I)3Dfi6j<b6,d6A2or/4@TUhc>5T(iaJu"b87(O?*%TT?!*90!/oeb#u3*0Jl
%Z;gnl9LL$Vr3a1a<#rOEAMURA0Pj3RG.'(h!hZ<IF+4-%]*^cgKZ?1rJQrGAQo6%TrC-b!p['d!8P+426HX&jIZ-qshX=8^M'soG
%#h&t(Wq")f+F]IYWt[/gS:aaeC30"^QR#6u6G2[h6k1>?p$;m:TE7]9g8TYT.Mu-Hc3A^2TN6kR]9`nf=7Sr?_>@+f1X_OP#o-f!
%S$gX/??ZKq6?\E4l\r#_*oRC9-X.:S!R-mXIEI&s2:eg/IK,>Fa^d>)U(*^-B=II`pF&e.X)"YF3=#p+RS4OIiDK1Y<HOBh8VmgG
%N(dK?TfLC^_H"7Ak+`(1B<hjF*O,K,l+if)2j93<9@kktbY$lWIASW1:-CKqX8lYO`@k.u<s,`Q!H1,bNo.uG#;hO5lOd58bn`3h
%fVOCa>LW@O'TmLh>-FCfh0TX;8Rt-,re@q5B7l/p#nWT4!^;:5/;P0BKYj"+[D]i#4!+[n!%jcd8I9fM:9kX7S27]:@tgU^!!V!1
%cg#VSnOmPY1THjS*BoA2di_%:-m8/V53Y.nZ\#3"'u,\rL5<:\V/jSiJCK:;$DH=8lm[6E<o*;jLq*_1*WGYY;n["pGOMkclO<(Y
%kr9"/,fV5SPinAgZClZ;>6snf%5jpeHrf(#9a72n]iC*X+LHLbDLgl>L*i(YH#CYs;fgQVU1bmDHA\"B=Ak!hRuhA&]plPQ-'N&K
%-Ur97@kMZnR[3-R.)N)V?Y6[j<JpGQPS'&![m;M=o]Iq0oTN)T0+qQX>"[c<03[[1ZbHHUl])D(@\In<8dUF,mnc:A'$Aj#FV8Ep
%/!mfOc?,OKH[J`pSu:<g9/>,CNme:W#-2`TSZ<B,X8%S7RWhpt95pT0'bmn_:hpof;<-GmM,gAA#=o8!Cu[ZpK8nOT&ebOQ:,0,#
%.^L&o[B*-(P5k-3XNYN'T*@d):\qn.2(t)C,W8s-.*6UBMJXq@[9";QA3gAEcPDre#)qFn*II/laN]b4=^La@MiN/a=cINQ=`A?$
%1u6\*M/LpjLB8An3T)50s3T+/35P7/MZe0"d!U6pH[Wp03Trk2XU*Z5MVYZ*#CW11e&)@`j;2?1$MndqQ04@XX%fJ3$Wk-&r0:AZ
%Xp18H'Go!)3;%[Mg6&CI*&:)>XT?PqaK[GkF3Bo)0QM5oR4cp(I@iVH.,3jK8RU%IAdMh#iT+_sSg/OP\HGpn/FuEboT%SmIC),V
%'0uC"nhPRh?'i4h]D#Yn(0%N9G<"s)?955H]F..h&'l>F4!7Vfl9(P-@9A1@9WL+F?hM+5OW,$Jc-_geV/XpBQX*-$qr/d-QC!%u
%/+RrA1e'5I>Lq8c1=FtTM9V(h?J4GuR^pWt5+E6KIWtM<(SC,BNR<P8s!$4l`L6R\%eu1mk?*;N`Y[<H='H3k:KN3RJ!%csJ1LC>
%0(psa)R%J&[ODJr"+L-Yi"KZu$C4(t54h;&H=3pJnK4o.6Y6W;Wesih_7-5,^ZXYBR#F`D3b?(=lJ>nJ[(G_WSiTP[-LJXYbiHoZ
%\L&#>Io'F7dDDiZY2H",g\h*/hUf,:OsSfK#Pp[GAi>5Rp\SGL"X=Q]8...K/((/MOe?/QoS=4Wn)``Mr:t[O?'UZiSQ2fV?)E>Q
%F*G7jg9k^>lr[\'PSGR2_enh)QGE[XEm"]B^H53032plW#M4"daVMW]&mMqX3ZSf-95b5/+jPcV2\*1k1G5_\"nBN6>Fm6kX'/Ne
%=KA/VM!@m#'AZc1#B$>7[99pMQ_D>9,*hija+gN6\0?j7,MfT@2r!#BS<FppF_kI&U??cuYi6?lqFk9dn+0<7YD2149[0b20>,S<
%^AKR8q(4Cij1J2kaEt_Yr#<68Y8(@;Uj$ugZc*'#@a6O2mKGVWIZ?"F@si?F*4Ur.Um+BFP]P&!-bNTg)"XcIa0Bh_>e&&eMq>g.
%'@6&nmKcKa2$=,OijL%0]Td(7!R%c7]Oe$Cb`,.B;q0,$>DU:i..05?+rJL=j7JO`S,_<rqI#[ngr2%<=)RhAaKbJ_Ohs?PertB@
%.s/7dj$6muHgCd6:6RpZ"u:aq@3#Ud&p#i0]Nl]kd;aK$EUV&-V4fe328f2'#Y2h0'T,LpmKt0!:jd.#XT!qG=CWr.NV9_&<D"-u
%=8(B*[(9*UF%4/[N-!b&#*1\:E4.1[qR%raFoGQ^rnIR@)fL+Zlei-W][3fDI,UsWNCZ#h&K%W`[iiHLr>""YEsC9XU35XD]Ge;X
%)]oUqE3]?W*`c3`joJ$UKq0rQNnR9!;S/Y2%-5b&Hi'aS1d7%H*E&3rnO6Z@1as0(#EFkHa=TQgq)6P`8S%Enl-G@=k3M>_9&8ps
%A:,kt^oOgM?&+a7X#2P$mC]OSUT!$'BkRY,F<NEKZrAI,*\Cd=]GGi4h:m]%N,W\Y[@*k^=;pE&]T<+MLoPq7SpoH&HqR#<Mj5"F
%gfOCn5g7IZk$5SEi'9=i\nJ)6&hkQ7J&f5p14"GqYp3e0,"!h1LG@?*a]lQo%=G#gobGflC(2Tm/.eWrU8<2K-4eMlEGl$*l*`Ye
%(WJP3W1P9P_Eubh>Ms4qfs@]'BCni&^2W?\m!1Y[7)uuU*cQTPH7nn&9ah:g]\KZieh_W?`&f2oap[h:JuFZ]M!U!Bb4ZUt\Y]0H
%"?%=IAc;.uB8PQ7a,ht?)%B_l&*Y(HY_>sU5&D'poA4AG/u.dG`k347Rlj6QlT)Kg7JWJ5rUsLS)Z8BfR<n4-LoT/(d._^hp3:l<
%mN(IXP'f-C4C-lZ`4bD?>05fO=L@k57UuZTlp*1*7'@#ndR'22j(GU48IGYK5V^(Ql9^$Bn;rPVliunfW<)KbC+Pee-@_Ld=$1n>
%Yi\],1IL?O]j\*.I_j,38,LGm;'0kq;B?<JjZcX,e05%6#."`LA_9a!46AYcmBi&\+mG@5<'BSY8MPKFM2H.F(ai+p^Y,-lfpr)g
%D9e?:Rr!/W^'#OEV0\HK6T!3@:SMjgX"ubV,UF3H"4BPb'cmuV.n1/Yio_/`Q9V1_(WOcY*W@4f.f`G+kFQH#dc?6m(Sir<L-<)q
%.2o[BD'pLo^=U8G-gGn"h`K/n=Y1uYmH5ssGWOB1^83QVfi9;nI-5X@+n-^/MtZrrdjHpE<'6er_C2kI4&s)aL_.i&SKjlGG4k#c
%'\Q#-IZD\+-os3m#i+uB&D33ed[Y`Z2iqXh7aX=eSl_$)o0S-Ed]#EpEl`pmkUfZBfc5*8W%fY;I:<kqE__#XPHSg"HO'7QR[,^k
%))37Rij'0De<pTH4.&5`ko)fJTL(h.oa%0?i/R$#_psP+:qa40gr`HgKa]L-L5At4GR!QX6qfk=_=7W/d3<<m\U&qENY>bkP9<,-
%[Q#uU!9re$MI;cf1ChKA*i^`[i24\eNA)46#-$"iX(51\Z'R8/o\0&UNIld5i_Tg:c;.>4Ru5saWsBB2<-;=IBH+$OT5DY2/(LjE
%JAm4j'?g'jT4G;V3*CNN#(IUS#s6NF;N!hW*a8InkCO:>>Zc]Y1hu>BrtAUK!-?L"L%]'Om,Mmd7/QSF_u/Q@T[/*F+;<'PD&=ib
%CJ6;g2K@n.ZNI`():AQ@^Puto&f)F(@J<V9jFY%h-]Qu';<:UX6Uq%3@W3:rOO-YYHX')e'e]\->UBpsdZP:en(:.-SrREj'Oj+_
%+lTKRs%2]9S<;jis8*rhJ,NA#(?T.`G_]HNg;Q$Qm;^<3mmP&+"S>PlTs/5VdO52/W!qs,V)6O7(,S<q./rHI.K28,n^gS3,1)*r
%*i07"#4n*q`0Ut9_1$r*3!NgXWUeOAl6Sp=d#-oRWt&DnPB<cpj-]T13*.HB#;?Esr1hih,'>tW=.$(X^HJI_C9dpZSE8R&jtgDF
%Qjh,N.'U;l$[Hh7IO`-Id'0<2Lir>?^oq>2N&'7)NRP)5_Z73*7+rUBkHdiJ.DpFH_OQ+o9Ygo6,S?4AWG/DX;!^tEOT0q(j=@^l
%#Wn1ZW.Z2HM>3F!68WnN^DnJ\.2mR.W[:n>\mLVOj15h6TN:*j36PgXYiF;_?,j&0p>]<Q7Gu>@IXE'"bSHi;5/+?HbnH&4Cc*hq
%(D3hD(K$W,X%Q@qJA4"5C0<j@#7(;YE[;%N:m3*r,\=-c-dNhneN(>\YK5afip/O'^!c/WHU]E7;dBM>Lanmga+NO,2^q./Pn3sQ
%K"^KS*a9hOEm[_fR9qnA##n9\(t:I_(WT`MLb`.*J(120W>i+eb.PrqMScB82'^D`(DsV]Q`<:nm40']e59QS;.-n84013@M/Q)m
%POmt%m,d!<YM&7]@J%nA*hjZ"+:&C%:YM`0$"qAL)gX^LQ309D$<9$nYq4@c96u]3)'#tZgB:@m!BN9Lr\-J'4Tj'APpmrQDc@CC
%`ij_rUkSX&0P$He!pTQ-(Dlbs/-;Bg"%,P/JOe_pC.aWr;'7VP^QA9f"GQ7'2^%BG#=oAX%8ks1^OMbgc[3hb.qStB%MpJl*2-/^
%Fcec.8PfELH`%,CO>]/W-lC2]'?D:!Usko*bV3N=\BF!uU&^pi.4SiI4=g)WHgk3<S=M<Tr`;e,.35TKb(JCi`om;u!)L17[^%qt
%6(3,P-q\Ib2&l]B<+o+(=b0\Cqe&5VB!Q9LSp>k:U4Nu2.H+8i>BJ(@O(;:]aQ@j8+g!\U_qB_HU<5[;7"V0mZCdV+5h#E9NdQ_)
%>Y%O>6q-2cj@_+FX4ltSW':.3.:36&oP<ONN]8frPiVY(7PX8#W'-aLkl9ZO%':5/o/^GP\>aC(g6p;ice;Xp7I>#PcX4Nr*0-B[
%bR2MO(G4b)lb#ar&Za03Z/[5cd82\9+S;]rk^W_niR4)'Y3]dmo?pJILX;T;HQBuEK$SgFrF-K]%?QB0_Q`Bs>qNA@4n5qFa@5_&
%W$I1(23;uh_mtS(E[_$9><bbACN32];4VH=h4gPKq*P)=MYU@M>6U*U*[+h<:YtD4>HcQQr]Bo6@+8NN7ul?N^3^[_Y'YkY,=g-a
%:(\]UBiB$-D;ZgAm8".\[d2a&!sd4Wq0q,o0"kMENUNCFkBbc/)SOr9)h_Fnj3+Z(3nLkM>@u))Wm`qD&G6Z)5;?u%bRQRn_r`?8
%4&ruBl2)"G"K9_9P]Rmb1i2adhH<J<OcCM;K2(_6U8_k=e:,ik;jo2%?K0jtkZB\8+#g^23K,3<d00f:n"!SbRY^+(_T*u<`8e_>
%V9te=6mPHOL-grR;pjp-]];6sRqT9eSh.WWG`nlkno<?m5ZTl6Z(SkVrn:97;*i_0KYrB75XIL`SZD$^RJ#P@#)1(j\>[jtT<[Q<
%,u6h6*^o`)o^0MY]1:[T`ZB>`92<J+50;:11I/QhF*kdW7Yk>.Y0hM3X&=)nY^!+>^;M\__]=).*7!53OU-""]?h%lAjDoVUPn3]
%GHe@nB/cDr(Xcc^#j):U_S."HJI#LO$972#$\OXVD)D,j%%YVGFIP!$^ET?FDX#0m.C>Fk@js73_++?3Rn?(Z&;iQ%Z%Q]3o0eq<
%O)Uo"-Rlna-,9YoVgRWuUk1h'NZ+%,P%#aFf0`O&mkPn@Dpl]im9BRg3A'l`.4*hT,.Uu(^X&AB].DG*]'pn<S:IdU:&h."fD.=]
%M8WBrWDIboYkNo$)p6;'pN^2p-_I^sG]K$E$.3UDN&0KrKHGo1MGMNXg!]HHM8G0'G>c!+0k31`hrDS&^<JJ[l#k/8++L&M)=GI0
%_eZEDiY/r>%$ApAq*^DhaEgFe)*0M]rQ=4qH+-$I]WuB]Yck_i?[tF`3@DC-T`77[hQJ][Yt]ln(+tW#&G<S-4NPgQT#e(PXe6p)
%;n::EkFUu@@J9q!)fnJbH*l.Jmj)U;D>$[?RnWT`Q4cKZY%bPKWsG0Be`'p-f#m3ofGXXfK\t4TX*4k%&e9MRFK'6_U][M!L_Td'
%Uglr7'BRX7@qk,teiAM^7"Op[A5bIl47`.3%M?kYG\]M/)A&*Qg9MET2MU'q&'t-"0.AAX&]7#djMf-?L#5G#,-NRbT]gYm6b">G
%R:fl8#a5d+.$uNFjg)FX$>m7WL!!FXN#JY.Kn`I]ITHQkZZaVlNM>6eP7Q$#*aiBoAfr"P)0Bk#Ggi5<_@?o%8lD<TfC5p$9r":W
%AcE/_O),Q\V$9bXR_f&^!MouhWQtfT4XftNa6eJarmg*X4BLpsbq0PjI"8'[=d)q_/;]aq.G5khp9D8fMG!o?A2>c*%n5!34[2OZ
%7*Y"lrLF37Rat>:NZ^_cEoid\oT2QAZNXQdDb#pY\UV\#`4,9)`6ro%kBlIhM=Z]!>7D,.Hb.%cYA_2K7P@rf>8a`.Ecn"sR&rK.
%DXWu82>hhT-)jJE8IG#/a-:()S)<i6md2"Vl%UhRNUrkIs7gukQ:L%&Zd4\1J(f"^`/=\7,J#Pgr(;H'%G3k2`]LUM71aYn0EOU]
%S1,X[Y.F?=55QIf``9#]F0aNkEJ2%>@CoDMq'(OdO<An!PSOt"(Nu$ZRcT;C'fRoq5"&1-[oA-l/U^[>2@>)_gVG3tlJ48!,/29b
%m^4lXr:sZFINckZGJDVE.kP'Cb4Q.NhWdPp4SIubOVYCb%"0]*Edh!CPO<iqo(0Q%$6api\%XsiIb/XWg\Il$%qq:Aa.@5tja#8M
%31hoH($>UD;"F4QFN#oAQ1LOfDM,PS6iK];5J(7YFfd&4f,s"o>hl<cM\I?_91Y!eS!**CNn>i/6(=+>,If7_:DWa=q-gKN1RY0.
%P:`A@gtV*$C$JG8m-\P:K0dPBW1n`.U7at6/%ZZKH"i@0jP3Tr'<-c@,]]'&JVl;DhEE+dR?@F*RZ6e]Ru9)Y;'M*\>,+VXZlRXT
%b%%+"UIQ.^1ptbl?tPrk^38'F8tNV:N&2X+r\-NCiZJ0rH*P^Q[@7#K^!0n0S[l4fPZZ$_*VrK_^0<dd!Y7rkcj9>AeM*AHO@nYh
%1RhOMjse\?F$:m/4.Mrn(q,A0[pTG`2?LAuPj(PWGboCu9g/FDM1O5F3b-eZqeW(LnU:\uc/dC$15.$MUNprQ,f[m9ngX`Y8BG;5
%SF\d/Qdg`\>?N&+Kb7'J7Kf)EJ\=FmXc,&8:fg2CFM)7Y%r-S2T0GOnrW3Ok3[39s(sn=Xl:>oY+_#W93We7S0L#P'a'pO^FprNp
%e\(QAm^D*ra;*;9#HMoT#3(_<S96;,8F$%H1q4c=@E*Tj=FIk<f2:?bHpNABKHr+#kD]q%'L&1?]]cj6"g(^dM?\ci"?$(h&[d-p
%2hG:U9?:4?rm27JgU\%gkMo;;\naj:c3=hP3trH92Z(1@/RU4E5&u?4ij+D+`;+!Y0**'f.7srtFM_;B.q/-4Oq3B^SB6e8*QZ:e
%-0S"k`Z[gLU0cuMQbgU5s-(2.aW<0+<mMmS!CqN7Xb02PgkY1ZEYWiYi3$"5o&Gb^6r[(+$D?K6MQq\aO$NI4U3$=QcTFtNO+6D#
%fO&hhmh=eL#U#f2]dDIe%S0WU@7;bm3Lkr?87A>)K+%,B-X9-4LuYcEk/,"kFg)B1]t$^$[5lVa8M__,3MM2j+SMBom2RWiJmQ43
%cd6RBVnTmV/c?WSiT6P5#-[J>+ZU\`f]_\dXd=\+,N6Q^#N9:TB$$Kk''#B3"(NEaB^b@2A<04%]!"KS&f1dlQi9.6\l]0Do!9*j
%ln%RYSH=40%<L=5-<("P?*B2bC0\4.B#ttC2m)W!\!nk&O3n)Wh$HO&>Y'Vd6g'/#Xjl=o/@[QpK"`;kQ[][<^sepFD/[WL1c)&S
%LZ)D!oTb/mnG;D&k20D+X@,aQE&rO<dTao^++L3N(_p:jY>"YNV9(ImZW;k@!J\2B8DA-O@s2'R%0V?R"ARh/4tc<fhZR$Q]1rhh
%EZ*iV#$\ec@>@5`1t^/GS!'H\6(C7mIrF6F_N'?dYq5>,0[YmA/0-mr1&g(8.6:Ek0h2fOA#C7Eest_<q@;R439oOu8L@5T&8iuB
%Gl@"ofiAB_J\$()Q%S^X]\?8E8-%>C1m=1+_DMoK,NjrODm<$b_>S86-*r!7N]9U#!lCu]`iIqsTYiYoT*.jCRd<"JEj?dJp`>b2
%*4jMRe]tiM_-B#_U2If0?bbPq<Z-]JZBW,PXoeN)Fpjn?Ft>?fPGkb>Pt%U@O_9<hkd`k(VcqC>Aq(ST8b?hZe'A*;(!Q9f'4J7'
%g&ZCt>qSajN:HOQ8*Aj]rn>BN=0.Pp[WWK'=K*mLgYPc;"I6mF5kk?!@+"o$<%RhM*@8t7/ISssn>oHRNFFUN$aZ3@A5^X3+JmS8
%=<jI?-B?rmLOIV'E%.`7%G#?+(ejS,KD.DeU3I'Qo['T@HiWCoG(2^4*uD&^rmMa=#B6W[l@NpD;r"P21J,E>I2Fsg]Y^i<:CfMW
%U,U0gm)=GJa*(*64`#J'/e=C`+fb-;M*G,IniN@,^N:XV.I+l)09`ktYirt_U3RT>B.1Y&WUhK_#:r8nU,Ek(Yo`L'/<*riVKO#6
%FZXfrPQs,gpg]<MeK#Y%L]_Vi+i2M;m)`HBJ89lEE!d]A,9AOo\&=4tV9f!kqp"_&9t0/EgND^OIdZ7:r_.7DdaiDeq<R<#J5Jn:
%)>t&o]r9fr29B/8+bW7*_`Sq\L6[q?ro8O3$!N=.&^T],aaVf!H&V!N_fT")D4F!lTUe2)-9pcQ-AaO6)1H88JY2#G7:?BGQ&M]P
%Aug@a6Et=df>(-V.pp/el%=RWmWf6$;Sng<m]e'G"<TH,!ZsDuN3%5AqSEZV\6i56![aCIfk9%F=2W!H*?-8X+l,^,Cl98(.f-Q<
%q4d"?]IEYr/D_<K5`^EC@$8Z(IaJ;jNd]_8KL@BfZNt(B8HlO(P%,ZgNhQi=DbO7iPSDVdE1/'NPX)"6-I%=.lCp%QPBE/F6?mn"
%Or49;$-'Sj;W+?i*:%i5jrT-oJJnEb6aJbNfP[j.?8b+JMP4SH/kD"dLF-V!I=]^4.[cZap\Oq9?K9/5^<04_mIF7ApM,*UJHG=B
%1P'MX(X!^*<sTNnn>a]ra2-o&%Hjh>(>R";'ZHC]]^>4+iRqiM0j?_P[!0t/0IeA9Qb[>1W7qIDSacK:jhd3-&fnm.o@RALGsd@6
%l4jg-1Mt""HE;pG&@A,eBBS#f_MKuJ5mL$hZ[@O=f!8f$GJ*-G6c7+(*-[j^lL3O6#\8`>9Z;aKRcn.a;=0=O%3Zuh>dE7.=d0nq
%AYB5ZfgjkrFss#Y6qE710kiLq6-M#=J.<b7Ls<?.W!#"Oi0k/B^B6U&b\ToR+_"`=W9P!`Q=(l/A7b/7/6&s48m3JG)&AY=2)r*r
%hG0Je'uGNDVhspbn&ATK5.dhRRPM28;&>WBO;DpP2s!0enD-TK!4'EA.I&AZ@Nio/63t]l2@`:s"$,jZ\_#aq<'T$W6fVUD5bpP9
%G\fh^%MXmgU=Kekc0FnW<[Ab2U%g\uCo53i_3ojBoS$\L6&dXIC1Y%s%DM4$53T7V1s:omZ:$gPFUK-TLPjGPBpW(i\gD3_(ps=A
%)iqJ2EcYXu)8o]gh!=-0NIQfH<%ATO"!B=j&2Al0!Y@[jg9P8^,tVk*a4p5("7)&f@1]/PQg9LKmD/jHXipr8C:X_EV!pciQ(M@t
%RX*JfM<L>oWFM'!)0`&jAcL[jSj\@#W^SIRq*DB`Ft6746N+tf[3e+(AH*X#.7n/[Lk@Lrej8!5<<cN'-WLEkF+W>6!cAR4Sh91`
%d(C^kr?lWMr_dllTgJ=+2*74B5Veui^Idn[IL,@3lM]n_G1I@`p,"oKE#t[EB42VTDFh(aO*Vq".N/5>Qe<4!oG.iJ(S6-UY[C`<
%f(oj&2\"NKD&Q-%hhj[">hX4'WqI/8F/g/R4d02('+6RGk,O?&=ucQ//j-f."l?PfA[Q44(V35k1i8kb'73sB7Vq'[MEIe:obmr*
%f$=t@L4(f#PNVCJ3AT7Y@XcZ]gfBlJ)ZEY-kCQ%)Cn;qhX(m)WTFi=*93t*GEM1#MRbYH95c;hlf<4)P&T6E8MVS8RYh<![fuqAS
%,,\Q?5.@cA\.:"MFP99A#XM9!:uHaA6W!1">iS!_FtOSK1Nc$[c=0u]8bVTKWU(6uk[84CUq6p.Tnm1ONFa9-)""mMqCqf'#d9=g
%!5Wl(=cfRI&!u6#!m)]CEZ+<W3<4e,pdP&T#p0/>N%p#OM\`*UrK]K(^4/[Z5XI.H8<0-;afgHYMp\V5Oc8Nr*<CC?W&oT,L$k+8
%#a%'A0]5Ut@Yo<\H00W#,@"c$[GGJbSuo,V=FopuOF5H9?5;Z&W950+(TfXi5NsG;e@s6EVKbgu!("tbDLu<3m?"9>]QcMo$Sf.g
%%2=C7*_mSq'TCLu2-%?-T46Ekmmtidi!FeB@V^)P6%3:%'naVD/+,f7j$PW%Vo:%[I(WJ1m-SDH>Qo"o0A;]@([o^jPtMJ``87Wh
%DS+$\gD9(S`lr.Uc/Se1J:[K")-)"n%s'B>Q@'92EbI$MX[kbi+!i+Z^nB23Et3kR.q.AC<bUi[?f4bd[G#$5UaO0hO+iarJTq<p
%!Re[j#(TZ>'*G.MEpeu.2mU+G.]>8,?XmSX*EH\m%X##1b%/\sQkp[b8^`5CY<>JS.;ANUbGTo_$2KOKUcig)*@5FCY1"Q%A*I)^
%mKV>(k-s\7?G/kMU;R@k<%^3j'W(Cu7PRuWkTlMC+I\mc+u'pS*Lcj;I/:enhQJU?K8Ctp%r//MobS5NKol2te8_Z7Q&YEpedN(L
%AXjnbdc2RU!:5k8OSnIA1`icHWt%1dl4&jY;G5"s_`5Pj+:_?oc91G+pBYW2<l\f<Z(Z_H:@=3<rAGeOe\NXLHLODj>"Rs:!3Zqo
%=-$.AgbF>1dfkeg4Lb1n!IIN[5g<]D#Fi)bMln*YH<mBFRho:!le!!]=ZRTjq@W(Y71%HJ$0!"jZuBVFSVJXoBeV5>QZAo[,tSla
%$Qe"Sh1u@Cob+(\b1(TC1BElOflX#^.;@JZ>g=]Hm_drsA+:MOAH[u1-rZgo\lU?H;*7UEE*KDT\GI*XJ`j;K%W8s&q^D.jZ`u:@
%3>B"t=CjUPYt*&==8+3Cfk'bjQOGbRS]L>ubPi1PGk@I:'"3n>]K;-$'F`opBMn>l@8V@@ASlAAVg`3Y;]Yi\]8P'QQ,1q<[#Nb`
%)GWf?2GH^%'kbH;D3?T5I^'2hH2s+f6.Z4.ncW_IUX\"dkDac?6-TOH^jY&4oLDgg\P21=BHJJK/AhZU)XIH[EmPPR",pJE\(c-O
%:Ns&K-_H+6D8XU[V0^\_j'[6H:A8N4,mbWi$l@VL3YUOJ_Eu)$kS[)0XpL2qAF[fc1`WimrMPc^"[nf#S^$I)PNBu'A4W,:Y8ikO
%iHMM&0GrHad5DR*)ZlsKdZ$Li4mL8,2;QgqdtC,s-*Xp.4JZM-MatYg^F4eQHCeR&a%m.5qt]hh&aFh/3)m#a-%q[mF8tu<V^Pa:
%;O,*t;q(00'KRb2_c2t$8D$?-Wo<i+plZ6hHCW_?I$r#<#o:Hg22uYA_>o.?o617(qY"T%HmFLX!knep)Zi=(SCP^:qY_Lpa09A-
%>r8nV,"DAC%-gEnA_kpk'Z4?1E)FN)4/e`PNIXorN?'jV:.4_.DX;hBJ$5eN=P^i)(KTVH3Nb0%?Z&1VpmPS+V>3+<<!=W$37%&]
%C`8-"j,lI>2[K]+PF\k(TnL6FhcI>$:"0\dKa/=AR4Z;#fQNVrBK?Rk`ae-R;$A+)\2%10*7M"S#H<4c>\H[`+BI>(]i%h3o#8&.
%#YM[[2fb,W;fT%qlJ`)C*@47^DBr,O2p/OBWbV$_a1j!U7AgGg<9C6I*s^hqQ3/*7\r-QNm08lV_/;S95_*S`a.3t\jcjk+0<j%A
%MC3MG8"13IEnJP<*2U\1Yc7X^5pXM>%tnoi,fblI!Sn&JE2(P.4TKUATRSI+nVh-R6h2!aMC],f7*?`:Zm&._08f5Z]cgDU"['3p
%.lQ4Z+^O""PT4m*KGs93Vp<S[HEGoYWBJ<F6rO7iA(Z]"(DpfidE!n'=o<t3Ft2DP-G'Ob7/J>\4!PchO0L+ag(^k5IQjWHa,]>W
%D3Q!E3&d>kX^sdbQHp);c08X$,=a+SNT$0[G50"aJ:fR*YWH)6OEWD59eLAN/B<ePJqiC`*LaSleF5.+:io^\#-\)A1>N-J#7a-%
%(48N/jbDN7r"]Rh>BR.2KN(%;SKh7B36T]6F!u.KgA/Vh[1ANmOJ:9)Oj%5u:=.3rc!'[A<:#^ag_(W>oCJG=o.u2ghZ^Ce[;gHe
%p;Z'qUW7LEf2Wl.O(gpMJ"*m+W"M@1qXm1h/k9a:%g>$MC/J26,>9tK_]p\;6Hso:A(Ui0op[9+M$sL+:%,=6qsQ,cq(4;qmfu0I
%C=-X1?pVP(eE4,])CQ_hBhFI)bBuk.IVcZQWY</J8aV?;bS,=r2D*/V,OkoZVOJ#W_3mNR!jJ7`<LiRUN[*YHY@$B=(WU_+&c(H,
%r)\d:j2WKFf+!6Y?`7Mi9@*eB.De=sGtu_$(2+1+)5%DC^>V?6$^?%6G8kLj5JQlI^H.@'rO`=j\a"iVFd%(%5rI(i%uL>he@*nA
%*R31IkC[s:AoPU&P^LaT!=61YmD:A;*(j`Z>*-/<.8JBQ3Z_.\!`<nrQG=/%gV;cI<-<_DI<X/UM4u+Z/t9>A!?_WoPR2"SdhNkR
%"qc$#4>7Xk7W&[$WgWlI%0s5U0;\OGk!<qqe?@Dh@9:E@YZ:@ZG'6e_C3i*ZQI56]lbdKarX?jD3;2J+mMtQ-blg@cM.S7!RFGB'
%1cJrt!Z<``&.8aADF+B0U4;/LGBbrVk%T@19]XTYM0Vu6'__2EIVs`!G$'B([<_ZS&D+f/)"(V6E1V]U"(Bq>SMrWN!V%j3ED;r,
%rPqLReSt8*3)kF%0kF_-dKhm(kRhp-.6<`HI>C:5`H-KZ;<nlss)?.U+HMS'7MFXUmdA0E*!`Od@1>d@aE;IX\;PZF&/OfBhVIdW
%.$DWSr5nQH]@bi@)\*GMBh&221u+Q:$?bJpKp-.Y$gR!geDOV79>k).!*n?=^_?B@OHaE*^pCUe4bD2bJ\f5i@c^-8&Q)Go)[l)G
%M;PjG5ucE=:r+C&9/<mBH*\NW+U)6B(T$/'ES28beAi"k%)cm@R#ad)n\bam"uEfGa7YkXZu_Z*Tni&$<nM3&=3cF.h]7BV%(%5/
%0Y"f&[$"$%(L\\$X"R\8&7+?;bmcD:!J69#S%RnQTnTO.4RpqG)F_q1#1&WMf2q<!l956WRL"SRP?,Yu>MXQc8V$'ogjC_k%2]@=
%mq\+F&5MahiUN65VLh_PG0P-h.7%9SRHk<S2!rd;K,><Qlu^Slkj)=;]Mdb$%hjK=EGDQT&J@N@i85u:`meuh#GeO(3ta@s\NA,d
%p9_odE$,K*?[9ln_Op,8m,>&lNUMB2@Y3eI1J0o1Yk_a@!hh3OZoRo#%M'X@h-_JP=:5?'J=%`G\1!FsS]-4L.0""_"1d8#$tCb!
%BTDj[j"g^a9q`!fMa4_Kgc33JSd-j]pGg!,ZlfEQ?2Q_p`]PJdHCZ&f5_T4%a7hD'_'T]DRRqk1;im%sgI;4<`>):WNT2oe$,Uh?
%6:p2rb\f14H*^E@YdgWo7W+TSKpWHTa45en"m$fh1uD)X&ep3hE\`s1V4QHRQK0nWn@^ZF\*q=@][G)PlQ>%$0iB_u-i37&Ee&0B
%@X"H`rqXK1+RE?Lj,cg:bg![Gpu&<79(91U3"YmF2[)KO1a3)=]f(YE#+1-q$5q6gA7CcH;)\[2Xeh$o_"73_`Y31$0F:ABNC8ma
%#<p&#BuM_dP'_"]0L(XRU7SJ>-I6nPBa4uT/O5gkQn%+e#+g#UM&CB6UPfPr6T%h3FueA\<jK.<]GLLqD"V,T%n#l`+L>Es]NpDR
%KDYR+O"rl@KVpee/0lrl2E0__9+OR6prU4Mm/pai[CPfr`@a)?E%D%S$0aXrb5eMZh7g(l2]4"l0gWfUPB9C=0hb-AenN:7L#-]C
%eDkM3$1ct;;m]H-9Af9?'-Q^Vg4>rVZ3tiWfV573`Mb3YqnNo]<T;.KmYS]bAdV_b>[o%G>J4MRABn2<EEddF^I'#7$eFK2/,h#n
%T_(arF_i[l'YrJ/hZ\Ok(]L-23$8VpQB/7QrVtg]kNtE_V!4fHpi7YPAqZ*^DIBm#NZVRaqi<E"Mhp#7O\%miF"tj"4!;45GjM$`
%,.p@E8C!>4CN8ZoH89`O!+rb\fdt0_+pk(UH>N@rX?fD4fZB;;$CIY&1>"@$&?Ga?"49c)lJFcH&ef%53ER\U.@bl+H*F@..QhY6
%8<pC)X!9%]a$'n4!d)P9M5h4iJ"Q2jGmlra]E>VKG,_kF:ah45At7ajcFtf'=]8_d%tf^pMn%k$$@WhIpYL8t/D(lj-7;<W[X!$7
%V%AUS21&Sh,@g^<`'h9;l95W.`@!YK5\!,PW.L]]U+6(6/8WcYdXAH0bE$).3R"';a$*%N.L[_..Ter5?&KYI]"o#IeMe[B%DceN
%=P^f/!`b#Z=pU>PQaF1dqh<i2*(=T:""t1d44XCcJ-M"sIZVT)2-:N\68Lu-$Q.2j9.4b/+A@]EjGT$?L>ki1HQCZ]0g0NTL]8dD
%W>)-tG=J,A,Uc/NSK.3oaC+@WCne0PW?CLD9Vdk_euC]>DSgs>2LH/>eI-$pn4#)m#R<U\5*R*G"]`#I3\F'?L4O=>0qp5:._[5`
%T7b0'?cH\SK/AP$$p+\$KaJ?rTEOfq_Lh":X8%eWpoWs\Ho\W0(gqre,tZr[#^L5!ZK;[`l[0gM`=T8p5YUj=].GSj<6,sHG=G/*
%QQC)W)bdSKFi](97`6W_>/h$s8D*$@rM?4bK[o#dQBfen[U5a01br3h]/2>iMSKJJlMt[tRu+%tEragkR#C$SjPSe"I2-IB@7G;?
%I%lWA?l4>SUBs+Jbdc^&"1"QliCpp!KFksIfEo/<$@%gcMGCD/\BPu&b],1]$pT1&6>eB,<#(2M+6etQ"OMV1"=!<;I._(.0O+@2
%m!Ff-3!fV0,q*2KF92^kZ,"o[Nl,l&PbdN8>ZGYrfE<C%hBAoo/>8h/!&'B&J]QmXWXmIV!a)OI!f9;lF<ogr%M:F*26'[g:8j!F
%PCXuh.Qnm\coD*B%CME'S:7&qfhJ<3Y^+kgeCG'X!)SU5VacY@I"RP15j["22]7MG9]8%?G0H]r_HboZWcO(X5%[TGNY^1be6R+,
%BNDRVb$R<^ND\C#;0"Tjn%KVNdRrVM-;8B7Q$a1,gZ1+#n:.2Gc?Xrsg,_0"joL.Ge]U'_$guh(o)Q2kl7R%D#68$=GnRT35jR/W
%dfB:u%\n:f9H')k=YNuEfe9[^=mtRgaB8M,I6Rs=!3Y4nblM4`:4:)$R(#7jScdV:Hu/HqQn2TKpN(l%]W[31d/rW/E]6>B'HmX?
%b:9Oi8<gjD9D>]"*7DZ`lIoN?9LobITbK?tW6uc<O";aX11#dn"Vc*Vbms=Rn:F(t-u%i/&.kQM^&Wrj6)g'UX'ol*6:+$1S`liK
%W6;jgE4"_R!VG7N;YLeJI`=n.o5*<BmNK*E!D"aRr-+%>a6^9.bP0R"pB%;6k9AH[$X)$j&bbr5.bO::A]7#5e^\pgE>hg6f"?Ya
%2i5nM/a`e5Z(u1;=\(*4UqUT$gP[K"(\aM!DL-s(]SLk7kc5n&HI_U9neec`-bW6@oB4tt=!,1Gl`H2EbUM&njt=Ilo.]IU^X8u)
%.L[]M6]?i%+6$E5N"&:JkYPu4#`ifGAW19RgTVNDKIBWW>W].Ce+^`Z/?u3&msV=@n%Zgq]jWs.IRDS8ZA`pUiN^hr3p/tYHQk/-
%"GjqjcFU7"$e?b_3&j('B='$Ic-D-%:m7R-K`>cg'&W9C#P7HGgMPFJ^\>)@Kc;0?PA'P%(Y3I5-GRe:Q.dU!+47!jn2jMEUc75P
%AUW>Q,PUUd,SlouRZN9B1iShS,O5Vt[`LRf,:=AJOhnSn<ciF`;%.4$VGl-c@Xijm+[=!qM%J&/oe<d\c]X&3HAu<NkpAP<.F9t,
%.O-uj?J\E-3m=h6]1=llZFAI3^u0#maX*"^,$-OQh9P;[>7o%C]O3Nf$5A+a[ZHDof'R#sXG]9`rI"Icc$5k;Pg&`gn,IGCL\Wp<
%]fX<q=)cHuqQ(K)a1auW[qVm41hbT613@)>-s?ZYE\Re^.j2g3R*2-NUgHqZSlCNsFu!t,3&$a:ilb@%)_:a90LH>gi.fi;,)AMm
%\(+au;-XY[!_l.m/>/J22$$9W2dRKdf>qUDnIho(*Adua;&[#EQErj[TOOR_/CeK?f]t`4b^".=@;&Y`Q-<ij&M,W2[+eeZCY`@9
%G2%dX1p'4./eT&e,(U..C<4KifPjX66to%6b\78BB![qpY4fD3]>M*iWW/IqE:Rho&P5FU;^]ZmcXfb3/Pqt&*iJ9`PMTp8Mpmc/
%nl]OAL+9F`p(0e=,/f,=PN@6!YK,njfI-\se*\^mmoAJd]J'9Z,&(e=?_fNe4.m=0%M@-k'VLE4bQ]J"(THq&bgkj7%\188HZuJb
%`9q#gSP99=K_?rQ[j)Ts6b6A#Lh!bfQ"d8'*(O5XiX%"']=8f[&%@q_8FPm_4eQc,kHE-d'?t)p0:%$!B?_gF1/6HQEqC2OBN#2a
%n^I))=g,4/mN)JE_p=!iH*O=1I1oL-]:>%U]da)7_mo)t-@8aN6juRDSIMiJ2-R7-q*?(6)(:Rm_'VsO3lg#j6rUCQP\H[FL*o/r
%>1B=4f`hZLa[>3fIn@2LBDM)WPbF=`h?[5T\<tc+[R2/aTcZlkcN#uEm-A&C`'[MKI+?_HSaZ%*<EI,Um'%@k9>nf`G"O2U&_^AR
%-P\dg8?[?FMG2],(p[O7&MYV#4k#i9N4\,(LeU(tZ'!/Ol73Z5<aJ`26(@CRO;e<Hf9FkeSjS/^j[X/\`OX<rE`USaA3Zh7Q"iCc
%O*i7J2L_'6l,hb&]M,^',*A\p\X%#V<7\``hgOEXSgWkK`<CCK[Q>p,%cEKb8[X>#6i`?cIQl(!B*cNcF!mBq2MhRO6\I/Jr*p0*
%AK)qW51IXqk7k$HP,mT9=Fp02]&9qG)f8/gCm!nZ]+f`+3TQ\bfp:-KUd\kE@c%e8[,HCOm>?tq+lbI^NTPkXV4%f]Xsk,;S&d[6
%h<Xb4f,Qm:\e4hr/I:a^Zunu4VcEp$7^8of>-PB\QMiM"3>Pj#0*S1^#&W._^9H/S"kSDK-KAJCP/p&q5ftENDUsp3/=*`H!a2e,
%YTnN7WkPT`G!EIkLa'f-"=^#kU:4E_9'95DA@1S7;ZugP-[j*gd]<Q"iBpdi$0dUbPV9RGf"Fu=J&N//^<oXYkitT7H\*E;aK$Yg
%Mm`[S_aoN8YfDs.G$/XAQR:=C3TE#40.<CPI-KGdI3CW:8I*9l%Q1bJCL`clZ)H^Vd-67pHk&\jm4n52]VtVp1:Vj>:m#]N13_f`
%fh]agG0sFf6@rcn<Df&+"Ve+tr?b1I76Q06o^STU#Hb_T9Cg5dG)lZ-Fm[Y#R:VBET.CZ[LZBhR#T[eY,lP_U%ljjO)/#_99&5>[
%,Rgu>(o:f!8idt+*XAal5RH)dc[RY#alm_H.RCpl_YpBb"%bY7=[ZFp;4NLoQc5lC+3gtG(/G#?ZoU!*i0g"^7>.hj7g*PWFSW_&
%c/]H=\EGMQWq=SEJ=9EM"$=LM7<n"H/)n'lZLd,-XBJh;%C:P'>Uk67#U!F_b0M&'hBhIY<B+aArn/aD!&g7k\'/H[Gu%(AYW\G]
%\869N0\GUF#CqpO:+dbd0aW4OT,g%]Of#4115KU@HS&^Oe+5<#(=jPm!!o.V2Z_)J%5g.l6F'Jc_s%HR?oXm6?%Ho<TD^D:M!7G9
%N16g_ON5)/L>V<I]tN87!@eGo0JHA]3pqLg1/[:)_-(4qXtM11&.D2Oa\1/1V2.p560'?E47>jR_s4D9QBMinf$E%qGAf+p!,gph
%:B5Y]lq`LM`sRLHGs[5TVf8\/NhZlYn]2mnFU92/q>@*2^-uH&.u?Sn=2S'Xp@T1p+[[t,$UrgY/K-(-_*9B%=[e/41d[c$Dp8n!
%dU.s3!"d6uBqinaTi(,I*[N'6V)c!A-p_<r%[Z<\h,<7>Yt^k37CTQaT=Dj'+^8F(ZtG:_:%dR_;hUL!GuAd^o4,*F].10F*UFVg
%Sr'DGZS,^Z;_2YBY,(>b\Up!&'J5:,XCnSdV)Tfu9fcT:QN!lWLZ*N.T=>-]S]CDLM^kmB02f*4l/9YVY?>t6,>[(*FLI/W;1E]3
%I[8L,M='K74kua)7+EPuI-edp*s/Hu+.35d$;uJuGDih%*=\8,\<2i_M_0Bt]Bt9@,m0L%VGp`&pV#lN)PmQa"egkL[OdX[^1(0Q
%br@dOpD)K2d5lolJiLY6En+Z$W:no(]7os/>kG]ULYl%=moBCBMrn@Ud?i(/YG\^YQ`A,07B_8adKbUsn!*D,:NM>XN]^m)LJDil
%RKWD,XLQe/pRct[1OQ8u[jK^b0aJqU?dd=ImaWJqm%?>@-M:s\QdkL568W&g6`YhNNft0hq-AtQ#j<fH;)2lX)JCIc@huBVA"3(#
%Q(d!-qh.=)o#-_q9mK>%&#9"gNP%^Jb^!`dK-a@s[%I(F5q%L<J*a[G+jt+'*Ze(QP'f4-^D`e!RM!U93mfQ"er=t>E>Yb=.FCuR
%6q0)YEE#(9:mOVU8p$0c9&+WO]i%g!KMFAAX/hS1&NR*s`P?K*OG.smRADF\?U*_o01#_'s2SV^r"&h<s7_$<kPt)Ma3R!Jl+?Bo
%_;G:E5Q9+Bs6WU3r*M\fn>AMKh*:l(+$]_niK+$:ce)0Gpts,a55`m%Ie_Opo.PUiiPWG0c[Yc*OPm#-L;3ccJ+t\skmr:<rrCB$&iK~>
%AI9_PrivateDataEnd
